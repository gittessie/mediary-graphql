var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import moment from 'moment';
export var timeFormat = 'MM/DD/YYYY HH:mm';
export var dateFormat = 'MM/DD/YYYY';
export var rndRange = function (start, stop) {
    if (start === void 0) { start = -100; }
    if (stop === void 0) { stop = 100; }
    var low = Math.ceil(start);
    var high = Math.floor(stop);
    return Math.floor(Math.random() * ((high - low) + 1)) + low;
};
export var rndRangeFloat = function (start, stop) {
    if (start === void 0) { start = -100; }
    if (stop === void 0) { stop = 100; }
    return ((Math.random() * (stop - start)) + start);
};
export var daysAfter = function (days) {
    if (days === void 0) { days = 0; }
    return moment().add(days, 'd').toDate();
};
export var daysAfterStr = function (days) { return moment().add(days, 'd').format(timeFormat); };
export var labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
export var rndDataset = function (start, stop) { return (labels.map(function () { return rndRange(start, stop); })); };
export var rndDataset2d = function (start, stop) { return (labels.map(function () { return ({ x: rndRange(start, stop), y: rndRange(start, stop) }); })); };
export var rndTimeSerie = function (days, startValue) {
    if (days === void 0) { days = 150; }
    if (startValue === void 0) { startValue = 120; }
    var startData = moment().subtract(days, 'd');
    var data = [];
    var lastValue = startValue;
    for (var i = 0; i < days; i += 1) {
        var newValue = rndRangeFloat(Math.max(0, (lastValue - (lastValue * 0.05))), Math.max(0, (lastValue + (lastValue * 0.05))));
        data.push({
            t: startData.add(1, 'd').format(dateFormat),
            y: newValue,
        });
        lastValue = newValue;
    }
    return data;
};
export var rndDatasets = function (count, props, boundedRandom) {
    if (count === void 0) { count = 2; }
    if (props === void 0) { props = {}; }
    if (boundedRandom === void 0) { boundedRandom = false; }
    var datasets = [];
    for (var i = 0; i < count; i += 1) {
        var rest = Array.isArray(props) ? props[i] : props;
        var start = boundedRandom ? (100 - ((i + 1) * 10)) : undefined;
        var stop_1 = boundedRandom ? (100 - ((i) * 10)) : undefined;
        datasets.push(__assign({ label: "Dataset " + (i + 1), data: rndDataset(start, stop_1) }, rest));
    }
    return {
        labels: labels,
        datasets: datasets,
    };
};
export var rndDatasets2d = function (count, props, boundedRandom) {
    if (count === void 0) { count = 2; }
    if (props === void 0) { props = {}; }
    if (boundedRandom === void 0) { boundedRandom = false; }
    var datasets = [];
    for (var i = 0; i < count; i += 1) {
        var rest = Array.isArray(props) ? props[i] : props;
        var start = boundedRandom ? (100 - ((i + 1) * 10)) : undefined;
        var stop_2 = boundedRandom ? (100 - ((i) * 10)) : undefined;
        datasets.push(__assign({ label: "Dataset " + (i + 1), data: rndDataset2d(start, stop_2) }, rest));
    }
    return {
        labels: labels,
        datasets: datasets,
    };
};
