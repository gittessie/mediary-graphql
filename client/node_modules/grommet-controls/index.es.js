import React, { Component, useContext, useEffect } from 'react';
import { Box, Text, Heading, FormField, CheckBox, TextInput, DropButton, Button, Keyboard, Calendar, Meter, Select, ResponsiveContext, TextArea } from 'grommet';
import styled, { ThemeContext, css, keyframes } from 'styled-components';
import { controlBorderStyle, edgeStyle } from 'grommet/utils/styles';
import { filterByFocusable } from 'grommet/utils/DOM';
import { deepMerge } from 'grommet/utils/object';
import { StopFill } from 'grommet-icons/icons/StopFill';
import { findDOMNode } from 'react-dom';
import { conformToMask, createTextMaskInputElement } from 'text-mask-core';
import { createAutoCorrectedDatePipe, emailMask, createNumberMask } from 'text-mask-addons';
import { FormDown } from 'grommet-icons/icons/FormDown';
import { parseMetricToNum } from 'grommet/utils/mixins';
import { normalizeColor } from 'grommet/utils/colors';
import { Calendar as Calendar$1 } from 'grommet-icons/icons/Calendar';
import { Close } from 'grommet-icons/icons/Close';
import { StatusGood } from 'grommet-icons/icons/StatusGood';
import { StatusWarning } from 'grommet-icons/icons/StatusWarning';
import { StatusCritical } from 'grommet-icons/icons/StatusCritical';
import { StatusUnknown } from 'grommet-icons/icons/StatusUnknown';
import { StatusInfo } from 'grommet-icons/icons/StatusInfo';
import { StatusDisabled } from 'grommet-icons/icons/StatusDisabled';
import { Add } from 'grommet-icons/icons/Add';
import { Subtract } from 'grommet-icons/icons/Subtract';
import { FormView } from 'grommet-icons/icons/FormView';
import { Hide } from 'grommet-icons/icons/Hide';
import { Previous } from 'grommet-icons/icons/Previous';
import { Next } from 'grommet-icons/icons/Next';
import { Blank } from 'grommet-icons/icons/Blank';
import { LinkDown } from 'grommet-icons/icons/LinkDown';
import { LinkUp } from 'grommet-icons/icons/LinkUp';
import { Menu } from 'grommet-icons/icons/Menu';
import { FormClose } from 'grommet-icons/icons/FormClose';
import { backgroundStyle } from 'grommet/utils/background';
import { FormNext } from 'grommet-icons/icons/FormNext';
import { deepFreeze, deepMerge as deepMerge$1 } from 'grommet/utils';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
}

var ROUND_MAP = {
    'full': '100%',
};
var StyledImageStamp = styled.img(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  ", ";\n  ", "\n  ", "\n  overflow: hidden;  \n  object-fit: cover;\n  border-radius: ", ";\n  -webkit-border-radius: ", ";\n  -moz-border-radius: ", ";\n"], ["\n  ", ";\n  ", "\n  ", "\n  overflow: hidden;  \n  object-fit: cover;\n  border-radius: ", ";\n  -webkit-border-radius: ", ";\n  -moz-border-radius: ", ";\n"])), function (props) { return !props.plain && controlBorderStyle; }, function (props) { return ((!props.contain || props.contain === 'width') && props.size && edgeStyle('width', props.size, false, undefined, props.theme)); }, function (props) { return ((!props.contain || props.contain === 'height') && props.size && edgeStyle('height', props.size, false, undefined, props.theme)); }, function (props) { return ROUND_MAP[props.round] || props.theme.global.edgeSize[props.round]; }, function (props) { return ROUND_MAP[props.round] || props.theme.global.edgeSize[props.round]; }, function (props) { return ROUND_MAP[props.round] || props.theme.global.edgeSize[props.round]; });
var templateObject_1;

var SIZE_MAP = {
    small: 'medium',
    medium: 'large',
    large: 'xlarge',
    xlarge: 'xxlarge',
};
/**
*  A small image stamp used for avatars or image thumbnails
*/
var ImageStamp = function (_a) {
    var size = _a.size, src = _a.src, rest = __rest(_a, ["size", "src"]);
    return (src ? React.createElement(StyledImageStamp, __assign({ src: src, size: SIZE_MAP[size] }, rest)) : null);
};
ImageStamp.defaultProps = {
    contain: null,
    size: 'medium',
    plain: false,
};

/**
* An image with some text, can be used as a user Avatar image<br/>
* `import { Avatar } from 'grommet-controls;'`<br/>
* `<Avatar image='...' />`<br/>
*/
var Avatar = function (_a) {
    var image = _a.image, title = _a.title, subTitle = _a.subTitle, rest = __rest(_a, ["image", "title", "subTitle"]);
    return (React.createElement(Box, { direction: 'row', align: 'center', gap: 'small' },
        React.createElement(ImageStamp, __assign({ src: image, round: 'full' }, rest)),
        React.createElement(Box, { justify: 'between' },
            React.createElement(Text, { weight: 'bold', truncate: true }, title),
            React.createElement(Text, { size: 'small', truncate: true }, subTitle))));
};

var white = '#ffffff';
var silver = '#c0c0c0';
var gray = '#808080';
var black = '#000000';
var red = '#ff0000';
var maroon = '#800000';
var yellow = '#ffff00';
var olive = '#808000';
var lime = '#00ff00';
var green = '#008000';
var aqua = '#00ffff';
var teal = '#008080';
var blue = '#0000ff';
var navy = '#000080';
var fuchsia = '#ff00ff';
var purple = '#800080';
var basicColors = {
    white: white,
    silver: silver,
    gray: gray,
    black: black,
    red: red,
    maroon: maroon,
    yellow: yellow,
    olive: olive,
    lime: lime,
    green: green,
    aqua: aqua,
    teal: teal,
    blue: blue,
    navy: navy,
    fuchsia: fuchsia,
    purple: purple,
};

// eslint-disable-next-line import/prefer-default-export
var StyledCard = styled(Box)(templateObject_1$1 || (templateObject_1$1 = __makeTemplateObject(["\n  @media (max-width: ", "px) {\n    flex-basis: 100%;\n  }\n"], ["\n  @media (max-width: ", "px) {\n    flex-basis: 100%;\n  }\n"])), function (props) { return props.theme.global.breakpoints.small; });
var templateObject_1$1;

/**
* A Card-type container, all props of Box apply<br/>
* `import { Card } from 'grommet-controls';`<br/>
* `<Card>`<br/>
* &nbsp;&nbsp;`<Card.CardTitle>`<br/>
* &nbsp;&nbsp;&nbsp;&nbsp;`Title`<br/>
* &nbsp;&nbsp;`</Card.CardTitle>`<br/>
* &nbsp;&nbsp;`<Card.CardContent>`<br/>
* &nbsp;&nbsp;&nbsp;&nbsp;`card content goes here`<br/>
* &nbsp;&nbsp;`</Card.CardContent>`<br/>
* `</Card>`<br/>
*/
var Card = function (_a) {
    var children = _a.children, rest = __rest(_a, ["children"]);
    return (React.createElement(ThemeContext.Consumer, null, function (theme) { return (React.createElement(StyledCard, __assign({ theme: theme, overflow: 'hidden' }, rest), children)); }));
};
Card.displayName = 'Card';
Card.defaultProps = {
    align: 'center',
    border: 'all',
    elevation: 'small',
    round: 'xsmall',
    flex: false,
    gap: 'small',
    fill: 'horizontal',
    background: 'white',
};
/**
*  Card Actions to be placed at the bottom of the Card
*/
var CardActions = function (_a) {
    var children = _a.children, _b = _a.pad, pad = _b === void 0 ? 'small' : _b, rest = __rest(_a, ["children", "pad"]);
    return (React.createElement(Box, __assign({ align: 'center', pad: pad, gap: 'small', border: 'top', flex: false, fill: 'horizontal', direction: 'row' }, rest), children));
};
CardActions.displayName = 'CardActions';
Card.CardActions = CardActions;
/**
*  Card Title display the card title
*/
var CardTitle = function (_a) {
    var children = _a.children, color = _a.color, textAlign = _a.textAlign, truncate = _a.truncate, _b = _a.level, level = _b === void 0 ? 4 : _b, _c = _a.strong, strong = _c === void 0 ? false : _c, responsive = _a.responsive, rest = __rest(_a, ["children", "color", "textAlign", "truncate", "level", "strong", "responsive"]);
    return (React.createElement(Box, __assign({ direction: 'row', fill: 'horizontal', border: 'bottom', gap: 'small', flex: false }, rest), typeof children !== 'string' ? children : (React.createElement(Heading, { level: level, margin: 'none', color: color, textAlign: textAlign, truncate: truncate, responsive: responsive }, strong ? React.createElement("strong", null, children) : children))));
};
CardTitle.displayName = 'CardTitle';
Card.CardTitle = CardTitle;
/**
*  Card Content
*/
var CardContent = function (_a) {
    var children = _a.children, _b = _a.pad, pad = _b === void 0 ? 'small' : _b, rest = __rest(_a, ["children", "pad"]);
    return (React.createElement(Box, __assign({ pad: pad, fill: true, flex: true }, rest), children));
};
CardContent.displayName = 'CardContent';
Card.CardContent = CardContent;

var StyledForm = styled.form(templateObject_1$2 || (templateObject_1$2 = __makeTemplateObject(["\n  width: 100%;\n"], ["\n  width: 100%;\n"])));
var templateObject_1$2;

var FormContext = React.createContext({
    attachToForm: null,
    detachFromForm: null,
    getFieldValue: null,
    getFieldErrors: null,
    onFieldChange: null,
});
var styledComponents = {
    form: StyledForm,
};
/** A Form with built-in validation<br/>
*`import { Form } from 'grommet-controls';`<br/>
*`<Form onSubmit={...} />`<br/>
*/
var Form = /** @class */ (function (_super) {
    __extends(Form, _super);
    function Form(props) {
        var _this = _super.call(this, props) || this;
        _this.fields = {};
        _this.containerRef = React.createRef();
        _this.validate = function (data) {
            var errors = {};
            var addError = function (key, field, message) {
                if (!errors[key]) {
                    errors[key] = [];
                }
                var msg;
                if (typeof message === 'function') {
                    msg = message(field.description || field.label || key);
                }
                else {
                    msg = message;
                }
                errors[key].push(msg);
            };
            Object.keys(_this.fields).forEach(function (key) {
                var field = _this.fields[key];
                var rules = field.validation;
                if (rules) {
                    if (!Array.isArray(rules)) {
                        rules = [rules];
                    }
                    var _loop_1 = function (i) {
                        var rule = rules[i];
                        if (typeof rule === 'function') {
                            var value = data[key];
                            if (Array.isArray(value)) {
                                var arrayErrors_1 = [];
                                value.forEach(function (_v, index) {
                                    var message = rule(data, data[key], index);
                                    if (message) {
                                        arrayErrors_1[index] = message;
                                    }
                                });
                                if (arrayErrors_1.length) {
                                    addError(key, field, arrayErrors_1);
                                }
                            }
                            else {
                                var message = rule(data, data[key]);
                                if (message) {
                                    addError(key, field, message);
                                }
                            }
                        }
                        else if (rule !== null && typeof rule === 'object') {
                            if (rule.rule && typeof rule.rule === 'function') {
                                var isValid = rule.rule(data, data[key]);
                                if (!isValid) {
                                    if (typeof rule.message === 'function') {
                                        addError(key, field, rule.message(typeof field.label === 'string' ? field.label : key));
                                    }
                                    else {
                                        addError(key, field, rule.message);
                                    }
                                }
                            }
                        }
                    };
                    for (var i = 0; i < rules.length; i += 1) {
                        _loop_1(i);
                    }
                }
            });
            if (Object.keys(errors).length === 0) {
                return undefined;
            }
            return errors;
        };
        _this.onSubmit = function (event) {
            var _a = _this.props, onSubmit = _a.onSubmit, onSubmitError = _a.onSubmitError;
            var data = _this.state.data;
            event.preventDefault();
            var errors = _this.validate(data);
            if (!errors) {
                if (onSubmit) {
                    onSubmit(data);
                }
            }
            else {
                if (onSubmitError) {
                    onSubmitError(errors);
                }
                _this.setState({ errors: errors, submitted: true });
            }
        };
        _this.updateObject = function (name, value, e) {
            _this.setState(function (prevState) {
                var _a;
                var data = __assign(__assign({}, prevState.data), (_a = {}, _a[name] = value, _a));
                var submitted = _this.state.submitted;
                var errors = _this.validate(data);
                if (_this.props.onChange) {
                    _this.props.onChange(name, value, e);
                }
                if (errors) {
                    if (_this.props.onInvalidForm) {
                        _this.props.onInvalidForm(data);
                    }
                }
                else if (_this.props.onValidForm) {
                    _this.props.onValidForm(data);
                }
                return { data: data, errors: submitted ? errors : prevState.errors };
            });
        };
        _this.attachToForm = function (name, props) {
            var _a;
            _this.fields = __assign(__assign({}, _this.fields), (_a = {}, _a[name] = props, _a));
        };
        _this.detachFromForm = function (name) {
            delete _this.fields[name];
        };
        _this.getFieldValue = function (name) { return (_this.state.data[name]); };
        _this.getFieldErrors = function (name) { return (_this.state.errors ? _this.state.errors[name] : null); };
        _this.state = {
            errors: undefined, submitted: false, data: __assign({}, props.object),
        };
        return _this;
    }
    Form.getDerivedStateFromProps = function (nextProps, prevState) {
        if (JSON.stringify(nextProps.object) !== JSON.stringify(prevState.data)) {
            return {
                data: deepMerge(prevState.data, nextProps.object),
            };
        }
        return null;
    };
    Form.prototype.componentDidMount = function () {
        var focusFirstChild = this.props.focusFirstChild;
        if (focusFirstChild) {
            var items_1 = this.containerRef.current.getElementsByTagName('*');
            items_1 = filterByFocusable(items_1);
            if (items_1.length > 0) {
                setTimeout(function () {
                    // @ts-ignore
                    items_1[0].focus();
                }, 0);
            }
        }
    };
    Form.prototype.render = function () {
        var _a = this.props, 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        onSubmitError = _a.onSubmitError, onValidForm = _a.onValidForm, onInvalidForm = _a.onInvalidForm, onSubmit = _a.onSubmit, onChange = _a.onChange, className = _a.className, children = _a.children, a11yTitle = _a.a11yTitle, tag = _a.tag, rest = __rest(_a, ["onSubmitError", "onValidForm", "onInvalidForm", "onSubmit", "onChange", "className", "children", "a11yTitle", "tag"]);
        var StyledComponent = styledComponents[tag];
        if (!StyledComponent) {
            StyledComponent = StyledForm.withComponent(tag);
            styledComponents[tag] = StyledComponent;
        }
        return (React.createElement(StyledComponent, { className: className, onSubmit: this.onSubmit, "aria-label": a11yTitle },
            React.createElement(Box, { direction: 'row' },
                React.createElement(Box, __assign({}, rest),
                    React.createElement("div", { ref: this.containerRef },
                        React.createElement(FormContext.Provider, { value: {
                                attachToForm: this.attachToForm,
                                detachFromForm: this.detachFromForm,
                                getFieldValue: this.getFieldValue,
                                getFieldErrors: this.getFieldErrors,
                                onFieldChange: this.updateObject,
                            } }, children))))));
    };
    Form.defaultProps = {
        focusFirstChild: true,
        onChange: undefined,
        onSubmit: undefined,
        onSubmitError: undefined,
        onInvalidForm: undefined,
        onValidForm: undefined,
        object: {},
        tag: 'form',
        basis: 'medium',
    };
    return Form;
}(Component));

var WithFormField = function (_a) {
    var validation = _a.validation, label = _a.label, description = _a.description, name = _a.name, controlLabel = _a.controlLabel, inField = _a.inField, children = _a.children, other = __rest(_a, ["validation", "label", "description", "name", "controlLabel", "inField", "children"]);
    var form = useContext(FormContext);
    var onFieldChange = form.onFieldChange, getFieldValue = form.getFieldValue, getFieldErrors = form.getFieldErrors;
    useEffect(function () {
        form.attachToForm(name, { label: label, description: description, validation: validation });
        return function () {
            form.detachFromForm(name);
        };
    });
    var onChange = function (e) {
        var value = e.value, target = e.target;
        var targetValue = target ? target.value : undefined;
        onFieldChange(name, value || targetValue, e);
    };
    var getValue = function () {
        var value = getFieldValue(name);
        return value === undefined ? '' : value;
    };
    var errors = getFieldErrors(name);
    var error = Array.isArray(errors) ? errors[0] : errors;
    if (typeof error === 'function') {
        error = error(typeof label === 'string' ? label : name);
    }
    var field = children(__assign({ id: name, name: name, label: inField ? controlLabel : label, value: getValue(), onChange: onChange }, other));
    if (!inField) {
        return field;
    }
    return (React.createElement(FormField, { htmlFor: name, label: label || (controlLabel === true && name), error: error }, field));
};
WithFormField.defaultProps = {
    validation: undefined,
    inField: true,
    controlLabel: undefined,
    label: undefined,
    description: undefined,
    Control: React.Component,
};

var CheckBoxField = function (props) { return (React.createElement(WithFormField, __assign({}, props), function (_a) {
    var value = _a.value, onChange = _a.onChange, rest = __rest(_a, ["value", "onChange"]);
    return (React.createElement(Box, { pad: { vertical: 'small' } },
        React.createElement(CheckBox, __assign({ checked: value === true, onChange: function () { return onChange({ target: { value: !value } }); } }, rest))));
})); };

var StyledDropInput = styled(TextInput)(templateObject_1$3 || (templateObject_1$3 = __makeTemplateObject(["\n  padding-right: ", "px;\n"], ["\n  padding-right: ",
    "px;\n"])), function (props) {
    var widgetsBox = props.numWidgets
        * (24 + (2 * parseMetricToNum(props.theme.global.edgeSize.small)));
    // eslint-disable-next-line no-mixed-operators
    return widgetsBox + (parseMetricToNum(props.theme.global.spacing) / 2)
        - parseMetricToNum(props.theme.global.control.border.width);
});
var StyledDropInputContainer = styled.div(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  position: relative;\n  width: 100%;\n  cursor: pointer;\n"], ["\n  position: relative;\n  width: 100%;\n  cursor: pointer;\n"])));
var StyledWidgetsContainer = styled(Box)(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n  position: absolute;\n  right: 0;\n  top: 0;\n"], ["\n  position: absolute;\n  right: 0;\n  top: 0;\n"])));
var templateObject_1$3, templateObject_2, templateObject_3;

/**
*  An Input control with an optional drop button with the specified 'dropContent' or widgets<br/>
*`import { DropInput } from 'grommet-controls';`<br/>
*`<DropInput`<br/>
*&nbsp;&nbsp;`dropContent={(`<br/>
*&nbsp;&nbsp;&nbsp;&nbsp;`...`<br/>
*&nbsp;&nbsp;`]}`<br/>
*`/>`<br/>
*/
var DropInput = /** @class */ (function (_super) {
    __extends(DropInput, _super);
    function DropInput() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = { open: false };
        _this.inputRef = React.createRef();
        _this.onUpdateValue = function (value) {
            var onChange = _this.props.onChange;
            var input = findDOMNode(_this.inputRef.current);
            input.value = value;
            _this.setState({ open: false, value: value });
            if (onChange) {
                onChange({ target: input });
            }
        };
        _this.onOpen = function (e) {
            var _a = _this.props, onOpen = _a.onOpen, disabled = _a.disabled;
            _this.setState({ open: true });
            if (onOpen && !disabled) {
                onOpen(e);
            }
        };
        _this.onClose = function (e) {
            var _a = _this.props, onClose = _a.onClose, disabled = _a.disabled;
            _this.setState({ open: false });
            if (onClose && !disabled) {
                onClose(e);
            }
        };
        _this.onKeyDown = function (e) {
            var onKeyDown = _this.props.onKeyDown;
            _this.setState({ open: true });
            if (onKeyDown) {
                onKeyDown(e);
            }
        };
        _this.onKeyUp = function (e) {
            var onKeyUp = _this.props.onKeyUp;
            _this.setState({ open: false });
            if (onKeyUp) {
                onKeyUp(e);
            }
        };
        return _this;
    }
    DropInput.getDerivedStateFromProps = function (newProps, oldState) {
        if (newProps.value !== oldState.value || newProps.defaultValue !== oldState.defaultValue) {
            return {
                value: newProps.value,
                defaultValue: newProps.defaultValue,
                open: false,
            };
        }
        return null;
    };
    DropInput.prototype.render = function () {
        var _this = this;
        var _a = this.props, a11yTitle = _a.a11yTitle, a11yDropTitle = _a.a11yDropTitle, dropAlign = _a.dropAlign, dropTarget = _a.dropTarget, update = _a.update, widgets = _a.widgets, 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        onOpen = _a.onOpen, onClose = _a.onClose, onKeyDown = _a.onKeyDown, onKeyUp = _a.onKeyUp, defaultValue = _a.defaultValue, dropContent = _a.dropContent, dropIcon = _a.dropIcon, disabled = _a.disabled, rest = __rest(_a, ["a11yTitle", "a11yDropTitle", "dropAlign", "dropTarget", "update", "widgets", "onOpen", "onClose", "onKeyDown", "onKeyUp", "defaultValue", "dropContent", "dropIcon", "disabled"]);
        var open = this.state.open;
        if (typeof update === 'function') {
            update(this.onUpdateValue);
        }
        var numWidgets = (dropContent ? 1 : 0) + (widgets ? widgets.length : 0);
        var decorations;
        if (numWidgets > 0) {
            var drop = void 0;
            if (dropContent) {
                drop = (React.createElement(DropButton, { a11yTitle: a11yDropTitle, disabled: disabled, dropAlign: dropAlign, dropTarget: dropTarget, open: open, tabIndex: -1, focusIndicator: false, onOpen: this.onOpen, onClose: this.onClose, dropContent: dropContent, icon: dropIcon }));
            }
            decorations = (React.createElement(StyledWidgetsContainer, { align: 'center', direction: 'row' },
                widgets.map(function (widget, index) { return (React.createElement(Button, __assign({ disabled: disabled, tabIndex: -1, key: "widget_" + index }, widget))); }),
                drop));
        }
        return (React.createElement(Keyboard, { onDown: this.onKeyDown, onUp: this.onKeyUp },
            React.createElement(StyledDropInputContainer, null,
                React.createElement(ThemeContext.Consumer, null, function (theme) { return (React.createElement(StyledDropInput, __assign({ ref: _this.inputRef, theme: theme, disabled: disabled, numWidgets: numWidgets, "aria-label": a11yTitle, defaultValue: defaultValue ? defaultValue.toString() : undefined }, rest))); }),
                decorations)));
    };
    DropInput.defaultProps = {
        dropAlign: { top: 'bottom', right: 'left' },
        dropIcon: (React.createElement(FormDown, null)),
        type: 'text',
        widgets: [],
    };
    return DropInput;
}(Component));

var strCaretTrap = '[]';
var processCaretTraps = function (mask) {
    var indexOfCaretTrap;
    while (indexOfCaretTrap = mask.indexOf(strCaretTrap), indexOfCaretTrap !== -1) { // eslint-disable-line
        mask.splice(indexOfCaretTrap, 1);
    }
    return mask;
};
// eslint-disable-next-line import/prefer-default-export
var transformMaskedValue = function (value, providedMask, props) {
    if (!providedMask) {
        return value.toString();
    }
    var pipe = props.pipe;
    var safeValue;
    if (value === undefined || value === null) {
        safeValue = '';
    }
    else {
        safeValue = value.toString();
    }
    var mask;
    if (typeof providedMask === 'object' && providedMask.pipe !== undefined && providedMask.mask !== undefined) {
        // eslint-disable-next-line no-param-reassign
        providedMask = providedMask.mask;
        (pipe = providedMask.pipe);
    }
    if (typeof providedMask === 'function') {
        mask = providedMask(safeValue, __assign(__assign({}, props), { pipe: pipe }));
        // disable masking if `mask` is `false`
        if (mask === false) {
            return safeValue;
        }
        // The processed mask is what we're interested in
        mask = processCaretTraps(mask);
        // If the `providedMask` is not a function, we just use it as-is.
    }
    else {
        mask = providedMask;
    }
    var conformedValue = safeValue;
    var guide = props.guide, placeholderChar = props.placeholderChar, placeholder = props.placeholder, currentCaretPosition = props.currentCaretPosition, showMask = props.showMask, keepCharPositions = props.keepCharPositions;
    var conformToMaskConfig = {
        previousPlaceholder: placeholder,
        guide: guide,
        placeholderChar: placeholderChar,
        pipe: pipe,
        currentCaretPosition: currentCaretPosition,
        keepCharPositions: keepCharPositions,
    };
    var conformed = conformToMask(safeValue, mask, conformToMaskConfig);
    if (conformed) {
        (conformedValue = conformed.conformedValue);
    }
    if (typeof pipe === 'function') {
        var pipeResults = pipe(conformedValue, __assign({ rawValue: safeValue }, conformToMaskConfig));
        if (typeof pipeResults === 'string') {
            conformedValue = pipeResults;
        }
    }
    if (conformedValue === placeholder) {
        conformedValue = showMask ? placeholder : '';
    }
    return conformedValue;
};

var maskedNumberValue = function (_a) {
    var value = _a.value, prefix = _a.prefix, suffix = _a.suffix, thousandsSeparatorSymbol = _a.thousandsSeparatorSymbol;
    var val;
    if (typeof value === 'string') {
        val = value.replace(new RegExp("[" + prefix + suffix + thousandsSeparatorSymbol + "]", 'g'), '');
        val = parseFloat(val);
        if (Number.isNaN(val)) {
            val = undefined;
        }
    }
    else {
        val = value;
    }
    return val;
};
var createMinMaxInputPipe = function (_a) {
    var min = _a.min, max = _a.max, mask = _a.mask, props = __rest(_a, ["min", "max", "mask"]);
    return (function (conformedValue) {
        if (typeof min === 'number' || typeof max === 'number') {
            var value = maskedNumberValue(__assign(__assign({}, props), { value: conformedValue }));
            if (typeof value === 'number') {
                if (typeof min === 'number' && value < min) {
                    var resolved = transformMaskedValue(min, mask, props);
                    if (resolved === undefined) {
                        return undefined;
                    }
                    return { value: resolved };
                }
                if (typeof max === 'number' && value > max) {
                    var resolved = transformMaskedValue(max, mask, props);
                    if (resolved === undefined) {
                        return undefined;
                    }
                    return { value: resolved };
                }
            }
        }
        return { value: conformedValue.toString() };
    });
};

/** A masked Input control with an optional drop button with the specified dropContent<br/>
* `import { MakedInput } from 'grommet-controls';`<br/>
* `<MakedInput mask={...} />`<br/>
*/
var MaskedInput = /** @class */ (function (_super) {
    __extends(MaskedInput, _super);
    function MaskedInput() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.textMaskInputElement = null;
        _this.inputControlRef = React.createRef();
        _this.onInput = function (event) {
            var onInput = _this.props.onInput;
            if (_this.textMaskInputElement) {
                _this.textMaskInputElement.update(event.target.value);
            }
            if (onInput) {
                onInput(event);
            }
        };
        return _this;
    }
    MaskedInput.prototype.initTextMask = function () {
        var _a = this, props = _a.props, value = _a.props.value;
        if (props.mask && this.inputControlRef) {
            this.textMaskInputElement = createTextMaskInputElement(__assign({ inputElement: findDOMNode(this.inputControlRef.current).getElementsByTagName('input')[0] }, props));
            this.textMaskInputElement.update(value);
        }
    };
    MaskedInput.prototype.componentDidMount = function () {
        this.initTextMask();
    };
    MaskedInput.prototype.componentDidUpdate = function () {
        this.initTextMask();
    };
    MaskedInput.prototype.maskedValue = function (value) {
        if (value === undefined) {
            return undefined;
        }
        var mask = this.props.mask;
        if (value) {
            var conformed = transformMaskedValue(value, mask, this.props);
            return conformed;
        }
        return value;
    };
    MaskedInput.prototype.render = function () {
        var _a = this.props, defaultValue = _a.defaultValue, 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        value = _a.value, mask = _a.mask, guide = _a.guide, showMask = _a.showMask, pipe = _a.pipe, placeholderChar = _a.placeholderChar, keepCharPositions = _a.keepCharPositions, rest = __rest(_a, ["defaultValue", "value", "mask", "guide", "showMask", "pipe", "placeholderChar", "keepCharPositions"]);
        return (React.createElement(DropInput, __assign({ ref: this.inputControlRef, value: this.maskedValue(value), defaultValue: this.maskedValue(defaultValue), onInput: this.onInput }, rest)));
    };
    MaskedInput.defaultProps = {
        type: 'text',
        guide: true,
        showMask: false,
        placeholderChar: '\u2000',
    };
    MaskedInput.alphabetic = /[A-Z]/i;
    MaskedInput.placeholderChars = {
        whitespace: '\u2000',
        underscore: '_',
    };
    MaskedInput.digit = /\d/;
    MaskedInput.createAutoCorrectedDatePipe = createAutoCorrectedDatePipe;
    MaskedInput.emailMask = emailMask;
    MaskedInput.createNumberMask = createNumberMask;
    MaskedInput.createMinMaxInputPipe = createMinMaxInputPipe;
    MaskedInput.maskedNumberValue = maskedNumberValue;
    return MaskedInput;
}(Component));

var sizeStyle = function (props) {
    var data = props.theme.calendar[props.size];
    return css(templateObject_1$4 || (templateObject_1$4 = __makeTemplateObject(["\n    font-size: ", ";\n    line-height: ", ";\n  "], ["\n    font-size: ", ";\n    line-height: ", ";\n  "])), data.fontSize, data.lineHeight);
};
var StyledColors = styled.div(templateObject_2$1 || (templateObject_2$1 = __makeTemplateObject(["\n  ", "\n"], ["\n  ", "\n"])), function (props) { return sizeStyle(props); });
var StyledRows = styled.div(templateObject_3$1 || (templateObject_3$1 = __makeTemplateObject(["\n  position: relative;\n"], ["\n  position: relative;\n"])));
var StyledRow = styled.div(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n  position: relative;\n  display: flex;\n  flex-direction: row;\n  flex-justify: between;\n"], ["\n  position: relative;\n  display: flex;\n  flex-direction: row;\n  flex-justify: between;\n"])));
var StyledColorContainer = styled.div(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n  flex: 0 0;\n"], ["\n  flex: 0 0;\n"])));
var colorSizeStyle = function (props) {
    var data = props.theme.calendar[props.size];
    return css(templateObject_6 || (templateObject_6 = __makeTemplateObject(["\n    width: ", ";\n    height: ", ";\n  "], ["\n    width: ", ";\n    height: ", ";\n  "])), data.daySize, data.daySize);
};
var StyledColor = styled(Button)(templateObject_7 || (templateObject_7 = __makeTemplateObject(["\n  top: 0;\n  position: absolute;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  ", "\n  span {\n    visibility: hidden;\n  };  \n  transition: transform .2s;\n  &:hover {\n    z-index: 10;\n    width: auto;\n    -webkit-transform:scale(2);\n    -moz-transform:scale(2);\n    transform:scale(2);\n    span {\n      visibility: visible;\n    };\n  );\n"], ["\n  top: 0;\n  position: absolute;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  ", "\n  span {\n    visibility: hidden;\n  };  \n  transition: transform .2s;\n  &:hover {\n    z-index: 10;\n    width: auto;\n    -webkit-transform:scale(2);\n    -moz-transform:scale(2);\n    transform:scale(2);\n    span {\n      visibility: visible;\n    };\n  );\n"])), function (props) { return colorSizeStyle(props); });
var templateObject_1$4, templateObject_2$1, templateObject_3$1, templateObject_4, templateObject_5, templateObject_6, templateObject_7;

var buildState = function (props) {
    var colors = props.colors, color = props.color, columns = props.columns, wrap = props.wrap;
    var colorRows = [];
    var lastRow = null;
    if (colors) {
        Object.keys(colors).forEach(function (item) {
            if (typeof colors[item] === 'object') {
                var row_1 = { name: item, colors: [], buttonRef: React.createRef() };
                Object.keys(colors[item]).forEach(function (colorName) {
                    var colorsColor = colors[item][colorName];
                    row_1.colors.push({ name: colorName, color: colorsColor });
                });
                colorRows.push(row_1);
            }
            else {
                if (!lastRow) {
                    lastRow = { name: undefined, colors: [] };
                    colorRows.push(lastRow);
                }
                lastRow.colors.push({ name: item, color: colors[item], buttonRef: React.createRef() });
            }
        });
    }
    var colorsPerRow = columns
        || (colorRows.length === 1 ? Math.sqrt(colorRows[0].colors.length)
            : colorRows.reduce(function (res, row) { return (Math.min(res, row.colors.length)); }, Number.MAX_SAFE_INTEGER));
    var wrapColors = wrap;
    if (wrapColors === undefined) {
        wrapColors = columns === undefined && colorRows.length === 1;
    }
    if (wrapColors) {
        var finalRows_1 = [];
        colorRows.forEach(function (row) {
            while (row.colors.length > 0) {
                finalRows_1.push({ name: row.name, colors: row.colors.splice(0, colorsPerRow) });
            }
        });
        colorRows = finalRows_1;
    }
    else {
        colorRows = colorRows.map(function (row) { return (__assign(__assign({}, row), { colors: row.colors.filter(function (_, index) { return (index < colorsPerRow); }) })); });
    }
    var activeRow = 0;
    var activeColor = 0;
    colorRows.find(function (row, rowIndex) { return row.colors.find(function (item, colorIndex) {
        var found = item.color === color;
        if (found) {
            activeRow = rowIndex;
            activeColor = colorIndex;
        }
        return found;
    }); });
    return { colorRows: colorRows, activeRow: activeRow, activeColor: activeColor };
};
/** A color selection element, with custom color palettes.<br/>
*`import { Colors } from 'grommet-controls';`<br/>
*`<Colors colors={...} />`<br/>
*/
var Colors = /** @class */ (function (_super) {
    __extends(Colors, _super);
    function Colors(props) {
        var _this = _super.call(this, props) || this;
        _this.setFocus = false;
        _this.timer = 0;
        _this.setActive = function (_a) {
            var rowIndex = _a.rowIndex, colorIndex = _a.colorIndex;
            var colorRows = _this.state.colorRows;
            _this.setFocus = true;
            var activeRow = Math.min(Math.max(0, rowIndex), colorRows.length - 1);
            var color = Math.max(0, colorIndex);
            var activeColor = Math.min(color, colorRows[activeRow].colors.length - 1);
            _this.setState({
                activeRow: activeRow,
                activeColor: activeColor,
            });
        };
        _this.onClickColor = function (_a) {
            var color = _a.color, rowIndex = _a.rowIndex, colorIndex = _a.colorIndex, rowName = _a.rowName, colorName = _a.colorName;
            return function () {
                var onSelect = _this.props.onSelect;
                _this.setActive({ rowIndex: rowIndex, colorIndex: colorIndex });
                if (onSelect) {
                    onSelect({ color: color, rowName: rowName, colorName: colorName });
                }
            };
        };
        _this.state = buildState(props);
        return _this;
    }
    Colors.getDerivedStateFromProps = function (nextProps) {
        return buildState(nextProps);
    };
    Colors.prototype.componentDidUpdate = function () {
        if (this.setFocus) {
            var _a = this.state, activeRow = _a.activeRow, activeColor = _a.activeColor, colorRows = _a.colorRows;
            this.setFocus = false;
            if (colorRows[activeRow]
                && colorRows[activeRow].colors[activeColor]
                && colorRows[activeRow].colors[activeColor].buttonRef) {
                var buttonNode = findDOMNode(colorRows[activeRow].colors[activeColor].buttonRef.current);
                if (buttonNode) {
                    buttonNode.scrollIntoView();
                    buttonNode.focus();
                }
            }
        }
    };
    Colors.prototype.componentWillUnmount = function () {
        clearTimeout(this.timer);
    };
    Colors.prototype.render = function () {
        var _this = this;
        var _a = this.props, 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        wrap = _a.wrap, onSelect = _a.onSelect, columns = _a.columns, size = _a.size, rest = __rest(_a, ["wrap", "onSelect", "columns", "size"]);
        var _b = this.state, colorRows = _b.colorRows, activeRow = _b.activeRow, activeColor = _b.activeColor;
        var colors = function (theme, cellSize) { return (colorRows.map(function (row, rowIndex) { return (React.createElement(StyledRow, { key: "row_" + rowIndex, theme: theme, style: { width: cellSize * row.colors.length + "px", height: cellSize + "px" } }, row.colors.map(function (color, colorIndex) {
            var isActive = activeRow === rowIndex && activeColor === colorIndex;
            var colorStyle = {
                backgroundColor: color.color,
                color: normalizeColor('text', theme),
                left: cellSize * colorIndex + "px",
            };
            return (React.createElement(StyledColorContainer, { key: "color_" + colorIndex, theme: theme },
                React.createElement(StyledColor
                // eslint-disable-next-line no-param-reassign
                , { 
                    // eslint-disable-next-line no-param-reassign
                    ref: color.buttonRef, style: colorStyle, size: size, theme: theme, tabIndex: isActive ? 0 : -1, a11yTitle: (row.name !== undefined ? row.name : '') + " " + color.name, plain: true, active: isActive, hoverIndicator: 'background', onClick: _this.onClickColor({
                        color: color.color,
                        rowIndex: rowIndex,
                        colorIndex: colorIndex,
                        colorName: color.name,
                        rowName: row.name,
                    }) },
                    React.createElement("span", null, color.color))));
        }))); })); };
        return (React.createElement(ThemeContext.Consumer, null, function (theme) {
            var cellSize = parseMetricToNum(theme.calendar[size].daySize);
            return (React.createElement(StyledColors, __assign({ size: size, theme: theme }, rest),
                React.createElement(Keyboard, { onUp: function (event) {
                        event.preventDefault();
                        _this.setActive({ rowIndex: activeRow - 1, colorIndex: activeColor });
                    }, onDown: function (event) {
                        event.preventDefault();
                        _this.setActive({ rowIndex: activeRow + 1, colorIndex: activeColor });
                    }, onLeft: function () { return _this.setActive({ rowIndex: activeRow, colorIndex: activeColor - 1 }); }, onRight: function () { return _this.setActive({ rowIndex: activeRow, colorIndex: activeColor + 1 }); } },
                    React.createElement(Box, null,
                        React.createElement(StyledRows, { style: { height: cellSize * colorRows.length + "px" } }, colors(theme, cellSize))))));
        }));
    };
    Colors.defaultProps = {
        size: 'medium',
    };
    return Colors;
}(Component));

var StyledColorButton = styled.span(templateObject_1$5 || (templateObject_1$5 = __makeTemplateObject(["\n  display:  inline-flex;\n  svg {\n    border: ", ";\n    fill: ", ";\n    stroke: ", ";\n    transition: none;\n  }\n"], ["\n  display:  inline-flex;\n  svg {\n    border: ", ";\n    fill: ", ";\n    stroke: ", ";\n    transition: none;\n  }\n"])), function (props) { return props.theme.button.border.width + " solid " + props.theme.global.colors.border; }, function (props) { return props.selectedColor; }, function (props) { return props.selectedColor; });
/** A masked color entry field, with a drop button to select a color<br/>
* All properties of MaskedInput apply<br/>
* `import { ColorInput } from 'grommet-controls';`<br/>
* `<ColorInput colors={...} value={...} />`<br/>
*/
var ColorInput = /** @class */ (function (_super) {
    __extends(ColorInput, _super);
    function ColorInput(props) {
        var _this = _super.call(this, props) || this;
        _this.upDateValue = null;
        _this.onChange = function (e) {
            var onChange = _this.props.onChange;
            _this.setState({ selectedColor: e.target.value });
            if (onChange) {
                onChange(e);
            }
        };
        _this.onSelect = function (_a) {
            var color = _a.color;
            _this.setState({ selectedColor: color });
            _this.upDateValue(color);
        };
        _this.state = { selectedColor: props.value || props.defaultValue };
        return _this;
    }
    ColorInput.getDerivedStateFromProps = function (nextProps) {
        return {
            selectedColor: nextProps.value,
        };
    };
    ColorInput.prototype.render = function () {
        var _this = this;
        var _a = this.props, columns = _a.columns, wrap = _a.wrap, colors = _a.colors, size = _a.size, rest = __rest(_a, ["columns", "wrap", "colors", "size"]);
        var selectedColor = this.state.selectedColor;
        return (React.createElement(ThemeContext.Consumer, null, function (theme) { return (React.createElement(MaskedInput, __assign({ update: function (update) { _this.upDateValue = update; }, dropIcon: (React.createElement(StyledColorButton, { theme: theme, selectedColor: selectedColor },
                React.createElement(StopFill, null))), dropContent: (React.createElement(Colors, { color: selectedColor, colors: colors, onSelect: _this.onSelect, columns: columns, wrap: wrap, size: size })), onChange: _this.onChange }, rest))); }));
    };
    ColorInput.defaultProps = {
        size: 'small',
        mask: ['#', /[0-9a-fA-F]/, /[0-9a-fA-F]/, /[0-9a-fA-F]/, /[0-9a-fA-F]/, /[0-9a-fA-F]/, /[0-9a-fA-F]/],
    };
    return ColorInput;
}(Component));
var templateObject_1$5;

/**
 * A Color selection field with form validation<br/>
 */
var ColorInputField = function (props) { return (React.createElement(WithFormField, __assign({}, props), function (childProps) { return React.createElement(ColorInput, __assign({}, childProps)); })); };

var smallDate = function (date, locale) {
    if (locale === void 0) { locale = 'en-us'; }
    return ((new Date(date)).toLocaleDateString(locale, {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
    }));
};
var shortDate = function (date, locale) {
    if (locale === void 0) { locale = 'en-us'; }
    return ((new Date(date)).toLocaleDateString(locale, {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
    }));
};
var longDate = function (date, locale) {
    if (locale === void 0) { locale = 'en-us'; }
    return ((new Date(date)).toLocaleDateString(locale, {
        weekday: 'short',
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
    }));
};

/**
* A masked date entry field with a drop down calendar<br/>
* All properties of MaskedInput apply<br/>
* `import { DateInput } from 'grommet-controls';`<br/>
* `<DateInput value={...} />`<br/>
*/
var DateInput = /** @class */ (function (_super) {
    __extends(DateInput, _super);
    function DateInput() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.upDateValue = null;
        _this.onSelect = function (isoDate) {
            var date = new Date(isoDate);
            _this.upDateValue(smallDate(date));
        };
        return _this;
    }
    DateInput.prototype.render = function () {
        var _this = this;
        var _a = this.props, value = _a.value, bounds = _a.bounds, dates = _a.dates, disabledDates = _a.disabledDates, autocorrect = _a.autocorrect, firstDayOfWeek = _a.firstDayOfWeek, locale = _a.locale, size = _a.size, userMask = _a.mask, maskFormat = _a.maskFormat, rest = __rest(_a, ["value", "bounds", "dates", "disabledDates", "autocorrect", "firstDayOfWeek", "locale", "size", "mask", "maskFormat"]);
        var mask;
        if (userMask) {
            mask = { mask: userMask };
        }
        else if (autocorrect) {
            mask = {
                mask: [/\d/, /\d/, '/', /\d/, /\d/, '/', /\d/, /\d/, /\d/, /\d/],
                pipe: MaskedInput.createAutoCorrectedDatePipe(maskFormat),
                keepCharPositions: true,
            };
        }
        else {
            mask = { mask: [/\d/, /\d/, '/', /\d/, /\d/, '/', /\d/, /\d/, /\d/, /\d/] };
        }
        var controlledValue = value === undefined ? '' : value;
        return (React.createElement(MaskedInput, __assign({ update: function (update) { _this.upDateValue = update; }, value: controlledValue, dropContent: (React.createElement(Box, { pad: 'small' },
                React.createElement(Calendar, { date: controlledValue.toString(), onSelect: this.onSelect, bounds: bounds, dates: dates, disabled: disabledDates, firstDayOfWeek: firstDayOfWeek, locale: locale, size: size }))) }, __assign(__assign({}, rest), mask))));
    };
    DateInput.defaultProps = {
        dropIcon: React.createElement(Calendar$1, null),
        size: 'small',
        a11yDropTitle: 'Open calendar',
    };
    return DateInput;
}(Component));

/**
 * A Date input field with form validation<br/>
 */
var DateInputField = function (props) { return (React.createElement(WithFormField, __assign({}, props), function (childProps) { return React.createElement(DateInput, __assign({}, childProps)); })); };

/**
 * A masked input with a default mask for handling email addresses<br/>
 * All properties of MaskedInput apply<br/>
 * `import { EmailInput } from 'grommet-controls';`<br/>
 * `<EmailInput value={...} />`<br/>
 */
var EmailInput = function (props) { return (React.createElement(MaskedInput, __assign({ mask: MaskedInput.emailMask, inputMode: 'email' }, props))); };

/**
 * An email input field with form validation<br/>
 */
var EmailInputField = function (props) { return (React.createElement(WithFormField, __assign({}, props), function (childProps) { return React.createElement(EmailInput, __assign({}, childProps)); })); };

var StyledHeader = styled(Box)(templateObject_1$6 || (templateObject_1$6 = __makeTemplateObject(["\n  position: ", ";\n  ", "\n"], ["\n  position: ", ";\n  ",
    "\n"])), function (props) { return props.position; }, function (props) {
    if (props.position === 'fixed' || props.position === 'absolute' || props.position === 'sticky') {
        return "\n        top: 0;\n        left: auto;\n        right: 0;  \n        z-index: " + props.zIndex + ";\n      ";
    }
    return undefined;
});
var templateObject_1$6;

/**
 * A page header component
 * ```$ npm install grommet-controls
 * import { Header } from 'grommet-controls';
 * <Header>
 *   ...
 * </Header>
 * ```
 */
var Header = function (_a) {
    var children = _a.children, rest = __rest(_a, ["children"]);
    return (React.createElement(StyledHeader, __assign({ tag: 'header' }, rest), children));
};
Header.defaultProps = {
    position: 'relative',
    zIndex: 10,
    direction: 'row',
    background: 'brand',
    fill: 'horizontal',
    justify: 'between',
    align: 'center',
    elevation: 'medium',
    pad: 'medium',
};

var StyledIconButton = styled(Button)(templateObject_1$7 || (templateObject_1$7 = __makeTemplateObject(["\n  border-radius: 50%;\n"], ["\n  border-radius: 50%;\n"])));
var templateObject_1$7;

/** A Button with a hover effect, all properties of Button apply<br />
 * `import { IconButton } from 'grommet-controls';`<br />
 * `<IconButton icon='...' />`<br />
 */
var IconButton = function (props) { return (React.createElement(StyledIconButton, __assign({}, props, { hoverIndicator: {
        dark: 'dark-2',
        light: 'light-2',
    } }))); };

/**
 * A masked input field with form validation<br/>
 */
var MaskedInputField = function (props) { return (React.createElement(WithFormField, __assign({}, props), function (childProps) { return React.createElement(MaskedInput, __assign({}, childProps)); })); };

var pink = {
    '50': '#fce4ec', '100': '#f8bbd0', '200': '#f48fb1', '300': '#f06292', '400': '#ec407a', '500': '#e91e63', '600': '#d81b60', '700': '#c2185b', '800': '#ad1457', '900': '#880e4f', 'a100': '#ff80ab', 'a200': '#ff4081', 'a400': '#f50057', 'a700': '#c51162',
};
var purple$1 = {
    '50': '#f3e5f5', '100': '#e1bee7', '200': '#ce93d8', '300': '#ba68c8', '400': '#ab47bc', '500': '#9c27b0', '600': '#8e24aa', '700': '#7b1fa2', '800': '#6a1b9a', '900': '#4a148c', 'a100': '#ea80fc', 'a200': '#e040fb', 'a400': '#d500f9', 'a700': '#aa00ff',
};
var deepPurple = {
    '50': '#ede7f6', '100': '#d1c4e9', '200': '#b39ddb', '300': '#9575cd', '400': '#7e57c2', '500': '#673ab7', '600': '#5e35b1', '700': '#512da8', '800': '#4527a0', '900': '#311b92', 'a100': '#b388ff', 'a200': '#7c4dff', 'a400': '#651fff', 'a700': '#6200ea',
};
var indigo = {
    '50': '#e8eaf6', '100': '#c5cae9', '200': '#9fa8da', '300': '#7986cb', '400': '#5c6bc0', '500': '#3f51b5', '600': '#3949ab', '700': '#303f9f', '800': '#283593', '900': '#1a237e', 'a100': '#8c9eff', 'a200': '#536dfe', 'a400': '#3d5afe', 'a700': '#304ffe',
};
var blue$1 = {
    '50': '#e3f2fd', '100': '#bbdefb', '200': '#90caf9', '300': '#64b5f6', '400': '#42a5f5', '500': '#2196f3', '600': '#1e88e5', '700': '#1976d2', '800': '#1565c0', '900': '#0d47a1', 'a100': '#82b1ff', 'a200': '#448aff', 'a400': '#2979ff', 'a700': '#2962ff',
};
var lightBlue = {
    '50': '#e1f5fe', '100': '#b3e5fc', '200': '#81d4fa', '300': '#4fc3f7', '400': '#29b6f6', '500': '#03a9f4', '600': '#039be5', '700': '#0288d1', '800': '#0277bd', '900': '#01579b', 'a100': '#80d8ff', 'a200': '#40c4ff', 'a400': '#00b0ff', 'a700': '#0091ea',
};
var cyan = {
    '50': '#e0f7fa', '100': '#b2ebf2', '200': '#80deea', '300': '#4dd0e1', '400': '#26c6da', '500': '#00bcd4', '600': '#00acc1', '700': '#0097a7', '800': '#00838f', '900': '#006064', 'a100': '#84ffff', 'a200': '#18ffff', 'a400': '#00e5ff', 'a700': '#00b8d4',
};
var teal$1 = {
    '50': '#e0f2f1', '100': '#b2dfdb', '200': '#80cbc4', '300': '#4db6ac', '400': '#26a69a', '500': '#009688', '600': '#00897b', '700': '#00796b', '800': '#00695c', '900': '#004d40', 'a100': '#a7ffeb', 'a200': '#64ffda', 'a400': '#1de9b6', 'a700': '#00bfa5',
};
var green$1 = {
    '50': '#e8f5e9', '100': '#c8e6c9', '200': '#a5d6a7', '300': '#81c784', '400': '#66bb6a', '500': '#4caf50', '600': '#43a047', '700': '#388e3c', '800': '#2e7d32', '900': '#1b5e20', 'a100': '#b9f6ca', 'a200': '#69f0ae', 'a400': '#00e676', 'a700': '#00c853',
};
var lightGreen = {
    '50': '#f1f8e9', '100': '#dcedc8', '200': '#c5e1a5', '300': '#aed581', '400': '#9ccc65', '500': '#8bc34a', '600': '#7cb342', '700': '#689f38', '800': '#558b2f', '900': '#33691e', 'a100': '#ccff90', 'a200': '#b2ff59', 'a400': '#76ff03', 'a700': '#64dd17',
};
var lime$1 = {
    '50': '#f9fbe7', '100': '#f0f4c3', '200': '#e6ee9c', '300': '#dce775', '400': '#d4e157', '500': '#cddc39', '600': '#c0ca33', '700': '#afb42b', '800': '#9e9d24', '900': '#827717', 'a100': '#f4ff81', 'a200': '#eeff41', 'a400': '#c6ff00', 'a700': '#aeea00',
};
var yellow$1 = {
    '50': '#fffde7', '100': '#fff9c4', '200': '#fff59d', '300': '#fff176', '400': '#ffee58', '500': '#ffeb3b', '600': '#fdd835', '700': '#fbc02d', '800': '#f9a825', '900': '#f57f17', 'a100': '#ffff8d', 'a200': '#ffff00', 'a400': '#ffea00', 'a700': '#ffd600',
};
var amber = {
    '50': '#fff8e1', '100': '#ffecb3', '200': '#ffe082', '300': '#ffd54f', '400': '#ffca28', '500': '#ffc107', '600': '#ffb300', '700': '#ffa000', '800': '#ff8f00', '900': '#ff6f00', 'a100': '#ffe57f', 'a200': '#ffd740', 'a400': '#ffc400', 'a700': '#ffab00',
};
var orange = {
    '50': '#fff3e0', '100': '#ffe0b2', '200': '#ffcc80', '300': '#ffb74d', '400': '#ffa726', '500': '#ff9800', '600': '#fb8c00', '700': '#f57c00', '800': '#ef6c00', '900': '#e65100', 'a100': '#ffd180', 'a200': '#ffab40', 'a400': '#ff9100', 'a700': '#ff6d00',
};
var deepOrange = {
    '50': '#fbe9e7', '100': '#ffccbc', '200': '#ffab91', '300': '#ff8a65', '400': '#ff7043', '500': '#ff5722', '600': '#f4511e', '700': '#e64a19', '800': '#d84315', '900': '#bf360c', 'a100': '#ff9e80', 'a200': '#ff6e40', 'a400': '#ff3d00', 'a700': '#dd2c00',
};
var brown = {
    '50': '#efebe9', '100': '#d7ccc8', '200': '#bcaaa4', '300': '#a1887f', '400': '#8d6e63', '500': '#795548', '600': '#6d4c41', '700': '#5d4037', '800': '#4e342e', '900': '#3e2723',
};
var grey = {
    '50': '#fafafa', '100': '#f5f5f5', '200': '#eeeeee', '300': '#e0e0e0', '400': '#bdbdbd', '500': '#9e9e9e', '600': '#757575', '700': '#616161', '800': '#424242', '900': '#212121',
};
var blueGrey = {
    '50': '#eceff1', '100': '#cfd8dc', '200': '#b0bec5', '300': '#90a4ae', '400': '#78909c', '500': '#607d8b', '600': '#546e7a', '700': '#455a64', '800': '#37474f', '900': '#263238',
};
var materialColors = {
    amber: amber,
    blue: blue$1,
    blueGrey: blueGrey,
    brown: brown,
    cyan: cyan,
    deepOrange: deepOrange,
    deepPurple: deepPurple,
    green: green$1,
    grey: grey,
    indigo: indigo,
    lightBlue: lightBlue,
    lightGreen: lightGreen,
    lime: lime$1,
    orange: orange,
    pink: pink,
    purple: purple$1,
    teal: teal$1,
    yellow: yellow$1,
};

var StatusIcons = {
    ok: StatusGood,
    warning: StatusWarning,
    error: StatusCritical,
    unknown: StatusUnknown,
    disabled: StatusDisabled,
    info: StatusInfo,
};
var SIZE_LEVELS = {
    small: {
        level: 4,
        size: 'xsmall',
        meterSize: 'xsmall',
    },
    medium: {
        level: 3,
        size: 'small',
        meterSize: 'small',
    },
    large: {
        level: 1,
        size: 'medium',
        meterSize: 'large',
    },
};
/**
 * A Box to display notification messages<br/>
 * `import { Notification } from 'grommet-controls';`<br/>
 * `<Notification message={...} onClose={...} />`<br/>
 */
var Notification = function (_a) {
    var status = _a.status, message = _a.message, locale = _a.locale, closer = _a.closer, margin = _a.margin, reverse = _a.reverse, a11yTitle = _a.a11yTitle, background = _a.background, border = _a.border, timestamp = _a.timestamp, icon = _a.icon, strong = _a.strong, round = _a.round, pad = _a.pad, size = _a.size, state = _a.state, onClose = _a.onClose, percentComplete = _a.percentComplete, rest = __rest(_a, ["status", "message", "locale", "closer", "margin", "reverse", "a11yTitle", "background", "border", "timestamp", "icon", "strong", "round", "pad", "size", "state", "onClose", "percentComplete"]);
    var sizeLevel = SIZE_LEVELS[size];
    var closeBtn;
    if (onClose) {
        var closeIcon = closer || React.createElement(Close, { size: sizeLevel.size });
        closeBtn = (React.createElement(Box, { pad: pad },
            React.createElement(Button, { a11yTitle: a11yTitle, onClick: onClose }, closeIcon)));
    }
    var heading = message;
    if (strong) {
        heading = React.createElement("strong", null, heading);
    }
    var statusIcon;
    if (icon) {
        var StatusIcon = StatusIcons[status];
        statusIcon = (React.isValidElement(icon) ? icon : React.createElement(StatusIcon, { size: sizeLevel.size }));
    }
    var progress;
    if (percentComplete || percentComplete === 0) {
        progress = (React.createElement(Box, { direction: 'row', align: 'center', gap: 'medium', style: { whiteSpace: 'nowrap' } },
            React.createElement(Meter, { size: sizeLevel.meterSize, thickness: 'small', values: [{
                        label: percentComplete.toFixed(0),
                        value: percentComplete,
                        color: 'accent-1',
                    }] }),
            React.createElement(Text, { size: 'small' }, " " + percentComplete + " %")));
    }
    var timeStamp;
    if (timestamp) {
        timeStamp = longDate(timestamp, locale);
    }
    var first;
    var second;
    if (reverse) {
        first = heading;
        second = statusIcon;
    }
    else {
        first = statusIcon;
        second = heading;
    }
    var content = (React.createElement(Box, { flex: 'grow', pad: pad },
        React.createElement(Heading, { level: sizeLevel.level, margin: margin, style: { maxWidth: '100%' } },
            React.createElement(Box, { direction: 'row', align: 'center', gap: 'small' },
                first,
                second)),
        React.createElement(Text, { size: sizeLevel.size }, state),
        React.createElement(Text, { size: sizeLevel.size }, timeStamp),
        progress));
    if (reverse) {
        first = closeBtn;
        second = content;
    }
    else {
        first = content;
        second = closeBtn;
    }
    return (React.createElement(Box, __assign({ direction: reverse ? 'row-reverse' : 'row', fill: 'horizontal', border: border, round: round, role: 'checkbox', "aria-checked": true, background: background || "status-" + status }, rest),
        first,
        second));
};
Notification.defaultProps = {
    status: 'info',
    size: 'medium',
    message: 'Notification...',
    icon: true,
    animation: 'fadeIn',
    closer: undefined,
    pad: 'small',
    margin: 'small',
    locale: 'en-us',
};

var precision = function (n) {
    // eslint-disable-next-line no-restricted-globals
    if (!isFinite(n))
        return 0;
    var e = 1;
    var p = 0;
    while (Math.round(n * e) / e !== n) {
        e *= 10;
        p += 1;
    }
    return p;
};
var minMax = function (_a) {
    var value = _a.value, min = _a.min, max = _a.max;
    var val = value;
    if (min !== undefined) {
        val = Math.max(val, min);
    }
    if (max !== undefined) {
        val = Math.min(val, max);
    }
    return val;
};
/** A masked number input, with widgets to increment/decrement the value<br/>
*  Additionally, all properties of MaskedInput apply<br/>
*  `import { NumberInput } from 'grommet-controls';`<br/>
*  `<NumberInput value={...} />`<br/>
*/
var NumberInput = /** @class */ (function (_super) {
    __extends(NumberInput, _super);
    function NumberInput() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.upDateValue = null;
        _this.value = undefined;
        _this.valueToNumber = function (value) {
            var _a = _this.props, prefix = _a.prefix, suffix = _a.suffix, thousandsSeparatorSymbol = _a.thousandsSeparatorSymbol, decimalSymbol = _a.decimalSymbol;
            return MaskedInput.maskedNumberValue({
                value: value, prefix: prefix, suffix: suffix, thousandsSeparatorSymbol: thousandsSeparatorSymbol, decimalSymbol: decimalSymbol,
            });
        };
        _this.isFloat = function (val) {
            var floatRegex = /^-?\d+(?:[.,]\d*?)?$/;
            if (!floatRegex.test(val.toString())) {
                return false;
            }
            // eslint-disable-next-line no-restricted-globals
            if (isNaN(parseFloat(val.toString()))) {
                return false;
            }
            return true;
        };
        _this.addStep = function () {
            var _a = _this.props, max = _a.max, min = _a.min, step = _a.step, value = _a.value;
            var val = _this.isFloat(value)
                ? (_this.valueToNumber(value) + step).toFixed(precision(step)) : (min || 0);
            if (typeof val === 'number' && Number.isNaN(val)) {
                if (min !== undefined) {
                    val = min;
                }
                else {
                    val = undefined;
                }
            }
            else {
                val = minMax({ value: val, min: min, max: max });
            }
            _this.upDateValue(val.toString());
        };
        _this.subtractStep = function () {
            var _a = _this.props, max = _a.max, min = _a.min, step = _a.step, value = _a.value;
            var val = _this.isFloat(value)
                ? (_this.valueToNumber(value) - step).toFixed(precision(step)) : (max || 0);
            if (typeof val === 'number' && Number.isNaN(val)) {
                if (max !== undefined) {
                    val = max;
                }
                else {
                    val = undefined;
                }
            }
            else {
                val = minMax({ value: val, min: min, max: max });
            }
            _this.upDateValue(val.toString());
        };
        _this.onChange = function (e) {
            var _a = _this.props, onChange = _a.onChange, emptyValue = _a.emptyValue;
            if (onChange) {
                var value = e.target.value;
                if (_this.value !== value) {
                    if (value === undefined) {
                        value = emptyValue;
                    }
                    _this.value = value;
                    onChange(__assign(__assign({}, e), { target: __assign(__assign({}, e.target), { value: value }) }));
                }
            }
        };
        return _this;
    }
    NumberInput.prototype.render = function () {
        var _this = this;
        var _a = this.props, 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        onChange = _a.onChange, min = _a.min, max = _a.max, step = _a.step, userPipe = _a.pipe, prefix = _a.prefix, suffix = _a.suffix, thousandsSeparatorSymbol = _a.thousandsSeparatorSymbol, decimalSymbol = _a.decimalSymbol, decimals = _a.decimals, integers = _a.integers, a11yIncrement = _a.a11yIncrement, a11yDecrement = _a.a11yDecrement, userMask = _a.mask, addIcon = _a.addIcon, subtractIcon = _a.subtractIcon, disabled = _a.disabled, rest = __rest(_a, ["onChange", "min", "max", "step", "pipe", "prefix", "suffix", "thousandsSeparatorSymbol", "decimalSymbol", "decimals", "integers", "a11yIncrement", "a11yDecrement", "mask", "addIcon", "subtractIcon", "disabled"]);
        var allowNegative = typeof min !== 'number' || min < 0;
        var includeThousandsSeparator = !!thousandsSeparatorSymbol;
        var allowDecimal = (decimals === null) || (typeof decimals === 'number' && decimals > 0);
        var mask = userMask || MaskedInput.createNumberMask({
            prefix: prefix,
            suffix: suffix,
            includeThousandsSeparator: includeThousandsSeparator,
            thousandsSeparatorSymbol: thousandsSeparatorSymbol,
            allowDecimal: allowDecimal,
            decimalSymbol: decimalSymbol,
            decimalLimit: decimals,
            integerLimit: integers,
            allowNegative: allowNegative,
        });
        var pipe = userPipe || MaskedInput.createMinMaxInputPipe(__assign({ mask: mask, prefix: prefix, suffix: suffix, thousandsSeparatorSymbol: thousandsSeparatorSymbol, decimalSymbol: decimalSymbol, min: min, max: max }, rest));
        return (React.createElement(MaskedInput, __assign({ update: function (update) { _this.upDateValue = update; }, pattern: '[0-9]*', inputMode: 'numeric', onKeyDown: this.subtractStep, onKeyUp: this.addStep, disabled: disabled, onChange: this.onChange, pipe: pipe, mask: mask, widgets: [
                {
                    'icon': addIcon,
                    'onClick': disabled ? undefined : this.addStep,
                    'aria-label': a11yIncrement + " " + step,
                },
                {
                    'icon': subtractIcon,
                    'onClick': disabled ? undefined : this.subtractStep,
                    'aria-label': a11yDecrement + " " + step,
                },
            ] }, rest)));
    };
    NumberInput.defaultProps = {
        emptyValue: '',
        step: 1,
        addIcon: React.createElement(Add, null),
        subtractIcon: React.createElement(Subtract, null),
        prefix: '',
        suffix: '',
        thousandsSeparatorSymbol: '',
        decimalSymbol: '.',
        decimals: null,
        integers: null,
        a11yIncrement: 'Increment by',
        a11yDecrement: 'Decrement by',
    };
    return NumberInput;
}(Component));

/**
 * A numeric input field with form validation<br/>
 */
var NumberInputField = function (props) { return (React.createElement(WithFormField, __assign({}, props), function (childProps) { return React.createElement(NumberInput, __assign({}, childProps)); })); };

/**
*A password field with show/hide password toggle<br/>
*All properties of DropInput apply<br/>
*`import { PasswordInput } from 'grommet-controls';`<br/>
*`<PasswordInput value={...} />`<br/>
*/
var PasswordInput = /** @class */ (function (_super) {
    __extends(PasswordInput, _super);
    function PasswordInput() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = { showPassword: false };
        _this.toggleView = function (e) {
            var showPassword = _this.state.showPassword;
            e.stopPropagation();
            _this.setState({ showPassword: !showPassword });
        };
        return _this;
    }
    PasswordInput.prototype.render = function () {
        var _a = this.props, viewIcon = _a.viewIcon, hideIcon = _a.hideIcon, a11yViewPassword = _a.a11yViewPassword, a11yHidePassword = _a.a11yHidePassword, rest = __rest(_a, ["viewIcon", "hideIcon", "a11yViewPassword", "a11yHidePassword"]);
        var showPassword = this.state.showPassword;
        return (React.createElement(DropInput, __assign({ type: showPassword ? 'text' : 'password', widgets: [
                {
                    'icon': showPassword ? hideIcon : viewIcon,
                    'aria-label': showPassword ? a11yHidePassword : a11yViewPassword,
                    'onClick': this.toggleView,
                },
            ] }, rest)));
    };
    PasswordInput.defaultProps = {
        viewIcon: React.createElement(FormView, null),
        hideIcon: React.createElement(Hide, null),
        a11yViewPassword: 'View password',
        a11yHidePassword: 'Hide password',
    };
    return PasswordInput;
}(Component));

/**
 * A password input field with form validation<br/>
 */
var PasswordInputField = function (props) { return (React.createElement(WithFormField, __assign({}, props), function (childProps) { return React.createElement(PasswordInput, __assign({}, childProps)); })); };

//
// ########################################################################
// Non-exported Helpers
// ########################################################################
function isArray(a) {
    return Array.isArray(a);
}
function flattenDeep(arr, newArr) {
    if (newArr === void 0) { newArr = []; }
    if (!isArray(arr)) {
        newArr.push(arr);
    }
    else {
        for (var i = 0; i < arr.length; i += 1) {
            flattenDeep(arr[i], newArr);
        }
    }
    return newArr;
}
function makePathArray(obj) {
    return flattenDeep(obj)
        .join('.')
        .replace(/\[/g, '.')
        .replace(/]/g, '')
        .split('.');
}
function get(obj, path, def) {
    if (!path) {
        return obj;
    }
    var pathObj = makePathArray(path);
    var val;
    try {
        val = pathObj.reduce(function (current, pathPart) { return current[pathPart]; }, obj);
    }
    catch (e) {
        // continue regardless of error
    }
    return typeof val !== 'undefined' ? val : def;
}
function set(obj, path, value) {
    if (obj === void 0) { obj = {}; }
    var keys = makePathArray(path);
    var keyPart;
    var cursor = obj;
    // eslint-disable-next-line no-cond-assign
    while ((keyPart = keys.shift()) && keys.length) {
        if (!cursor[keyPart]) {
            cursor[keyPart] = {};
        }
        cursor = cursor[keyPart];
    }
    cursor[keyPart] = value;
    return obj;
}
function range(n) {
    var arr = [];
    for (var i = 0; i < n; i += 1) {
        arr.push(n);
    }
    return arr;
}
function orderBy(arr, funcs, dirs, indexKey) {
    return arr.sort(function (rowA, rowB) {
        for (var i = 0; i < funcs.length; i += 1) {
            var comp = funcs[i];
            var desc = dirs[i] === false || dirs[i] === 'desc';
            var sortInt = comp(rowA, rowB);
            if (sortInt) {
                return desc ? -sortInt : sortInt;
            }
        }
        // Use the row index for tie breakers
        return dirs[0]
            ? rowA[indexKey] - rowB[indexKey]
            : rowB[indexKey] - rowA[indexKey];
    });
}
function remove(a, b) {
    return a.filter(function (o, i) {
        var r = b(o);
        if (r) {
            a.splice(i, 1);
            return true;
        }
        return false;
    });
}
function clone(a) {
    try {
        return JSON.parse(JSON.stringify(a, function (_, value) {
            if (typeof value === 'function') {
                return value.toString();
            }
            return value;
        }));
    }
    catch (e) {
        return a;
    }
}
function getFirstDefined() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    for (var i = 0; i < args.length; i += 1) {
        if (typeof args[i] !== 'undefined') {
            return args[i];
        }
    }
    return undefined;
}
function sum(arr) {
    return arr.reduce(function (a, b) { return (a + b); }, 0);
}
function groupBy(xs, key) {
    return xs.reduce(function (rv, x, i) {
        var resKey = typeof key === 'function' ? key(x, i) : x[key];
        rv[resKey] = isArray(rv[resKey]) ? rv[resKey] : [];
        rv[resKey].push(x);
        return rv;
    }, {});
}
function asPx(value) {
    value = Number(value);
    return Number.isNaN(value) ? null : value + "px";
}
function compactObject(obj) {
    var newObj = {};
    if (obj) {
        Object.keys(obj).map(function (key) {
            if (Object.prototype.hasOwnProperty.call(obj, key)
                && obj[key] !== undefined
                && typeof obj[key] !== 'undefined') {
                newObj[key] = obj[key];
            }
            return true;
        });
    }
    return newObj;
}
function isSortingDesc(d) {
    return !!(d.sort === 'desc' || d.desc === true || d.asc === false);
}
function normalizeComponent(Comp, params, fallback) {
    if (params === void 0) { params = {}; }
    if (fallback === void 0) { fallback = Comp; }
    return typeof Comp === 'function'
        ? Object.getPrototypeOf(Comp).isReactComponent
            ? React.createElement(Comp, __assign({}, params))
            : Comp(params)
        : fallback;
}
var _ = {
    get: get,
    set: set,
    orderBy: orderBy,
    range: range,
    remove: remove,
    clone: clone,
    getFirstDefined: getFirstDefined,
    sum: sum,
    groupBy: groupBy,
    isArray: isArray,
    compactObject: compactObject,
    isSortingDesc: isSortingDesc,
    normalizeComponent: normalizeComponent,
    asPx: asPx,
};

var StyledTableComponent = styled(Box)(templateObject_1$8 || (templateObject_1$8 = __makeTemplateObject(["\n  align-items: stretch;\n  width: 100%;\n  border-collapse: collapse;\n  overflow: auto\n"], ["\n  align-items: stretch;\n  width: 100%;\n  border-collapse: collapse;\n  overflow: auto\n"])));
var StyledTableBodyComponent = styled(Box)(templateObject_2$2 || (templateObject_2$2 = __makeTemplateObject(["\n"], ["\n"])));
var StyledTHeadComponent = styled(Box)(templateObject_3$2 || (templateObject_3$2 = __makeTemplateObject(["\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n"], ["\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n"])));
var StyledResizerComponent = styled(Box)(templateObject_4$1 || (templateObject_4$1 = __makeTemplateObject(["\n display: inline-block;\n  position: absolute;\n  width: 36px;\n  top: 0;\n  bottom: 0;\n  right: -18px;\n  cursor: col-resize;\n  z-index: 10;\n"], ["\n display: inline-block;\n  position: absolute;\n  width: 36px;\n  top: 0;\n  bottom: 0;\n  right: -18px;\n  cursor: col-resize;\n  z-index: 10;\n"])));
var StyledThComponent = styled(Box)(templateObject_5$1 || (templateObject_5$1 = __makeTemplateObject(["\n  position: relative;\n  ", "    \n  ", "\n  ", "  \n  ", "  \n"], ["\n  position: relative;\n  ",
    "    \n  ",
    "\n  ",
    "  \n  ",
    "  \n"])), function (props) { return props.sortable && "\n    cursor: pointer;\n  "; }, function (props) { return props.hidden && "\n    width: 0 !important;\n    min-width: 0 !important;\n    padding: 0 !important;\n    border: 0 !important;\n    opacity: 0 !important;\n  "; }, function (props) { return props.pivot && "\n    &:after,:before {\n      left: 100%;\n      top: 50%;\n      border: solid transparent;\n      content: \" \";\n      height: 0;\n      width: 0;\n      position: absolute;\n      pointer-events: none\n    }\n  \n    &:after {\n      border-color: rgba(255, 255, 255, 0);\n      border-left-color: #fff;\n      border-width: 8px;\n      margin-top: -8px\n    }\n  \n    &:before {\n      border-color: rgba(102, 102, 102, 0);\n      border-left-color: #f7f7f7;\n      border-width: 10px;\n      margin-top: -10px\n    }\n\n  "; }, function (props) { return props.resizable && "\n    overflow: visible;\n\n    &:last-child {\n      overflow: hidden\n    }\n  "; });
var StyledTrGroupComponent = styled(Box)(templateObject_6$1 || (templateObject_6$1 = __makeTemplateObject(["\n  align-items: stretch;\n"], ["\n  align-items: stretch;\n"])));
var StyledTrComponent = styled(Box)(templateObject_7$1 || (templateObject_7$1 = __makeTemplateObject(["\n  ", "\n"], ["\n  ",
    "\n"])), function (props) { return props.hover && "\n    &:hover {\n      background-color: " + normalizeColor(props.hover.background || props.theme.global.hover.background, props.theme) + ";\n      color: " + normalizeColor(props.hover.color || props.theme.global.hover.color, props.theme) + ";\n    }  \n  "; });
var StyledTdComponent = styled(Box)(templateObject_8 || (templateObject_8 = __makeTemplateObject(["\n  text-overflow: ellipsis;\n  overflow: hidden;\n  display:  block;\n  white-space: nowrap;\n  ", "\n"], ["\n  text-overflow: ellipsis;\n  overflow: hidden;\n  display:  block;\n  white-space: nowrap;\n  ",
    "\n"])), function (props) { return props.hidden && "\n    width: 0 !important;\n    min-width: 0 !important;\n    padding: 0 !important;\n    border: 0 !important;\n    opacity: 0 !important\n  "; });
var StyledExpander = styled(Button)(templateObject_9 || (templateObject_9 = __makeTemplateObject(["\n  position: relative;\n  margin: 0;\n  padding: 0;\n  left: -5px;\n  color: transparent;\n  cursor: pointer;\n"], ["\n  position: relative;\n  margin: 0;\n  padding: 0;\n  left: -5px;\n  color: transparent;\n  cursor: pointer;\n"])));
var StyledTfootComponent = styled(Box)(templateObject_10 || (templateObject_10 = __makeTemplateObject(["\n"], ["\n"])));
var templateObject_1$8, templateObject_2$2, templateObject_3$2, templateObject_4$1, templateObject_5$1, templateObject_6$1, templateObject_7$1, templateObject_8, templateObject_9, templateObject_10;

var TableComponent = /** @class */ (function (_super) {
    __extends(TableComponent, _super);
    function TableComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TableComponent.prototype.render = function () {
        return (React.createElement(StyledTableComponent, __assign({ role: 'grid' }, this.props)));
    };
    return TableComponent;
}(Component));

var defaultButton = function (_a) {
    var disabled = _a.disabled, Icon = _a.Icon, onClick = _a.onClick, label = _a.label, other = __rest(_a, ["disabled", "Icon", "onClick", "label"]);
    return (React.createElement(Button, __assign({ icon: React.createElement(Icon, null), disabled: disabled, onClick: onClick, label: label, plain: true }, other)));
};
var StyledButton = styled(defaultButton)(templateObject_1$9 || (templateObject_1$9 = __makeTemplateObject(["\n  width: 150px;\n  padding: 10px 0;\n"], ["\n  width: 150px;\n  padding: 10px 0;\n"])));
var StyledPageInput = styled(NumberInput)(templateObject_2$3 || (templateObject_2$3 = __makeTemplateObject(["\n  max-width: 180px;\n"], ["\n  max-width: 180px;\n"])));
var StyledSelect = styled(Select)(templateObject_3$3 || (templateObject_3$3 = __makeTemplateObject(["\n  max-width: 150px;\n"], ["\n  max-width: 150px;\n"])));
var ReactTablePagination = /** @class */ (function (_super) {
    __extends(ReactTablePagination, _super);
    function ReactTablePagination(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.getSafePage = function (page) {
            var pg = Number.isNaN(page) ? _this.props.page : page;
            return Math.min(Math.max(pg, 0), _this.props.pages - 1);
        };
        _this.changePage = function (page) {
            var pg = _this.getSafePage(page);
            _this.setState({ page: pg });
            if (_this.props.page !== pg) {
                _this.props.onPageChange(pg);
            }
        };
        _this.applyPage = function (e) {
            if (e) {
                e.preventDefault();
            }
            var page = _this.state.page;
            _this.changePage(page === '' ? _this.props.page : page);
        };
        _this.state = { page: props.page };
        return _this;
    }
    ReactTablePagination.getDerivedStateFromProps = function (nextProps) {
        return {
            page: nextProps.page,
        };
    };
    ReactTablePagination.prototype.renderPaging = function () {
        var _this = this;
        var _a = this.props, page = _a.page, showPageJump = _a.showPageJump, pageText = _a.pageText, ofText = _a.ofText, pages = _a.pages;
        var pageJump;
        if (showPageJump) {
            pageJump = (
            //@ts-ignore
            React.createElement(StyledPageInput, { "aria-label": 'Select page to jump to', onChange: function (e) {
                    var val = e.target.value;
                    if (val === '') {
                        return _this.setState({ page: val });
                    }
                    var pg = parseInt(val, 10) - 1;
                    _this.setState({ page: _this.getSafePage(pg) });
                    return false;
                }, value: typeof this.state.page === 'string' ? '' : this.state.page + 1, onBlur: this.applyPage, onKeyPress: function (e) {
                    if (e.which === 13 || e.keyCode === 13) {
                        _this.applyPage(null);
                    }
                } }));
        }
        else {
            pageJump = React.createElement(Text, null, page + 1);
        }
        return (React.createElement(Box, { direction: 'row', align: 'center', gap: 'small' },
            React.createElement(Text, null, pageText + " "),
            pageJump,
            React.createElement("span", { style: { whiteSpace: 'nowrap' } }, ofText + " " + (pages || 1))));
    };
    ReactTablePagination.prototype.renderPageSize = function () {
        var _this = this;
        var _a = this.props, showPageSizeOptions = _a.showPageSizeOptions, onPageSizeChange = _a.onPageSizeChange, pageSizeOptions = _a.pageSizeOptions, pageSize = _a.pageSize;
        if (showPageSizeOptions) {
            return (React.createElement(Box, { direction: 'row' },
                React.createElement(StyledSelect, { "aria-label": 'Select rows per page', onChange: function (e) { return onPageSizeChange(Number(e.option.split(' ')[0])); }, value: pageSize + " " + this.props.rowsText, options: pageSizeOptions.map(function (option) { return (option + " " + _this.props.rowsText); }) })));
        }
        return null;
    };
    ReactTablePagination.prototype.renderPrevious = function () {
        var _this = this;
        var _a = this.props, _b = _a.PreviousComponent, PreviousComponent = _b === void 0 ? StyledButton : _b, canPrevious = _a.canPrevious, page = _a.page;
        return (React.createElement(Box, { direction: 'row' },
            React.createElement(PreviousComponent, { "aria-label": 'Move to previous page', Icon: Previous, label: this.props.previousText, onClick: canPrevious ? function () { return _this.changePage(page - 1); } : null, disabled: !canPrevious })));
    };
    ReactTablePagination.prototype.renderNext = function () {
        var _this = this;
        var _a = this.props, page = _a.page, canNext = _a.canNext, _b = _a.NextComponent, NextComponent = _b === void 0 ? StyledButton : _b;
        return (React.createElement(Box, { direction: 'row' },
            React.createElement(NextComponent, { "aria-label": 'Move to next page', reverse: true, Icon: Next, label: this.props.nextText, onClick: canNext ? function () { return _this.changePage(page + 1); } : null, disabled: !canNext })));
    };
    ReactTablePagination.prototype.render = function () {
        var props = this.props.getPaginationProps(this.props);
        return (React.createElement(Box, __assign({}, __assign({
            direction: 'row', align: 'center', justify: 'between', fill: 'horizontal',
        }, props)),
            this.renderPrevious(),
            this.renderPaging(),
            this.renderPageSize(),
            this.renderNext()));
    };
    return ReactTablePagination;
}(Component));
var templateObject_1$9, templateObject_2$3, templateObject_3$3;

var PivotValueComponent = (function (_a) {
    var subRows = _a.subRows, value = _a.value;
    return (React.createElement("span", null,
        value,
        ' ',
        subRows && "(" + subRows.length + ")"));
});

var TheadComponent = (function (props) { return (React.createElement(StyledTHeadComponent, __assign({}, props))); });

var TbodyComponent = (function (props) { return (React.createElement(StyledTableBodyComponent, __assign({}, props))); });

var TfootComponent = (function (props) { return React.createElement(StyledTfootComponent, __assign({}, props)); });

var NoDataComponent = (function (_a) {
    var children = _a.children, rest = __rest(_a, ["children"]);
    return (React.createElement(Box, __assign({}, rest, { align: 'center', pad: 'small' }), children));
});

var ResizerComponent = function (props) { return React.createElement(StyledResizerComponent, __assign({}, props)); };

var ThComponent = (function (_a) {
    var toggleSort = _a.toggleSort, sort = _a.sort, resizable = _a.resizable, children = _a.children, pivot = _a.pivot, hidden = _a.hidden, sortable = _a.sortable, expander = _a.expander, CellTextComponent = _a.CellTextComponent, props = __rest(_a, ["toggleSort", "sort", "resizable", "children", "pivot", "hidden", "sortable", "expander", "CellTextComponent"]);
    if (!expander && Array.isArray(children) && children.length > 1 && !children[0] && !children[1]) {
        return null;
    }
    var style = props.style, rest = __rest(props, ["style"]);
    var childRendered = React.createElement(CellTextComponent, __assign({}, rest, { value: children }));
    var content;
    if (sortable) {
        var sortAsc = sort === '-sort-asc';
        var sortDesc = sort === '-sort-desc';
        var SortIcon = Blank;
        if (sortAsc || sortDesc) {
            SortIcon = sortAsc ? LinkUp : LinkDown;
        }
        content = (React.createElement(Box, { direction: 'row', gap: 'xsmall', align: 'center' },
            childRendered,
            React.createElement(Button, { onClick: function (e) { return (toggleSort && toggleSort(e)); } },
                React.createElement(SortIcon, null))));
    }
    else {
        content = childRendered;
    }
    var boxProps = __assign({ pad: 'xsmall' }, rest);
    return (
    // eslint-disable-next-line jsx-a11y/interactive-supports-focus
    React.createElement(StyledThComponent, { role: 'columnheader', onClick: function (e) { return (toggleSort && toggleSort(e)); }, direction: 'row', pivot: pivot, hidden: hidden, sortable: sortable, style: style, resizable: resizable },
        React.createElement(Box, __assign({}, boxProps, { fill: true }), content)));
});

var extractTextProps = function (_a) {
    var 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    value = _a.value, color = _a.color, size = _a.size, truncate = _a.truncate, weight = _a.weight, textAlign = _a.textAlign, rest = __rest(_a, ["value", "color", "size", "truncate", "weight", "textAlign"]);
    return (rest);
};
var collectTextProps = function (_a) {
    var color = _a.color, size = _a.size, truncate = _a.truncate, weight = _a.weight, textAlign = _a.textAlign;
    return ({
        color: color, size: size, truncate: truncate, weight: weight, textAlign: textAlign,
    });
};
var CellTextComponent = (function (_a) {
    var value = _a.value, rest = __rest(_a, ["value"]);
    return (React.createElement(Text, __assign({}, collectTextProps(rest)), value));
});

var TdComponent = (function (_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    var style = props.style, rest = __rest(props, ["style"]);
    var boxProps = __assign({ pad: 'small' }, extractTextProps(rest));
    return (React.createElement(StyledTdComponent, { style: style, role: 'gridcell' },
        React.createElement(Box, __assign({ fill: true, align: 'center', direction: 'row' }, boxProps), children)));
});

var FilterComponent = (function (_a) {
    var filter = _a.filter, onChange = _a.onChange, column = _a.column, rest = __rest(_a, ["filter", "onChange", "column"]);
    var props = __assign({ size: 'medium' }, rest);
    return (React.createElement(TextInput, __assign({ "aria-label": "Filter data by " + (typeof column.Header === 'string' ? column.Header : column.id), value: filter ? filter.value : '', onChange: function (event) { return onChange(event.target.value); } }, props)));
});

var ExpanderComponent = (function (_a) {
    var isExpanded = _a.isExpanded, children = _a.children, expanderProps = _a.expanderProps;
    var props = __assign({
        CloseIcon: React.createElement(Subtract, null),
        OpenIcon: React.createElement(Add, null),
        tabIndex: 0,
        onClick: function () { },
    }, expanderProps);
    var OpenIcon = props.OpenIcon, CloseIcon = props.CloseIcon, rest = __rest(props, ["OpenIcon", "CloseIcon"]);
    return (React.createElement(StyledExpander, __assign({ a11yTitle: 'Press Enter to expand this row for more information', icon: isExpanded ? CloseIcon : OpenIcon }, rest), children));
});

var spinkitSpinners = {
    'circle': { divCount: 12 },
    'cube-grid': { divCount: 9 },
    'wave': { divCount: 5 },
    'folding-cube': { divCount: 4 },
    'three-bounce': { divCount: 3 },
    'double-bounce': { divCount: 2 },
    'wandering-cubes': { divCount: 2 },
    'chasing-dots': { divCount: 2 },
    'rotating-plane': { divCount: 1 },
    'pulse': { divCount: 1 },
    'wordpress': { divCount: 1 },
};
var loadersCssSpinners = {
    'ball-grid-beat': { divCount: 9 },
    'ball-grid-pulse': { divCount: 9 },
    'line-spin-fade-loader': { divCount: 8 },
    'ball-spin-fade-loader': { divCount: 8 },
    'ball-pulse-rise': { divCount: 5 },
    'line-scale': { divCount: 5 },
    'line-scale-pulse-out': { divCount: 5 },
    'line-scale-pulse-out-rapid': { divCount: 5 },
    'pacman': { divCount: 5 },
    'line-scale-party': { divCount: 4 },
    'ball-triangle-path': { divCount: 3 },
    'ball-scale-multiple': { divCount: 3 },
    'ball-scale-ripple-multiple': { divCount: 3 },
    'ball-pulse-sync': { divCount: 3 },
    'ball-beat': { divCount: 3 },
    'ball-zig-zag': { divCount: 2 },
    'ball-zig-zag-deflect': { divCount: 2 },
    'ball-clip-rotate-pulse': { divCount: 2 },
    'ball-clip-rotate-multiple': { divCount: 2 },
    'ball-clip-rotate': { divCount: 1 },
    'ball-scale-ripple': { divCount: 1 },
    'triangle-skew-spin': { divCount: 1 },
};
var allSpinners = __assign(__assign({}, spinkitSpinners), loadersCssSpinners);

var animationFadeIn = keyframes(templateObject_1$a || (templateObject_1$a = __makeTemplateObject(["\n  0% { opacity: 0;}\n  50% { opacity: 0;}\n  100% { opacity: 1;}\n"], ["\n  0% { opacity: 0;}\n  50% { opacity: 0;}\n  100% { opacity: 1;}\n"])));
var animationBounceDelay = keyframes(templateObject_2$4 || (templateObject_2$4 = __makeTemplateObject(["\n  0%, 80%, 100% { -webkit-transform: scale(0.0) }\n  40% { -webkit-transform: scale(1.0) }\n"], ["\n  0%, 80%, 100% { -webkit-transform: scale(0.0) }\n  40% { -webkit-transform: scale(1.0) }\n"])));
var animationScaleDelay = keyframes(templateObject_3$4 || (templateObject_3$4 = __makeTemplateObject(["\n  0%, 70%, 100% { -webkit-transform:scale3D(1.0, 1.0, 1.0) }\n  35%           { -webkit-transform:scale3D(0.0, 0.0, 1.0) }\n"], ["\n  0%, 70%, 100% { -webkit-transform:scale3D(1.0, 1.0, 1.0) }\n  35%           { -webkit-transform:scale3D(0.0, 0.0, 1.0) }\n"])));
var animationStretchDelay = keyframes(templateObject_4$2 || (templateObject_4$2 = __makeTemplateObject(["\n  0%, 40%, 100% { -webkit-transform: scaleY(0.4) }\n  20% { -webkit-transform: scaleY(1.0) }\n"], ["\n  0%, 40%, 100% { -webkit-transform: scaleY(0.4) }\n  20% { -webkit-transform: scaleY(1.0) }\n"])));
var animationFoldCubeAngle = keyframes(templateObject_5$2 || (templateObject_5$2 = __makeTemplateObject(["\n  0%, 10% {\n    -webkit-transform: perspective(140px) rotateX(-180deg);\n    opacity: 0;\n  } \n  25%, 75% {\n    -webkit-transform: perspective(140px) rotateX(0deg);\n    opacity: 1;\n  } \n  90%, 100% {\n    -webkit-transform: perspective(140px) rotateY(180deg);\n    opacity: 0;\n  }\n"], ["\n  0%, 10% {\n    -webkit-transform: perspective(140px) rotateX(-180deg);\n    opacity: 0;\n  } \n  25%, 75% {\n    -webkit-transform: perspective(140px) rotateX(0deg);\n    opacity: 1;\n  } \n  90%, 100% {\n    -webkit-transform: perspective(140px) rotateY(180deg);\n    opacity: 0;\n  }\n"])));
var animationBounce = keyframes(templateObject_6$2 || (templateObject_6$2 = __makeTemplateObject(["\n  0%, 100% {\n    -webkit-transform: scale(0.0);\n  } \n  50% {\n    -webkit-transform: scale(1.0);\n  }\n"], ["\n  0%, 100% {\n    -webkit-transform: scale(0.0);\n  } \n  50% {\n    -webkit-transform: scale(1.0);\n  }\n"])));
var animationCubeMove = keyframes(templateObject_7$2 || (templateObject_7$2 = __makeTemplateObject(["\n  25% {\n    -webkit-transform: translateX(42px) rotate(-90deg) scale(0.5);\n  } \n  50% {\n    /* Hack to make FF rotate in the right direction */\n    -webkit-transform: translateX(42px) translateY(42px) rotate(-179deg);\n  } \n  50.1% {\n    -webkit-transform: translateX(42px) translateY(42px) rotate(-180deg);\n  } \n  75% {\n    -webkit-transform: translateX(0px) translateY(42px) rotate(-270deg) scale(0.5);\n  } \n  100% {\n    -webkit-transform: rotate(-360deg);\n  }\n"], ["\n  25% {\n    -webkit-transform: translateX(42px) rotate(-90deg) scale(0.5);\n  } \n  50% {\n    /* Hack to make FF rotate in the right direction */\n    -webkit-transform: translateX(42px) translateY(42px) rotate(-179deg);\n  } \n  50.1% {\n    -webkit-transform: translateX(42px) translateY(42px) rotate(-180deg);\n  } \n  75% {\n    -webkit-transform: translateX(0px) translateY(42px) rotate(-270deg) scale(0.5);\n  } \n  100% {\n    -webkit-transform: rotate(-360deg);\n  }\n"])));
var animationRotate = keyframes(templateObject_8$1 || (templateObject_8$1 = __makeTemplateObject(["\n 100% { -webkit-transform: rotate(360deg) }\n"], ["\n 100% { -webkit-transform: rotate(360deg) }\n"])));
var animationRotatePlane = keyframes(templateObject_9$1 || (templateObject_9$1 = __makeTemplateObject(["\n  0% {\n    -webkit-transform: perspective(120px) rotateX(0deg) rotateY(0deg);\n  } \n  50% {\n    -webkit-transform: perspective(120px) rotateX(-180.1deg) rotateY(0deg);\n  } \n  100% {\n    -webkit-transform: perspective(120px) rotateX(-180deg) rotateY(-179.9deg);\n  }\n"], ["\n  0% {\n    -webkit-transform: perspective(120px) rotateX(0deg) rotateY(0deg);\n  } \n  50% {\n    -webkit-transform: perspective(120px) rotateX(-180.1deg) rotateY(0deg);\n  } \n  100% {\n    -webkit-transform: perspective(120px) rotateX(-180deg) rotateY(-179.9deg);\n  }\n"])));
var animationScaleOut = keyframes(templateObject_10$1 || (templateObject_10$1 = __makeTemplateObject(["\n  0% { -webkit-transform: scale(0.0) }\n  100% {\n    -webkit-transform: scale(1.0);\n    opacity: 0;\n  }\n"], ["\n  0% { -webkit-transform: scale(0.0) }\n  100% {\n    -webkit-transform: scale(1.0);\n    opacity: 0;\n  }\n"])));
var animationInnerCircle = keyframes(templateObject_11 || (templateObject_11 = __makeTemplateObject(["\n  0% { -webkit-transform: rotate(0); }\n  100% { -webkit-transform: rotate(360deg); }\n"], ["\n  0% { -webkit-transform: rotate(0); }\n  100% { -webkit-transform: rotate(360deg); }\n"])));
var ThreeBounceSpinner = styled.div(templateObject_12 || (templateObject_12 = __makeTemplateObject(["\n  ", "\n  & >div {\n    background-color: ", ";\n  }\n  height: ", ";\n  & >div {\n    width: ", ";\n    height: ", ";\n    background-color: ", ";\n    border-radius: 100%;\n    display: inline-block;\n    animation: ", " 1.4s infinite ease-in-out;\n    /* Prevent first frame from flickering when animation starts */\n    animation-fill-mode: both;\n  };\n  & >div:first-child {\n    animation-delay: -0.32s;\n  };  \n  & >div:nth-child(2) {\n    animation-delay: -0.16s;\n  };\n  animation: ", " 2s;  \n"], ["\n  ", "\n  & >div {\n    background-color: ", ";\n  }\n  height: ", ";\n  & >div {\n    width: ", ";\n    height: ", ";\n    background-color: ", ";\n    border-radius: 100%;\n    display: inline-block;\n    animation: ", " 1.4s infinite ease-in-out;\n    /* Prevent first frame from flickering when animation starts */\n    animation-fill-mode: both;\n  };\n  & >div:first-child {\n    animation-delay: -0.32s;\n  };  \n  & >div:nth-child(2) {\n    animation-delay: -0.16s;\n  };\n  animation: ", " 2s;  \n"])), function (props) { return normalizeColor(props.color, props.theme); }, function (props) { return normalizeColor(props.color, props.theme); }, function (props) { return props.theme.global.edgeSize[props.size]; }, function (props) { return props.theme.global.edgeSize[props.size]; }, function (props) { return props.theme.global.edgeSize[props.size]; }, function (props) { return normalizeColor(props.color, props.theme); }, animationBounceDelay, animationFadeIn);
var CircleSpinner = styled.div(templateObject_13 || (templateObject_13 = __makeTemplateObject(["\n  width: ", ";\n  height: ", ";\n  position: relative;\n\n  & > div {\n    background-color: initial;\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    left: 0;\n    top: 0;\n  }\n\n  & > div::before {\n    content: '';\n    display: block;\n    margin: 0 auto;\n    width: 20%;\n    height: 20%;\n    background-color: ", ";\n    border-radius: 100%;\n    animation: ", " 1.2s infinite ease-in-out;\n    /* Prevent first frame from flickering when animation starts */\n    animation-fill-mode: both;\n  }\n\n  & > div:nth-child(2)  { -webkit-transform: rotate(30deg);  transform: rotate(30deg)  }\n  & > div:nth-child(3)  { -webkit-transform: rotate(60deg);  transform: rotate(60deg)  }\n  & > div:nth-child(4)  { -webkit-transform: rotate(90deg);  transform: rotate(90deg)  }\n  & > div:nth-child(5)  { -webkit-transform: rotate(120deg); transform: rotate(120deg) }\n  & > div:nth-child(6)  { -webkit-transform: rotate(150deg); transform: rotate(150deg) }\n  & > div:nth-child(7)  { -webkit-transform: rotate(180deg); transform: rotate(180deg) }\n  & > div:nth-child(8)  { -webkit-transform: rotate(210deg); transform: rotate(210deg) }\n  & > div:nth-child(9)  { -webkit-transform: rotate(240deg); transform: rotate(240deg) }\n  & > div:nth-child(10) { -webkit-transform: rotate(270deg); transform: rotate(270deg) }\n  & > div:nth-child(11) { -webkit-transform: rotate(300deg); transform: rotate(300deg) }\n  & > div:nth-child(12) { -webkit-transform: rotate(330deg); transform: rotate(330deg) }\n\n  & > div:nth-child(2)::before  { -webkit-animation-delay: -1.1s; animation-delay: -1.1s }\n  & > div:nth-child(3)::before  { -webkit-animation-delay: -1.0s; animation-delay: -1.0s }\n  & > div:nth-child(4)::before  { -webkit-animation-delay: -0.9s; animation-delay: -0.9s }\n  & > div:nth-child(5)::before  { -webkit-animation-delay: -0.8s; animation-delay: -0.8s }\n  & > div:nth-child(6)::before  { -webkit-animation-delay: -0.7s; animation-delay: -0.7s }\n  & > div:nth-child(7)::before  { -webkit-animation-delay: -0.6s; animation-delay: -0.6s }\n  & > div:nth-child(8)::before  { -webkit-animation-delay: -0.5s; animation-delay: -0.5s }\n  & > div:nth-child(9)::before  { -webkit-animation-delay: -0.4s; animation-delay: -0.4s }\n  & > div:nth-child(10)::before { -webkit-animation-delay: -0.3s; animation-delay: -0.3s }\n  & > div:nth-child(11)::before { -webkit-animation-delay: -0.2s; animation-delay: -0.2s }\n  & > div:nth-child(12)::before { -webkit-animation-delay: -0.1s; animation-delay: -0.1s }\n"], ["\n  width: ", ";\n  height: ", ";\n  position: relative;\n\n  & > div {\n    background-color: initial;\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    left: 0;\n    top: 0;\n  }\n\n  & > div::before {\n    content: '';\n    display: block;\n    margin: 0 auto;\n    width: 20%;\n    height: 20%;\n    background-color: ", ";\n    border-radius: 100%;\n    animation: ", " 1.2s infinite ease-in-out;\n    /* Prevent first frame from flickering when animation starts */\n    animation-fill-mode: both;\n  }\n\n  & > div:nth-child(2)  { -webkit-transform: rotate(30deg);  transform: rotate(30deg)  }\n  & > div:nth-child(3)  { -webkit-transform: rotate(60deg);  transform: rotate(60deg)  }\n  & > div:nth-child(4)  { -webkit-transform: rotate(90deg);  transform: rotate(90deg)  }\n  & > div:nth-child(5)  { -webkit-transform: rotate(120deg); transform: rotate(120deg) }\n  & > div:nth-child(6)  { -webkit-transform: rotate(150deg); transform: rotate(150deg) }\n  & > div:nth-child(7)  { -webkit-transform: rotate(180deg); transform: rotate(180deg) }\n  & > div:nth-child(8)  { -webkit-transform: rotate(210deg); transform: rotate(210deg) }\n  & > div:nth-child(9)  { -webkit-transform: rotate(240deg); transform: rotate(240deg) }\n  & > div:nth-child(10) { -webkit-transform: rotate(270deg); transform: rotate(270deg) }\n  & > div:nth-child(11) { -webkit-transform: rotate(300deg); transform: rotate(300deg) }\n  & > div:nth-child(12) { -webkit-transform: rotate(330deg); transform: rotate(330deg) }\n\n  & > div:nth-child(2)::before  { -webkit-animation-delay: -1.1s; animation-delay: -1.1s }\n  & > div:nth-child(3)::before  { -webkit-animation-delay: -1.0s; animation-delay: -1.0s }\n  & > div:nth-child(4)::before  { -webkit-animation-delay: -0.9s; animation-delay: -0.9s }\n  & > div:nth-child(5)::before  { -webkit-animation-delay: -0.8s; animation-delay: -0.8s }\n  & > div:nth-child(6)::before  { -webkit-animation-delay: -0.7s; animation-delay: -0.7s }\n  & > div:nth-child(7)::before  { -webkit-animation-delay: -0.6s; animation-delay: -0.6s }\n  & > div:nth-child(8)::before  { -webkit-animation-delay: -0.5s; animation-delay: -0.5s }\n  & > div:nth-child(9)::before  { -webkit-animation-delay: -0.4s; animation-delay: -0.4s }\n  & > div:nth-child(10)::before { -webkit-animation-delay: -0.3s; animation-delay: -0.3s }\n  & > div:nth-child(11)::before { -webkit-animation-delay: -0.2s; animation-delay: -0.2s }\n  & > div:nth-child(12)::before { -webkit-animation-delay: -0.1s; animation-delay: -0.1s }\n"])), function (props) { return props.theme.global.edgeSize[props.size]; }, function (props) { return props.theme.global.edgeSize[props.size]; }, function (props) { return normalizeColor(props.color, props.theme); }, animationBounceDelay);
var CubeGridSpinner = styled.div(templateObject_14 || (templateObject_14 = __makeTemplateObject(["\n  width: ", ";\n  height: ", ";\n\n  & > div {\n    width: 33%;\n    height: 33%;\n    background-color: ", ";\n    float: left;\n    animation: ", " 1.3s infinite ease-in-out;\n  }\n\n  /*\n  * Spinner positions\n  * 1 2 3\n  * 4 5 6\n  * 7 8 9\n  */\n\n  & > div:nth-child(1) { -webkit-animation-delay: 0.2s; animation-delay: 0.2s  }\n  & > div:nth-child(2) { -webkit-animation-delay: 0.3s; animation-delay: 0.3s  }\n  & > div:nth-child(3) { -webkit-animation-delay: 0.4s; animation-delay: 0.4s  }\n  & > div:nth-child(4) { -webkit-animation-delay: 0.1s; animation-delay: 0.1s  }\n  & > div:nth-child(5) { -webkit-animation-delay: 0.2s; animation-delay: 0.2s  }\n  & > div:nth-child(6) { -webkit-animation-delay: 0.3s; animation-delay: 0.3s  }\n  & > div:nth-child(7) { -webkit-animation-delay: 0.0s; animation-delay: 0.0s  }\n  & > div:nth-child(8) { -webkit-animation-delay: 0.1s; animation-delay: 0.1s  }\n  & > div:nth-child(9) { -webkit-animation-delay: 0.2s; animation-delay: 0.2s  }\n"], ["\n  width: ", ";\n  height: ", ";\n\n  & > div {\n    width: 33%;\n    height: 33%;\n    background-color: ", ";\n    float: left;\n    animation: ", " 1.3s infinite ease-in-out;\n  }\n\n  /*\n  * Spinner positions\n  * 1 2 3\n  * 4 5 6\n  * 7 8 9\n  */\n\n  & > div:nth-child(1) { -webkit-animation-delay: 0.2s; animation-delay: 0.2s  }\n  & > div:nth-child(2) { -webkit-animation-delay: 0.3s; animation-delay: 0.3s  }\n  & > div:nth-child(3) { -webkit-animation-delay: 0.4s; animation-delay: 0.4s  }\n  & > div:nth-child(4) { -webkit-animation-delay: 0.1s; animation-delay: 0.1s  }\n  & > div:nth-child(5) { -webkit-animation-delay: 0.2s; animation-delay: 0.2s  }\n  & > div:nth-child(6) { -webkit-animation-delay: 0.3s; animation-delay: 0.3s  }\n  & > div:nth-child(7) { -webkit-animation-delay: 0.0s; animation-delay: 0.0s  }\n  & > div:nth-child(8) { -webkit-animation-delay: 0.1s; animation-delay: 0.1s  }\n  & > div:nth-child(9) { -webkit-animation-delay: 0.2s; animation-delay: 0.2s  }\n"])), function (props) { return props.theme.global.edgeSize[props.size]; }, function (props) { return props.theme.global.edgeSize[props.size]; }, function (props) { return normalizeColor(props.color, props.theme); }, animationScaleDelay);
var WaveSpinner = styled.div(templateObject_15 || (templateObject_15 = __makeTemplateObject(["\n  width: 30px;\n  height: 27px;\n\n  & > div {\n    background-color: ", ";\n    height: 100%;\n    width: 6px;\n    display: inline-block;\n    animation: ", " 1.2s infinite ease-in-out;\n  }\n\n  $ > div:nth-child(2) {\n    animation-delay: -1.1s;\n  }\n\n  & > div:nth-child(3) {\n    animation-delay: -1.0s;\n  }\n\n  & > div:nth-child(4) {\n    animation-delay: -0.9s;\n  }\n\n  & > div:nth-child(5) {\n    animation-delay: -0.8s;\n  }\n\n"], ["\n  width: 30px;\n  height: 27px;\n\n  & > div {\n    background-color: ", ";\n    height: 100%;\n    width: 6px;\n    display: inline-block;\n    animation: ", " 1.2s infinite ease-in-out;\n  }\n\n  $ > div:nth-child(2) {\n    animation-delay: -1.1s;\n  }\n\n  & > div:nth-child(3) {\n    animation-delay: -1.0s;\n  }\n\n  & > div:nth-child(4) {\n    animation-delay: -0.9s;\n  }\n\n  & > div:nth-child(5) {\n    animation-delay: -0.8s;\n  }\n\n"])), function (props) { return normalizeColor(props.color, props.theme); }, animationStretchDelay);
var FoldingCubeSpinner = styled.div(templateObject_16 || (templateObject_16 = __makeTemplateObject(["\n  width: ", ";\n  height: ", ";\n  position: relative;\n  transform: rotateZ(45deg);\n\n  & > div {\n    background-color: initial;\n    float: left;\n    width: 50%;\n    height: 50%;\n    position: relative;\n\n    -webkit-transform: scale(1.1);\n        -ms-transform: scale(1.1);\n            transform: scale(1.1);\n  }\n  & > div::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: ", ";\n    animation: ", " 2.4s infinite linear both;\n    transform-origin: 100% 100%;\n  }\n  & > div:nth-child(2) {\n    transform: scale(1.1) rotateZ(90deg);\n  }\n  & > div:nth-child(4) {\n    transform: scale(1.1) rotateZ(180deg);\n  }\n  & > div:nth-child(3) {\n    transform: scale(1.1) rotateZ(270deg);\n  }\n  & > div:nth-child(2)::before {\n    animation-delay: 0.3s;\n  }\n  & > div:nth-child(4)::before {\n    animation-delay: 0.6s;\n  }\n  & > div:nth-child(3)::before {\n    animation-delay: 0.9s;\n  }\n"], ["\n  width: ", ";\n  height: ", ";\n  position: relative;\n  transform: rotateZ(45deg);\n\n  & > div {\n    background-color: initial;\n    float: left;\n    width: 50%;\n    height: 50%;\n    position: relative;\n\n    -webkit-transform: scale(1.1);\n        -ms-transform: scale(1.1);\n            transform: scale(1.1);\n  }\n  & > div::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: ", ";\n    animation: ", " 2.4s infinite linear both;\n    transform-origin: 100% 100%;\n  }\n  & > div:nth-child(2) {\n    transform: scale(1.1) rotateZ(90deg);\n  }\n  & > div:nth-child(4) {\n    transform: scale(1.1) rotateZ(180deg);\n  }\n  & > div:nth-child(3) {\n    transform: scale(1.1) rotateZ(270deg);\n  }\n  & > div:nth-child(2)::before {\n    animation-delay: 0.3s;\n  }\n  & > div:nth-child(4)::before {\n    animation-delay: 0.6s;\n  }\n  & > div:nth-child(3)::before {\n    animation-delay: 0.9s;\n  }\n"])), function (props) { return props.theme.global.edgeSize[props.size]; }, function (props) { return props.theme.global.edgeSize[props.size]; }, function (props) { return normalizeColor(props.color, props.theme); }, animationFoldCubeAngle);
var DoubleBounceSpinner = styled.div(templateObject_17 || (templateObject_17 = __makeTemplateObject(["\n  width: ", ";\n  height: ", ";\n  position: relative;\n\n  & > div {\n    width: 100%;\n    height: 100%;\n    border-radius: 50%;\n    background-color: ", ";\n    opacity: 0.6;\n    position: absolute;\n    top: 0;\n    left: 0;\n\n    animation: ", " 2.0s infinite ease-in-out;\n  }\n\n  & > div:last-child {\n    -webkit-animation-delay: -1.0s;\n    animation-delay: -1.0s;\n  }\n"], ["\n  width: ", ";\n  height: ", ";\n  position: relative;\n\n  & > div {\n    width: 100%;\n    height: 100%;\n    border-radius: 50%;\n    background-color: ", ";\n    opacity: 0.6;\n    position: absolute;\n    top: 0;\n    left: 0;\n\n    animation: ", " 2.0s infinite ease-in-out;\n  }\n\n  & > div:last-child {\n    -webkit-animation-delay: -1.0s;\n    animation-delay: -1.0s;\n  }\n"])), function (props) { return props.theme.global.edgeSize[props.size]; }, function (props) { return props.theme.global.edgeSize[props.size]; }, function (props) { return normalizeColor(props.color, props.theme); }, animationBounce);
var WanderingCubesSpinner = styled.div(templateObject_18 || (templateObject_18 = __makeTemplateObject(["\n  width: 52px;\n  height: 52px;\n  position: relative;\n\n  & > div {\n    background-color: ", ";\n    width: 10px;\n    height: 10px;\n    position: absolute;\n    top: 0;\n    left: 0;\n\n    animation: ", " 1.8s infinite ease-in-out;\n  }\n\n  & > div:last-child {\n    -webkit-animation-delay: -0.9s;\n    animation-delay: -0.9s;\n  }\n"], ["\n  width: 52px;\n  height: 52px;\n  position: relative;\n\n  & > div {\n    background-color: ", ";\n    width: 10px;\n    height: 10px;\n    position: absolute;\n    top: 0;\n    left: 0;\n\n    animation: ", " 1.8s infinite ease-in-out;\n  }\n\n  & > div:last-child {\n    -webkit-animation-delay: -0.9s;\n    animation-delay: -0.9s;\n  }\n"])), function (props) { return normalizeColor(props.color, props.theme); }, animationCubeMove);
var ChasingDotsSpinner = styled.div(templateObject_19 || (templateObject_19 = __makeTemplateObject(["\n  width: ", ";\n  height: ", ";\n  position: relative;\n  animation: ", " 2.0s infinite linear;\n\n  & > div {\n    width: 60%;\n    height: 60%;\n    display: inline-block;\n    position: absolute;\n    top: 0;\n    background-color: ", ";\n    border-radius: 100%;\n    animation: ", " 2.0s infinite ease-in-out;\n  }\n\n  & > div:last-child {\n    top: auto;\n    bottom: 0;\n\n    -webkit-animation-delay: -1.0s;\n    animation-delay: -1.0s;\n  }\n"], ["\n  width: ", ";\n  height: ", ";\n  position: relative;\n  animation: ", " 2.0s infinite linear;\n\n  & > div {\n    width: 60%;\n    height: 60%;\n    display: inline-block;\n    position: absolute;\n    top: 0;\n    background-color: ", ";\n    border-radius: 100%;\n    animation: ", " 2.0s infinite ease-in-out;\n  }\n\n  & > div:last-child {\n    top: auto;\n    bottom: 0;\n\n    -webkit-animation-delay: -1.0s;\n    animation-delay: -1.0s;\n  }\n"])), function (props) { return props.theme.global.edgeSize[props.size]; }, function (props) { return props.theme.global.edgeSize[props.size]; }, animationRotate, function (props) { return normalizeColor(props.color, props.theme); }, animationBounce);
var RotatingPlaneSpinner = styled.div(templateObject_20 || (templateObject_20 = __makeTemplateObject(["\n  width: ", ";\n  height: ", ";\n  background-color: ", ";\n\n  animation: ", " 1.2s infinite ease-in-out;\n"], ["\n  width: ", ";\n  height: ", ";\n  background-color: ", ";\n\n  animation: ", " 1.2s infinite ease-in-out;\n"])), function (props) { return props.theme.global.edgeSize[props.size]; }, function (props) { return props.theme.global.edgeSize[props.size]; }, function (props) { return normalizeColor(props.color, props.theme); }, animationRotatePlane);
var PulseSpinner = styled.div(templateObject_21 || (templateObject_21 = __makeTemplateObject(["\n  width: ", ";\n  height: ", ";\n  background-color: ", ";\n  border-radius: 100%;\n  animation: ", " 1.0s infinite ease-in-out;\n"], ["\n  width: ", ";\n  height: ", ";\n  background-color: ", ";\n  border-radius: 100%;\n  animation: ", " 1.0s infinite ease-in-out;\n"])), function (props) { return props.theme.global.edgeSize[props.size]; }, function (props) { return props.theme.global.edgeSize[props.size]; }, function (props) { return normalizeColor(props.color, props.theme); }, animationScaleOut);
var WordPressSpinner = styled.div(templateObject_22 || (templateObject_22 = __makeTemplateObject(["\n& > div {\n  width:", ";\n  height: ", ";\n  background-color: ", ";\n  display: inline-block;\n  border-radius: ", ";\n  position: relative;\n  animation: ", " 1s linear infinite;\n}\n\n& > div::after {\n  content: '';\n  display: block;\n  background-color: #fff;\n  width: 8px;\n  height: 8px;\n  position: absolute;\n  border-radius: 8px;\n  top: 5px;\n  left: 5px;\n}\n"], ["\n& > div {\n  width:", ";\n  height: ", ";\n  background-color: ", ";\n  display: inline-block;\n  border-radius: ", ";\n  position: relative;\n  animation: ", " 1s linear infinite;\n}\n\n& > div::after {\n  content: '';\n  display: block;\n  background-color: #fff;\n  width: 8px;\n  height: 8px;\n  position: absolute;\n  border-radius: 8px;\n  top: 5px;\n  left: 5px;\n}\n"])), function (props) { return props.theme.global.edgeSize[props.size]; }, function (props) { return props.theme.global.edgeSize[props.size]; }, function (props) { return normalizeColor(props.color, props.theme); }, function (props) { return props.theme.global.edgeSize[props.size]; }, animationInnerCircle);
var templateObject_1$a, templateObject_2$4, templateObject_3$4, templateObject_4$2, templateObject_5$2, templateObject_6$2, templateObject_7$2, templateObject_8$1, templateObject_9$1, templateObject_10$1, templateObject_11, templateObject_12, templateObject_13, templateObject_14, templateObject_15, templateObject_16, templateObject_17, templateObject_18, templateObject_19, templateObject_20, templateObject_21, templateObject_22;

// ported to styled-componnets from
var styledComponents$1 = {
    'circle': CircleSpinner,
    'three-bounce': ThreeBounceSpinner,
    'cube-grid': CubeGridSpinner,
    'wave': WaveSpinner,
    'folding-cube': FoldingCubeSpinner,
    'double-bounce': DoubleBounceSpinner,
    'wandering-cubes': WanderingCubesSpinner,
    'chasing-dots': ChasingDotsSpinner,
    'rotating-plane': RotatingPlaneSpinner,
    'pulse': PulseSpinner,
    'wordpress': WordPressSpinner,
};
/** A spinning process indicator<br/>
 * `import { Spinning } from 'grommet-controls';`<br/>
 * `<Spinning />`<br/>
*/
var Spinning = function (_a) {
    var kind = _a.kind, fadeIn = _a.fadeIn, color = _a.color, size = _a.size;
    var spinnerInfo = allSpinners[kind] || allSpinners['three-bounce'];
    var StyledSpinning = styledComponents$1[kind];
    return (React.createElement(ThemeContext.Consumer, null, function (theme) { return (React.createElement(StyledSpinning, { color: (color || (theme.dark ? 'light-1' : 'dark-1')), fadeIn: fadeIn, theme: theme, size: size }, Array.from(Array(spinnerInfo.divCount).keys()).map(function (_, idx) { return React.createElement("div", { key: idx }); }))); }));
};
Spinning.defaultProps = {
    kind: 'circle',
    fadeIn: 'full',
    color: undefined,
    size: 'medium',
};

var LoadingComponent = (function (_a) {
    var loading = _a.loading;
    return (React.createElement("div", null, loading && (React.createElement(Box, { align: 'center', fill: 'horizontal', pad: { vertical: 'large' } },
        React.createElement(Spinning, null)))));
});

var TrGroupComponent = (function (props) { return React.createElement(StyledTrGroupComponent, __assign({ role: 'rowgroup' }, props)); });

var focusableChildren = function (parent) {
    var list = [];
    if (parent && parent.childNodes) {
        parent.childNodes.forEach(function (node) {
            if (node.tagName) {
                list.push(node);
                if (filterByFocusable([node]).length !== 1) {
                    list = list.concat(focusableChildren(node));
                }
            }
        });
    }
    return filterByFocusable(list);
};
var focusedChildIndex = function (parent) {
    var focusable = focusableChildren(parent);
    var focused = document.activeElement;
    for (var i = 0; i < focusable.length; i += 1) {
        if (focusable[i] === focused) {
            return i;
        }
    }
    return 0;
};
var focusChildByIndex = function (parent, index) {
    var focusable = focusableChildren(parent);
    var focusIndex = Math.min(index, focusable.length - 1);
    if (focusIndex >= 0) {
        focusable[focusIndex].focus();
        return true;
    }
    return false;
};
var focusNextElement = function (parent) {
    var focusable = focusableChildren(parent);
    var focused = document.activeElement;
    var nextFocus;
    for (var i = 0; i < focusable.length; i += 1) {
        if (focusable[i] === focused) {
            if (i < focusable.length - 1) {
                nextFocus = focusable[i + 1];
            }
            break;
        }
    }
    if (nextFocus) {
        nextFocus.focus();
        return true;
    }
    return false;
};
var focusPrevElement = function (parent) {
    var focusable = focusableChildren(parent);
    var focused = document.activeElement;
    var prevFocus;
    for (var i = 0; i < focusable.length; i += 1) {
        if (focusable[i] === focused) {
            if (i > 0) {
                prevFocus = focusable[i - 1];
            }
            break;
        }
    }
    if (prevFocus) {
        prevFocus.focus();
        return true;
    }
    return false;
};
var hasKeyboardChildren = function (element) {
    var currentTag = element.tagName.toLowerCase();
    var validTags = /(input|select|textarea)$/;
    if (currentTag.match(validTags)) {
        return true;
    }
    var focusable = focusableChildren(element);
    for (var i = 0; i < focusable.length; i += 1) {
        if (focusable[i].tagName && focusable[i].tagName.toLowerCase().match(validTags)) {
            return true;
        }
    }
    return false;
};

var TrComponent = /** @class */ (function (_super) {
    __extends(TrComponent, _super);
    function TrComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selectNextRow = function () {
            var selectRow = _this.props.selectRow;
            var activeChild = focusedChildIndex(_this.container);
            return selectRow(true, activeChild);
        };
        _this.selectPrevRow = function () {
            var selectRow = _this.props.selectRow;
            var activeChild = focusedChildIndex(_this.container);
            return selectRow(false, activeChild);
        };
        _this.selectNextChild = function () {
            if (focusNextElement(_this.container)) {
                return true;
            }
            return _this.selectNextRow();
        };
        _this.selectPrevChild = function () {
            if (focusPrevElement(_this.container)) {
                return true;
            }
            return _this.selectPrevRow();
        };
        _this.selectFirstChild = function (activeIndex) { return focusChildByIndex(_this.container, activeIndex); };
        return _this;
    }
    TrComponent.prototype.render = function () {
        var _this = this;
        return (React.createElement(Keyboard, { onTab: function (e) {
                e.preventDefault();
                if (e.shiftKey) {
                    _this.selectPrevChild();
                }
                else {
                    _this.selectNextChild();
                }
            }, onLeft: function (e) {
                if (!hasKeyboardChildren(document.activeElement)) {
                    e.preventDefault();
                    _this.selectPrevChild();
                }
            }, onRight: function (e) {
                if (!hasKeyboardChildren(document.activeElement)) {
                    e.preventDefault();
                    _this.selectNextChild();
                }
            }, onUp: function (e) {
                if (!hasKeyboardChildren(document.activeElement)) {
                    e.preventDefault();
                    _this.selectPrevRow();
                }
            }, onDown: function (e) {
                if (!hasKeyboardChildren(document.activeElement)) {
                    e.preventDefault();
                    _this.selectNextRow();
                }
            } },
            React.createElement(StyledTrComponent, __assign({ direction: 'row', role: 'row', ref: function (el) { _this.container = findDOMNode(el); } }, this.props))));
    };
    return TrComponent;
}(Component));

var emptyObj = function () { return ({}); };
var defaultTableProps = {};
var defaultHeaderProps = {
    background: 'brand', border: 'all', align: 'center',
};
var defaultBodyProps = {
    animation: { type: 'fadeIn', duration: 2000, size: 'large' },
};
var defaultRowOddProps = {};
var defaultRowEvenProps = {};
var defaultFooterProps = { background: 'light-1' };
var defaultPaginationProps = { pad: { vertical: 'medium' } };
var defaultFilterProps = { border: 'bottom' };
var defaultFilterInputProps = { size: 'small', placeholder: 'Filter...' };
var defaultProps = {
    // General
    data: [],
    loading: false,
    showPagination: true,
    showPaginationTop: false,
    showPaginationBottom: true,
    showPageSizeOptions: true,
    pageSizeOptions: [5, 10, 20, 25, 50, 100],
    defaultPageSize: 20,
    showPageJump: true,
    collapseOnSortingChange: true,
    collapseOnPageChange: true,
    collapseOnDataChange: true,
    freezeWhenExpanded: false,
    sortable: true,
    multiSort: true,
    resizable: true,
    filterable: false,
    defaultSortDesc: false,
    defaultSorted: [],
    defaultFiltered: [],
    defaultResized: [],
    defaultExpanded: {},
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    defaultFilterMethod: function (filter, row, _column) {
        var id = filter.pivotId || filter.id;
        if (row[id] !== undefined && filter.value !== undefined) {
            return String(row[id])
                .toUpperCase()
                .startsWith(filter.value.toUpperCase());
        }
        return true;
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    defaultSortMethod: function (a, b, _desc) {
        // force null and undefined to the bottom
        a = a === null || a === undefined ? '' : a;
        b = b === null || b === undefined ? '' : b;
        // force any string values to lowercase
        a = typeof a === 'string' ? a.toLowerCase() : a;
        b = typeof b === 'string' ? b.toLowerCase() : b;
        // Return either 1 or -1 to indicate a sort priority
        if (a > b) {
            return 1;
        }
        if (a < b) {
            return -1;
        }
        // returning 0, undefined or any falsey value will use subsequent sorts or
        // the index as a tiebreaker
        return 0;
    },
    // Controlled State Props
    // page: undefined,
    // pageSize: undefined,
    // sorted: [],
    // filtered: [],
    // resized: [],
    // expanded: {},
    // Controlled State Callbacks
    onPageChange: undefined,
    onPageSizeChange: undefined,
    onSortedChange: undefined,
    onFilteredChange: undefined,
    onResizedChange: undefined,
    onExpandedChange: undefined,
    // Pivoting
    pivotBy: undefined,
    // Key Constants
    pivotValKey: '_pivotVal',
    pivotIDKey: '_pivotID',
    subRowsKey: '_subRows',
    aggregatedKey: '_aggregated',
    nestingLevelKey: '_nestingLevel',
    originalKey: '_original',
    indexKey: '_index',
    groupedByPivotKey: '_groupedByPivot',
    // Server-side Callbacks
    onFetchData: function () { return null; },
    // Component decorators
    getProps: function (_a) {
        var className = _a.className;
        return ({ className: className });
    },
    getTableProps: function (_a) {
        var decorations = _a.decorations;
        return ((decorations && decorations.table) || defaultTableProps);
    },
    getTheadGroupProps: function (_a) {
        var decorations = _a.decorations;
        return ((decorations && (decorations.headerGroup || decorations.header)) || {});
    },
    getTheadGroupTrProps: emptyObj,
    getTheadProps: emptyObj,
    getTheadTrProps: emptyObj,
    getTheadThProps: function (_a) {
        var decorations = _a.decorations;
        return ((decorations && decorations.header) || defaultHeaderProps);
    },
    getTheadFilterProps: emptyObj,
    getTheadFilterTrProps: function (_a) {
        var decorations = _a.decorations;
        return ((decorations && decorations.filterRow) || {});
    },
    getFilterInputProps: function (_a) {
        var decorations = _a.decorations;
        return ((decorations && decorations.filterInput) || defaultFilterInputProps);
    },
    getTheadFilterThProps: function (_a) {
        var decorations = _a.decorations;
        return ((decorations && decorations.filter) || defaultFilterProps);
    },
    getTbodyProps: function (_a) {
        var decorations = _a.decorations;
        return ((decorations && decorations.body) || defaultBodyProps);
    },
    getTrGroupProps: emptyObj,
    getTrProps: function (even, _a) {
        var decorations = _a.decorations;
        if (decorations) {
            var props = __assign({}, decorations.row);
            if (even) {
                props = __assign(__assign({}, props), (decorations.rowEven || defaultRowEvenProps));
            }
            else {
                props = __assign(__assign({}, props), (decorations.rowOdd || defaultRowOddProps));
            }
            return props;
        }
        return even ? defaultRowEvenProps : defaultRowOddProps;
    },
    getTdProps: function (_a) {
        var decorations = _a.decorations;
        return ((decorations && decorations.cell) || {});
    },
    getExpanderProps: function (_a) {
        var decorations = _a.decorations;
        return ((decorations && decorations.expander) || {});
    },
    getTfootProps: emptyObj,
    getTfootTrProps: emptyObj,
    getTfootTdProps: function (_a) {
        var decorations = _a.decorations;
        return ((decorations && decorations.footer) || defaultFooterProps);
    },
    getPaginationProps: function (_a) {
        var decorations = _a.decorations;
        return ((decorations && decorations.pagination) || defaultPaginationProps);
    },
    getLoadingProps: emptyObj,
    getNoDataProps: emptyObj,
    getResizerProps: emptyObj,
    // Global Column Defaults
    column: {
        // Renderers
        Cell: undefined,
        Header: undefined,
        Footer: undefined,
        Aggregated: undefined,
        Pivot: undefined,
        PivotValue: undefined,
        Expander: undefined,
        Filter: undefined,
        // All Columns
        sortable: undefined,
        resizable: undefined,
        filterable: undefined,
        show: true,
        minWidth: 100,
        // Cells only
        getProps: function (_state, _rowInfo, column) {
            if (column && column.decorations) {
                return column.decorations.cell || {};
            }
            return {};
        },
        // Pivot only
        aggregate: undefined,
        // Headers only
        getHeaderProps: function (_state, _rowInfo, column) { return ((column && column.decorations && column.decorations.header) || {}); },
        getFilterProps: function (_state, _rowInfo, column) { return ((column && column.decorations && column.decorations.filter) || {}); },
        // Footers only
        getFooterProps: function (_state, _rowInfo, column) { return ((column && column.decorations && column.decorations.footer) || {}); },
        filterMethod: undefined,
        filterAll: false,
        sortMethod: undefined,
    },
    // Global Expander Column Defaults
    expanderDefaults: {
        sortable: false,
        resizable: false,
        filterable: false,
        width: 46,
    },
    pivotDefaults: {
    // extend the defaults for pivoted columns here
    },
    // Text
    previousText: 'Previous',
    nextText: 'Next',
    loadingText: 'Loading...',
    noDataText: 'No rows found',
    pageText: 'Page',
    ofText: 'of',
    rowsText: 'rows',
    // Components
    TableComponent: TableComponent,
    TheadComponent: TheadComponent,
    TbodyComponent: TbodyComponent,
    TrGroupComponent: TrGroupComponent,
    TrComponent: TrComponent,
    ThComponent: ThComponent,
    TdComponent: TdComponent,
    CellTextComponent: CellTextComponent,
    TfootComponent: TfootComponent,
    FilterComponent: FilterComponent,
    ExpanderComponent: ExpanderComponent,
    PivotValueComponent: PivotValueComponent,
    AggregatedComponent: function (_a) {
        var subRows = _a.subRows, column = _a.column;
        var previewValues = subRows
            .filter(function (d) { return typeof d[column.id] !== 'undefined'; })
            .map(function (row, i) { return (
        // eslint-disable-next-line react/no-array-index-key
        React.createElement("span", { key: i },
            row[column.id],
            i < subRows.length - 1 ? ', ' : '')); });
        return (React.createElement("span", null, previewValues));
    },
    PivotComponent: undefined,
    // the ExpanderComponent and PivotValueComponent at run-time in methods.js
    PaginationComponent: ReactTablePagination,
    PreviousComponent: undefined,
    NextComponent: undefined,
    LoadingComponent: LoadingComponent,
    NoDataComponent: NoDataComponent,
    ResizerComponent: ResizerComponent,
    PadRowComponent: function () { return React.createElement("span", null, "\u00A0"); },
};

var ReactTable = /** @class */ (function (_super) {
    __extends(ReactTable, _super);
    function ReactTable(props) {
        var _this = _super.call(this, props) || this;
        _this.rowRef = [];
        _this.footerRef = null;
        _this.filterRef = null;
        _this.headerRef = null;
        _this.headerGroupsRef = null;
        _this.getResolvedState = function (props, state) { return (__assign(__assign(__assign(__assign({}, _.compactObject(_this.state)), _.compactObject(_this.props)), _.compactObject(state)), _.compactObject(props))); };
        _this.fireFetchData = function () {
            _this.props.onFetchData(_this.getResolvedState(), _this);
        };
        _this.getStateOrProp = function (key) { return _.getFirstDefined(_this.state[key], _this.props[key]); };
        _this.getMinRows = function () { return _.getFirstDefined(_this.props.minRows, _this.getStateOrProp('pageSize')); };
        // User actions
        _this.onPageChange = function (page) {
            var _a = _this.props, onPageChange = _a.onPageChange, collapseOnPageChange = _a.collapseOnPageChange;
            var newState = { page: page };
            if (collapseOnPageChange) {
                newState.expanded = {};
            }
            _this.setStateWithData(newState, _this.state, _this.props, function () { return (onPageChange && onPageChange(page)); });
        };
        _this.onPageSizeChange = function (newPageSize) {
            var onPageSizeChange = _this.props.onPageSizeChange;
            var _a = _this.getResolvedState(), pageSize = _a.pageSize, page = _a.page;
            // Normalize the page to display
            var currentRow = pageSize * page;
            var newPage = Math.floor(currentRow / newPageSize);
            _this.setStateWithData({
                pageSize: newPageSize,
                page: newPage,
            }, _this.state, _this.props, function () { return (onPageSizeChange && onPageSizeChange(newPageSize, newPage)); });
        };
        _this.sortColumn = function (column, additive) {
            var _a = _this.getResolvedState(), sorted = _a.sorted, skipNextSort = _a.skipNextSort, defaultSortDesc = _a.defaultSortDesc;
            var firstSortDirection = Object.prototype.hasOwnProperty.call(column, 'defaultSortDesc')
                ? column.defaultSortDesc
                : defaultSortDesc;
            var secondSortDirection = !firstSortDirection;
            // we can't stop event propagation from the column resize move handlers
            // attached to the document because of react's synthetic events
            // so we have to prevent the sort function from actually sorting
            // if we click on the column resize element within a header.
            if (skipNextSort) {
                _this.setStateWithData({
                    skipNextSort: false,
                }, _this.state, _this.props);
                return;
            }
            var onSortedChange = _this.props.onSortedChange;
            var newSorted = _.clone(sorted || []).map(function (d) {
                d.desc = _.isSortingDesc(d);
                return d;
            });
            if (!_.isArray(column)) {
                // Single-Sort
                var existingIndex = newSorted.findIndex(function (d) { return d.id === column.id; });
                if (existingIndex > -1) {
                    var existing = newSorted[existingIndex];
                    if (existing.desc === secondSortDirection) {
                        if (additive) {
                            newSorted.splice(existingIndex, 1);
                        }
                        else {
                            existing.desc = firstSortDirection;
                            newSorted = [existing];
                        }
                    }
                    else {
                        existing.desc = secondSortDirection;
                        if (!additive) {
                            newSorted = [existing];
                        }
                    }
                }
                else if (additive) {
                    newSorted.push({
                        id: column.id,
                        desc: firstSortDirection,
                    });
                }
                else {
                    newSorted = [
                        {
                            id: column.id,
                            desc: firstSortDirection,
                        },
                    ];
                }
            }
            else {
                // Multi-Sort
                var existingIndex_1 = newSorted.findIndex(function (d) { return d.id === column[0].id; });
                // Existing Sorted Column
                if (existingIndex_1 > -1) {
                    var existing = newSorted[existingIndex_1];
                    if (existing.desc === secondSortDirection) {
                        if (additive) {
                            newSorted.splice(existingIndex_1, column.length);
                        }
                        else {
                            column.forEach(function (_d, i) {
                                newSorted[existingIndex_1 + i].desc = firstSortDirection;
                            });
                        }
                    }
                    else {
                        column.forEach(function (_d, i) {
                            newSorted[existingIndex_1 + i].desc = secondSortDirection;
                        });
                    }
                    if (!additive) {
                        newSorted = newSorted.slice(existingIndex_1, column.length);
                    }
                    // New Sort Column
                }
                else if (additive) {
                    newSorted = newSorted.concat(column.map(function (d) { return ({
                        id: d.id,
                        desc: firstSortDirection,
                    }); }));
                }
                else {
                    newSorted = column.map(function (d) { return ({
                        id: d.id,
                        desc: firstSortDirection,
                    }); });
                }
            }
            _this.setStateWithData({
                page: (!sorted.length && newSorted.length) || !additive
                    ? 0
                    : _this.state.page,
                sorted: newSorted,
            }, _this.state, _this.props, function () { return (onSortedChange && onSortedChange(newSorted, column, additive)); });
        };
        _this.filterColumn = function (column, value) {
            var filtered = _this.getResolvedState().filtered;
            var onFilteredChange = _this.props.onFilteredChange;
            // Remove old filter first if it exists
            var newFiltering = (filtered || []).filter(function (x) { return (x.id !== column.id); });
            if (value !== '') {
                newFiltering.push({
                    id: column.id,
                    value: value,
                });
            }
            _this.setStateWithData({
                filtered: newFiltering,
            }, _this.state, _this.props, function () { return (onFilteredChange && onFilteredChange(newFiltering, column, value)); });
        };
        _this.resizeColumnStart = function (event, column, isTouch) {
            event.stopPropagation();
            var parentWidth = event.target.parentElement.getBoundingClientRect()
                .width;
            var pageX;
            if (isTouch) {
                pageX = event.changedTouches[0].pageX;
            }
            else {
                pageX = event.pageX;
            }
            _this.setStateWithData({
                currentlyResizing: {
                    id: column.id,
                    startX: pageX,
                    parentWidth: parentWidth,
                },
            }, _this.state, _this.props, function () {
                if (isTouch) {
                    document.addEventListener('touchmove', _this.resizeColumnMoving);
                    document.addEventListener('touchcancel', _this.resizeColumnEnd);
                    document.addEventListener('touchend', _this.resizeColumnEnd);
                }
                else {
                    document.addEventListener('mousemove', _this.resizeColumnMoving);
                    document.addEventListener('mouseup', _this.resizeColumnEnd);
                    document.addEventListener('mouseleave', _this.resizeColumnEnd);
                }
            });
        };
        _this.resizeColumnMoving = function (event) {
            event.stopPropagation();
            var onResizedChange = _this.props.onResizedChange;
            var _a = _this.getResolvedState(), resized = _a.resized, currentlyResizing = _a.currentlyResizing;
            // Delete old value
            var newResized = resized.filter(function (x) { return x.id !== currentlyResizing.id; });
            var pageX;
            if (event.type === 'touchmove') {
                pageX = event.changedTouches[0].pageX;
            }
            else if (event.type === 'mousemove') {
                pageX = event.pageX;
            }
            // Set the min size to 10 to account for margin and border or else the
            // group headers don't line up correctly
            var newWidth = Math.max(currentlyResizing.parentWidth + pageX - currentlyResizing.startX, 11);
            newResized.push({
                id: currentlyResizing.id,
                value: newWidth,
            });
            _this.setStateWithData({
                resized: newResized,
            }, _this.state, _this.props, function () { return (onResizedChange && onResizedChange(newResized, event)); });
        };
        _this.resizeColumnEnd = function (event) {
            event.stopPropagation();
            var isTouch = event.type === 'touchend' || event.type === 'touchcancel';
            if (isTouch) {
                document.removeEventListener('touchmove', _this.resizeColumnMoving);
                document.removeEventListener('touchcancel', _this.resizeColumnEnd);
                document.removeEventListener('touchend', _this.resizeColumnEnd);
            }
            // If its a touch event clear the mouse one's as well because sometimes
            // the mouseDown event gets called as well, but the mouseUp event doesn't
            document.removeEventListener('mousemove', _this.resizeColumnMoving);
            document.removeEventListener('mouseup', _this.resizeColumnEnd);
            document.removeEventListener('mouseleave', _this.resizeColumnEnd);
            // The touch events don't propagate up to the sorting's onMouseDown event so
            // no need to prevent it from happening or else the first click after a touch
            // event resize will not sort the column.
            if (!isTouch) {
                _this.setStateWithData({
                    skipNextSort: true,
                    currentlyResizing: undefined,
                }, _this.state, _this.props);
            }
        };
        _this.rowRef = [];
        _this.state = {
            page: 0,
            pageSize: props.defaultPageSize,
            sorted: props.defaultSorted,
            expanded: props.defaultExpanded,
            filtered: props.defaultFiltered,
            resized: props.defaultResized,
            currentlyResizing: undefined,
            skipNextSort: false,
        };
        return _this;
    }
    ReactTable.prototype.componentDidMount = function () {
        this.fireFetchData();
    };
    ReactTable.getDerivedStateFromProps = function (nextProps, oldState) {
        var newState = __assign(__assign({}, oldState), nextProps);
        // Do a deep compare of new and old `defaultOption` and
        // if they are different reset `option = defaultOption`
        var defaultableOptions = ['sorted', 'filtered', 'resized', 'expanded'];
        defaultableOptions.forEach(function (x) {
            var defaultName = "default" + (x.charAt(0).toUpperCase() + x.slice(1));
            if (JSON.stringify(oldState[defaultName])
                !== JSON.stringify(newState[defaultName])) {
                newState[x] = newState[defaultName];
            }
        });
        // If they change these table options, we need to reset defaults
        // or else we could get into a state where the user has changed the UI
        // and then disabled the ability to change it back.
        // e.g. If `filterable` has changed, set `filtered = defaultFiltered`
        var resettableOptions = ['sortable', 'filterable', 'resizable'];
        resettableOptions.forEach(function (x) {
            if (oldState[x] !== newState[x]) {
                var baseName = x.replace('able', '');
                var optionName = baseName + "ed";
                var defaultName = "default" + (optionName.charAt(0).toUpperCase()
                    + optionName.slice(1));
                newState[optionName] = newState[defaultName];
            }
        });
        // Props that trigger a data update
        if (oldState.data !== newState.data
            || JSON.stringify(oldState.columns) !== JSON.stringify(newState.columns)
            || oldState.pivotBy !== newState.pivotBy
            || oldState.sorted !== newState.sorted
            || oldState.filtered !== newState.filtered) {
            return ReactTable.getStateWithData(ReactTable.getDataModel(newState, nextProps), oldState, nextProps);
        }
        return null;
    };
    ReactTable.getStateWithData = function (newState, oldState, props) {
        var newResolvedState = __assign(__assign(__assign({}, oldState), newState), props);
        var freezeWhenExpanded = newResolvedState.freezeWhenExpanded;
        // Default to unfrozen state
        newResolvedState.frozen = false;
        // If freezeWhenExpanded is set, check for frozen conditions
        if (freezeWhenExpanded) {
            // if any rows are expanded, freeze the existing data and sorting
            var keys = Object.keys(newResolvedState.expanded);
            for (var i = 0; i < keys.length; i += 1) {
                if (newResolvedState.expanded[keys[i]]) {
                    newResolvedState.frozen = true;
                    break;
                }
            }
        }
        // If the data isn't frozen and either the data or
        // sorting model has changed, update the data
        if ((oldState.frozen && !newResolvedState.frozen)
            || oldState.sorted !== newResolvedState.sorted
            || oldState.filtered !== newResolvedState.filtered
            || oldState.showFilters !== newResolvedState.showFilters
            || (!newResolvedState.frozen
                && oldState.resolvedData !== newResolvedState.resolvedData)) {
            // Handle collapseOnsortedChange & collapseOnDataChange
            if ((oldState.sorted !== newResolvedState.sorted
                && props.collapseOnSortingChange)
                || oldState.filtered !== newResolvedState.filtered
                || oldState.showFilters !== newResolvedState.showFilters
                || (oldState.sortedData
                    && !newResolvedState.frozen
                    && oldState.resolvedData !== newResolvedState.resolvedData
                    && props.collapseOnDataChange)) {
                newResolvedState.expanded = {};
            }
            Object.assign(newResolvedState, ReactTable.getSortedData(newResolvedState, props));
        }
        // Set page to 0 if filters change
        if (oldState.filtered !== newResolvedState.filtered) {
            newResolvedState.page = 0;
        }
        // Calculate pageSize all the time
        if (newResolvedState.sortedData) {
            newResolvedState.pages = newResolvedState.manual
                ? newResolvedState.pages
                : Math.ceil(newResolvedState.sortedData.length / newResolvedState.pageSize);
            newResolvedState.page = Math.max(newResolvedState.page >= newResolvedState.pages
                ? newResolvedState.pages - 1
                : newResolvedState.page, 0);
        }
        return newResolvedState;
    };
    ReactTable.prototype.setStateWithData = function (newState, oldState, props, cb) {
        var _this = this;
        var newResolvedState = ReactTable.getStateWithData(newState, oldState, props);
        return this.setState(newResolvedState, function () {
            if (cb) {
                cb();
            }
            if (oldState.page !== newResolvedState.page
                || oldState.pageSize !== newResolvedState.pageSize
                || oldState.sorted !== newResolvedState.sorted
                || oldState.filtered !== newResolvedState.filtered) {
                _this.fireFetchData();
            }
        });
    };
    ReactTable.prototype.render = function () {
        var _this = this;
        var resolvedState = this.getResolvedState();
        var getProps = resolvedState.getProps, getTableProps = resolvedState.getTableProps, getTheadGroupProps = resolvedState.getTheadGroupProps, getTheadGroupTrProps = resolvedState.getTheadGroupTrProps, getTheadProps = resolvedState.getTheadProps, getTheadTrProps = resolvedState.getTheadTrProps, getTheadThProps = resolvedState.getTheadThProps, getTheadFilterProps = resolvedState.getTheadFilterProps, getTheadFilterTrProps = resolvedState.getTheadFilterTrProps, getTheadFilterThProps = resolvedState.getTheadFilterThProps, getFilterInputProps = resolvedState.getFilterInputProps, getTbodyProps = resolvedState.getTbodyProps, getTrGroupProps = resolvedState.getTrGroupProps, getTrProps = resolvedState.getTrProps, getTdProps = resolvedState.getTdProps, getExpanderProps = resolvedState.getExpanderProps, getTfootProps = resolvedState.getTfootProps, getTfootTrProps = resolvedState.getTfootTrProps, getTfootTdProps = resolvedState.getTfootTdProps, getPaginationProps = resolvedState.getPaginationProps, getLoadingProps = resolvedState.getLoadingProps, getNoDataProps = resolvedState.getNoDataProps, getResizerProps = resolvedState.getResizerProps, showPagination = resolvedState.showPagination, showPaginationTop = resolvedState.showPaginationTop, showPaginationBottom = resolvedState.showPaginationBottom, manual = resolvedState.manual, loadingText = resolvedState.loadingText, noDataText = resolvedState.noDataText, sortable = resolvedState.sortable, multiSort = resolvedState.multiSort, resizable = resolvedState.resizable, filterable = resolvedState.filterable, 
        // Pivoting State
        pivotIDKey = resolvedState.pivotIDKey, pivotValKey = resolvedState.pivotValKey, pivotBy = resolvedState.pivotBy, subRowsKey = resolvedState.subRowsKey, aggregatedKey = resolvedState.aggregatedKey, originalKey = resolvedState.originalKey, indexKey = resolvedState.indexKey, groupedByPivotKey = resolvedState.groupedByPivotKey, expanderTdDefaultProps = resolvedState.expanderTdDefaultProps, 
        // State
        loading = resolvedState.loading, pageSize = resolvedState.pageSize, page = resolvedState.page, sorted = resolvedState.sorted, filtered = resolvedState.filtered, resized = resolvedState.resized, expanded = resolvedState.expanded, pages = resolvedState.pages, onExpandedChange = resolvedState.onExpandedChange, 
        // Components
        TableComponent = resolvedState.TableComponent, TheadComponent = resolvedState.TheadComponent, TbodyComponent = resolvedState.TbodyComponent, TrGroupComponent = resolvedState.TrGroupComponent, TrComponent = resolvedState.TrComponent, ThComponent = resolvedState.ThComponent, TdComponent = resolvedState.TdComponent, CellTextComponent = resolvedState.CellTextComponent, TfootComponent = resolvedState.TfootComponent, PaginationComponent = resolvedState.PaginationComponent, LoadingComponent = resolvedState.LoadingComponent, SubComponent = resolvedState.SubComponent, NoDataComponent = resolvedState.NoDataComponent, ResizerComponent = resolvedState.ResizerComponent, ExpanderComponent = resolvedState.ExpanderComponent, PivotValueComponent = resolvedState.PivotValueComponent, PivotComponent = resolvedState.PivotComponent, AggregatedComponent = resolvedState.AggregatedComponent, FilterComponent = resolvedState.FilterComponent, PadRowComponent = resolvedState.PadRowComponent, 
        // Data model
        resolvedData = resolvedState.resolvedData, allVisibleColumns = resolvedState.allVisibleColumns, headerGroups = resolvedState.headerGroups, hasHeaderGroups = resolvedState.hasHeaderGroups, 
        // Sorted Data
        sortedData = resolvedState.sortedData;
        // Pagination
        var startRow = pageSize * page;
        var endRow = startRow + pageSize;
        var pageRows = manual ? resolvedData : sortedData.slice(startRow, endRow);
        var minRows = this.getMinRows();
        var padRows = _.range(Math.max(minRows - pageRows.length, 0));
        var hasColumnFooter = allVisibleColumns.some(function (d) { return d.Footer; });
        var hasFilters = filterable || allVisibleColumns.some(function (d) { return d.filterable; });
        var recurseRowsViewIndex = function (rows, path, index) {
            if (path === void 0) { path = []; }
            if (index === void 0) { index = -1; }
            return ([
                rows.map(function (row, i) {
                    var _a;
                    index += 1;
                    var rowWithViewIndex = __assign(__assign({}, row), { viewIndex: index });
                    var newPath = path.concat([i]);
                    if (rowWithViewIndex[subRowsKey] && _.get(expanded, newPath)) {
                        _a = recurseRowsViewIndex(rowWithViewIndex[subRowsKey], newPath, index), rowWithViewIndex[subRowsKey] = _a[0], index = _a[1];
                    }
                    return rowWithViewIndex;
                }),
                index,
            ]);
        };
        pageRows = recurseRowsViewIndex(pageRows)[0];
        var canPrevious = page > 0;
        var canNext = page + 1 < pages;
        var rowMinWidth = _.sum(allVisibleColumns.map(function (d) {
            var resizedColumn = resized.find(function (x) { return x.id === d.id; })
                || { id: undefined, value: undefined };
            return _.getFirstDefined(resizedColumn.value, d.width, d.minWidth);
        }));
        var rowIndex = -1;
        var finalState = __assign(__assign({}, resolvedState), { startRow: startRow,
            endRow: endRow,
            pageRows: pageRows,
            minRows: minRows,
            padRows: padRows,
            hasColumnFooter: hasColumnFooter,
            canPrevious: canPrevious,
            canNext: canNext,
            rowMinWidth: rowMinWidth });
        var rootProps = getProps(finalState, undefined, undefined, this);
        var tableProps = getTableProps(finalState, undefined, undefined, this);
        var tBodyProps = getTbodyProps(finalState, undefined, undefined, this);
        var loadingProps = getLoadingProps(finalState, undefined, undefined, this);
        var noDataProps = getNoDataProps(finalState, undefined, undefined, this);
        // Visual Components
        var makeHeaderGroup = function (column, i) {
            var resizedValue = function (col) { return (resized.find(function (x) { return x.id === col.id; })
                || { id: undefined, value: undefined }).value; };
            var flex = _.sum(column.columns.map(function (col) { return (col.width || resizedValue(col) ? 0 : col.minWidth); }));
            var width = _.sum(column.columns.map(function (col) { return _.getFirstDefined(resizedValue(col), col.width, col.minWidth); }));
            var maxWidth = _.sum(column.columns.map(function (col) { return _.getFirstDefined(resizedValue(col), col.width, col.maxWidth); }));
            var theadGroupThProps = getTheadGroupProps(finalState, undefined, column, _this);
            var columnHeaderProps = column.getHeaderProps(finalState, undefined, column, _this);
            var rest = __assign(__assign(__assign({}, theadGroupThProps), columnHeaderProps), { CellTextComponent: CellTextComponent });
            var flexStyles = {
                flex: flex + " 0 auto",
                width: _.asPx(width),
                maxWidth: _.asPx(maxWidth),
            };
            return (React.createElement(ThComponent, __assign({ key: i + "-" + column.id, style: flexStyles }, rest), _.normalizeComponent(column.Header, {
                data: sortedData,
                column: column,
            })));
        };
        var selectRow = function (index) { return function (nextRow, childIndex) {
            var selectFirstAvailable = function (rows) {
                for (var i = 0; i < rows.length; i += 1) {
                    if (rows[i]) {
                        return rows[i].selectFirstChild(childIndex);
                    }
                }
                return false;
            };
            var found;
            if (typeof index === 'number') {
                var _a = _this.state, page_1 = _a.page, pages_1 = _a.pages;
                if (nextRow) {
                    if (pageRows.length > index + 1) {
                        found = _this.rowRef[index + 1].selectFirstChild(childIndex);
                    }
                    else if (page_1 < pages_1 - 1) {
                        _this.onPageChange(page_1 + 1);
                        found = true;
                    }
                    else {
                        found = selectFirstAvailable([_this.footerRef]);
                    }
                }
                else if (index > 0) {
                    found = _this.rowRef[index - 1].selectFirstChild(childIndex);
                }
                else if (page_1 > 0) {
                    _this.onPageChange(page_1 - 1);
                    found = true;
                }
                else {
                    found = selectFirstAvailable([_this.filterRef, _this.headerRef, _this.headerGroupsRef]);
                }
            }
            if (!found) {
                if (nextRow) {
                    focusNextElement(document);
                }
                else {
                    focusPrevElement(document);
                }
            }
        }; };
        var makeHeaderGroups = function () {
            var theadGroupProps = getTheadGroupProps(finalState, undefined, undefined, _this);
            var theadGroupTrProps = getTheadGroupTrProps(finalState, undefined, undefined, _this);
            return (React.createElement(TheadComponent, __assign({ style: { minWidth: rowMinWidth + "px" } }, theadGroupProps),
                React.createElement(TrComponent, __assign({ ref: function (el) { _this.headerGroupsRef = el; }, selectRow: selectRow('headerGroup') }, theadGroupTrProps), headerGroups.map(makeHeaderGroup))));
        };
        var makeHeader = function (column, i) {
            var resizedCol = resized.find(function (x) { return x.id === column.id; })
                || { id: undefined, value: undefined };
            var sort = sorted.find(function (d) { return d.id === column.id; });
            var show = typeof column.show === 'function' ? column.show() : column.show;
            var width = _.getFirstDefined(resizedCol.value, column.width, column.minWidth);
            var maxWidth = _.getFirstDefined(resizedCol.value, column.width, column.maxWidth);
            var theadThProps = getTheadThProps(finalState, undefined, column, _this);
            var columnHeaderProps = column.getHeaderProps(finalState, undefined, column, _this);
            var rest = __assign(__assign(__assign({}, theadThProps), columnHeaderProps), { CellTextComponent: CellTextComponent });
            var isResizable = _.getFirstDefined(column.resizable, resizable, false);
            var resizer = isResizable
                ? (React.createElement(ResizerComponent, __assign({ onMouseDown: function (e) { return _this.resizeColumnStart(e, column, false); }, onTouchStart: function (e) { return _this.resizeColumnStart(e, column, true); } }, getResizerProps(finalState, undefined, column, _this))))
                : null;
            var isSortable = _.getFirstDefined(column.sortable, sortable, false);
            return (React.createElement(ThComponent, __assign({ key: i + "-" + column.id, sort: sort && (sort.desc ? '-sort-desc' : '-sort-asc'), resizable: isResizable, sortable: isSortable, hidden: !show, expander: column.expander, pivot: pivotBy && pivotBy.slice(0, -1).includes(column.id), style: {
                    flex: width + " 0 auto",
                    width: _.asPx(width),
                    maxWidth: _.asPx(maxWidth),
                }, toggleSort: function (e) {
                    if (isSortable)
                        _this.sortColumn(column, multiSort ? e.shiftKey : false);
                } }, rest),
                _.normalizeComponent(column.Header, {
                    data: sortedData,
                    column: column,
                }),
                resizer));
        };
        var makeHeaders = function () {
            var theadProps = getTheadProps(finalState, undefined, undefined, _this);
            var theadTrProps = getTheadTrProps(finalState, undefined, undefined, _this);
            return (React.createElement(TheadComponent, __assign({ header: true, style: {
                    minWidth: rowMinWidth + "px",
                } }, theadProps),
                React.createElement(TrComponent, __assign({ ref: function (el) { _this.headerRef = el; }, selectRow: selectRow('header') }, theadTrProps), allVisibleColumns.map(makeHeader))));
        };
        var makeFilter = function (column, i) {
            var resizedCol = resized.find(function (x) { return x.id === column.id; })
                || { id: undefined, value: undefined };
            var width = _.getFirstDefined(resizedCol.value, column.width, column.minWidth);
            var maxWidth = _.getFirstDefined(resizedCol.value, column.width, column.maxWidth);
            var theadFilterThProps = getTheadFilterThProps(finalState, undefined, column, _this);
            var filterInputProps = getFilterInputProps(finalState, undefined, column, _this);
            var columnHeaderProps = column.getFilterProps(finalState, undefined, column, _this);
            var rest = __assign(__assign(__assign({}, theadFilterThProps), columnHeaderProps), { CellTextComponent: CellTextComponent });
            var filter = filtered.find(function (filter) { return filter.id === column.id; });
            var ResolvedFilterComponent = column.Filter || FilterComponent;
            var isFilterable = _.getFirstDefined(column.filterable, filterable, false);
            return (React.createElement(ThComponent, __assign({ key: i + "-" + column.id, style: {
                    flex: width + " 0 auto",
                    width: _.asPx(width),
                    maxWidth: _.asPx(maxWidth),
                } }, rest), isFilterable
                ? _.normalizeComponent(ResolvedFilterComponent, __assign(__assign({}, filterInputProps), { column: column,
                    filter: filter, onChange: function (value) { return _this.filterColumn(column, value); } }), undefined)
                : null));
        };
        var makeFilters = function () {
            var theadFilterProps = getTheadFilterProps(finalState, undefined, undefined, _this);
            var theadFilterTrProps = getTheadFilterTrProps(finalState, undefined, undefined, _this);
            return (React.createElement(TheadComponent, __assign({ filters: true, style: {
                    minWidth: rowMinWidth + "px",
                } }, theadFilterProps),
                React.createElement(TrComponent, __assign({ ref: function (el) { _this.filterRef = el; }, selectRow: selectRow('filter') }, theadFilterTrProps), allVisibleColumns.map(makeFilter))));
        };
        var makePageRow = function (row, i, path) {
            if (path === void 0) { path = []; }
            var rowInfo = {
                original: row[originalKey],
                row: row,
                index: row[indexKey],
                viewIndex: rowIndex += 1,
                pageSize: pageSize,
                page: page,
                level: path.length,
                nestingPath: path.concat([i]),
                aggregated: row[aggregatedKey],
                groupedByPivot: row[groupedByPivotKey],
                subRows: row[subRowsKey],
            };
            var isExpanded = _.get(expanded, rowInfo.nestingPath);
            var trGroupProps = getTrGroupProps(finalState, rowInfo, undefined, _this);
            var expanderProps = getExpanderProps(finalState, rowInfo, undefined, _this);
            var trProps = getTrProps(row.viewIndex % 2, finalState, rowInfo, undefined, _this);
            return (React.createElement(TrGroupComponent, __assign({ key: rowInfo.nestingPath.join('_') }, trGroupProps),
                React.createElement(TrComponent, __assign({ selectRow: selectRow(i), ref: function (el) { _this.rowRef[i] = el; }, rowIndex: row.viewIndex }, trProps), allVisibleColumns.map(function (column, i2) {
                    var defaultTdProps = {};
                    var resizedCol = resized.find(function (x) { return x.id === column.id; })
                        || { id: undefined, value: undefined };
                    var show = typeof column.show === 'function' ? column.show() : column.show;
                    var width = _.getFirstDefined(resizedCol.value, column.width, column.minWidth);
                    var maxWidth = _.getFirstDefined(resizedCol.value, column.width, column.maxWidth);
                    var tdProps = getTdProps(finalState, rowInfo, column, _this);
                    var columnProps = column.getProps(finalState, rowInfo, column);
                    var cellInfo = __assign(__assign(__assign(__assign({}, rowInfo), { isExpanded: isExpanded, column: __assign({}, column), value: rowInfo.row[column.id], pivoted: column.pivoted, expander: column.expander, expandable: undefined, resized: resized,
                        show: show,
                        width: width,
                        maxWidth: maxWidth }), tdProps), columnProps);
                    var value = cellInfo.value;
                    var useOnExpanderClick;
                    var isBranch;
                    var isPreview;
                    var onExpanderClick = function (e) {
                        var newExpanded = _.clone(expanded);
                        if (isExpanded) {
                            newExpanded = _.set(newExpanded, cellInfo.nestingPath, false);
                        }
                        else {
                            newExpanded = _.set(newExpanded, cellInfo.nestingPath, {});
                        }
                        return _this.setStateWithData({
                            expanded: newExpanded,
                        }, _this.state, _this.props, function () { return (onExpandedChange
                            && onExpandedChange(newExpanded, cellInfo.nestingPath, e)); });
                    };
                    // Default to a standard cell
                    if (column.Cell) {
                        value = _.normalizeComponent(column.Cell, cellInfo, value);
                    }
                    var cellProps = __assign(__assign({}, tdProps), columnProps);
                    var resolvedCell = React.createElement(CellTextComponent, __assign({ value: value }, cellProps));
                    // Resolve Renderers
                    var ResolvedAggregatedComponent = column.Aggregated
                        || (!column.aggregate ? AggregatedComponent : column.Cell);
                    var ResolvedExpanderComponent = column.Expander || ExpanderComponent;
                    var ResolvedPivotValueComponent = column.PivotValue || PivotValueComponent;
                    var DefaultResolvedPivotComponent = PivotComponent
                        || (function (props) { return (React.createElement(React.Fragment, null,
                            React.createElement(ResolvedExpanderComponent, __assign({}, __assign(__assign({}, props), { expanderProps: expanderProps }))),
                            React.createElement(ResolvedPivotValueComponent, __assign({}, props)))); });
                    var ResolvedPivotComponent = column.Pivot || DefaultResolvedPivotComponent;
                    // Is this cell expandable?
                    if (cellInfo.pivoted || cellInfo.expander) {
                        // Make it expandable by defualt
                        cellInfo.expandable = true;
                        useOnExpanderClick = true;
                        // If pivoted, has no subRows, and does not have a subComponent,
                        // do not make expandable
                        if (cellInfo.pivoted && !cellInfo.subRows && !SubComponent) {
                            cellInfo.expandable = false;
                        }
                    }
                    if (cellInfo.pivoted) {
                        // Is this column a branch?
                        isBranch = rowInfo.row[pivotIDKey] === column.id && cellInfo.subRows;
                        // Should this column be blank?
                        isPreview = pivotBy.indexOf(column.id)
                            > pivotBy.indexOf(rowInfo.row[pivotIDKey]) && cellInfo.subRows;
                        // Pivot Cell Render Override
                        if (isBranch) {
                            // isPivot
                            resolvedCell = _.normalizeComponent(ResolvedPivotComponent, __assign(__assign({}, cellInfo), { value: row[pivotValKey] }), row[pivotValKey]);
                        }
                        else if (isPreview) {
                            // Show the pivot preview
                            resolvedCell = _.normalizeComponent(ResolvedAggregatedComponent, cellInfo, value);
                        }
                        else {
                            resolvedCell = null;
                        }
                    }
                    else if (cellInfo.aggregated) {
                        resolvedCell = _.normalizeComponent(ResolvedAggregatedComponent, cellInfo, value);
                    }
                    if (cellInfo.expander) {
                        defaultTdProps = expanderTdDefaultProps;
                        resolvedCell = _.normalizeComponent(ResolvedExpanderComponent, __assign(__assign({}, cellInfo), { expanderProps: expanderProps }), row[pivotValKey]);
                        if (pivotBy) {
                            if (cellInfo.groupedByPivot) {
                                resolvedCell = null;
                            }
                            if (!cellInfo.subRows && !SubComponent) {
                                resolvedCell = null;
                            }
                        }
                    }
                    var resolvedOnExpanderClick = useOnExpanderClick
                        ? onExpanderClick
                        : function () { };
                    // If there are multiple onClick events, make sure they don't
                    // override eachother. This should maybe be expanded to handle all
                    // function attributes
                    var interactionProps = {
                        onClick: resolvedOnExpanderClick,
                    };
                    if (tdProps.onClick) {
                        interactionProps.onClick = function (e) {
                            tdProps.onClick(e, function () { return resolvedOnExpanderClick(e); });
                        };
                    }
                    if (columnProps.onClick) {
                        interactionProps.onClick = function (e) {
                            columnProps.onClick(e, function () { return resolvedOnExpanderClick(e); });
                        };
                    }
                    // Return the cell
                    return (React.createElement(TdComponent
                    // eslint-disable-next-line react/no-array-index-key
                    , __assign({ 
                        // eslint-disable-next-line react/no-array-index-key
                        key: i2 + "-" + column.id, hidden: !show, style: {
                            flex: width + " 0 auto",
                            width: _.asPx(width),
                            maxWidth: _.asPx(maxWidth),
                        } }, tdProps, columnProps, interactionProps, defaultTdProps), resolvedCell));
                })),
                rowInfo.subRows
                    && isExpanded
                    && rowInfo.subRows.map(function (d, i) { return makePageRow(d, i, rowInfo.nestingPath); }),
                SubComponent
                    && !rowInfo.subRows
                    && isExpanded
                    && SubComponent(rowInfo)));
        };
        var makePadColumn = function (column, i) {
            var resizedCol = resized.find(function (x) { return x.id === column.id; })
                || { id: undefined, value: undefined };
            var show = typeof column.show === 'function' ? column.show() : column.show;
            var width = _.getFirstDefined(resizedCol.value, column.width, column.minWidth);
            var flex = width;
            var maxWidth = _.getFirstDefined(resizedCol.value, column.width, column.maxWidth);
            var tdProps = getTdProps(finalState, undefined, column, _this);
            return (React.createElement(TdComponent, __assign({ key: i + "-" + column.id, hidden: !show, style: {
                    flex: flex + " 0 auto",
                    width: _.asPx(width),
                    maxWidth: _.asPx(maxWidth),
                } }, tdProps), _.normalizeComponent(PadRowComponent)));
        };
        var makePadRow = function (row, i) {
            var trGroupProps = getTrGroupProps(finalState, undefined, undefined, _this);
            var trProps = getTrProps(row.viewIndex % 2, finalState, undefined, undefined, _this);
            return (React.createElement(TrGroupComponent, __assign({ key: i }, trGroupProps),
                React.createElement(TrComponent, __assign({ padrow: true, even: (pageRows.length + i) % 2 }, trProps), allVisibleColumns.map(makePadColumn))));
        };
        var makeColumnFooter = function (column, i) {
            var resizedCol = resized.find(function (x) { return x.id === column.id; })
                || { id: undefined, value: undefined };
            var show = typeof column.show === 'function' ? column.show() : column.show;
            var width = _.getFirstDefined(resizedCol.value, column.width, column.minWidth);
            var maxWidth = _.getFirstDefined(resizedCol.value, column.width, column.maxWidth);
            var tFootTdProps = getTfootTdProps(finalState, undefined, undefined, _this);
            var columnProps = column.getProps(finalState, undefined, column, _this);
            var columnFooterProps = column.getFooterProps(finalState, undefined, column, _this);
            return (React.createElement(TdComponent, __assign({ key: i + "-" + column.id, hidden: !show, style: {
                    flex: width + " 0 auto",
                    width: _.asPx(width),
                    maxWidth: _.asPx(maxWidth),
                } }, columnProps, tFootTdProps, columnFooterProps), _.normalizeComponent(column.Footer, {
                data: sortedData,
                column: column,
            })));
        };
        var makeColumnFooters = function () {
            var tFootProps = getTfootProps(finalState, undefined, undefined, _this);
            var tFootTrProps = getTfootTrProps(finalState, undefined, undefined, _this);
            return (React.createElement(TfootComponent, __assign({ style: {
                    minWidth: rowMinWidth + "px",
                } }, tFootProps),
                React.createElement(TrComponent, __assign({ ref: function (el) { _this.footerRef = el; }, selectRow: selectRow('footer') }, tFootTrProps), allVisibleColumns.map(makeColumnFooter))));
        };
        var makePagination = function () {
            var paginationProps = getPaginationProps(finalState, undefined, undefined, _this);
            return (React.createElement(PaginationComponent, __assign({}, resolvedState, { pages: pages, canPrevious: canPrevious, canNext: canNext, onPageChange: _this.onPageChange, onPageSizeChange: _this.onPageSizeChange }, paginationProps)));
        };
        var makeTable = function () {
            var pagination = makePagination();
            return (React.createElement("div", __assign({}, rootProps),
                showPagination && showPaginationTop ? (React.createElement("div", null, pagination))
                    : null,
                React.createElement(TableComponent, __assign({}, tableProps),
                    hasHeaderGroups ? makeHeaderGroups() : null,
                    makeHeaders(),
                    hasFilters ? makeFilters() : null,
                    React.createElement(TbodyComponent, __assign({ style: {
                            minWidth: rowMinWidth + "px",
                        } }, tBodyProps),
                        React.createElement(LoadingComponent, __assign({ loading: loading, loadingText: loadingText }, loadingProps)),
                        pageRows.map(function (d, i) { return makePageRow(d, i); }),
                        padRows.map(makePadRow)),
                    hasColumnFooter ? makeColumnFooters() : null),
                showPagination && showPaginationBottom ? (React.createElement("div", null, pagination))
                    : null,
                !pageRows.length && !loading
                    && (React.createElement(NoDataComponent, __assign({}, noDataProps), _.normalizeComponent(noDataText)))));
        };
        // childProps are optionally passed to a function-as-a-child
        return makeTable();
    };
    ReactTable.defaultProps = defaultProps;
    ReactTable.getDataModel = function (newState, props) {
        var columns = newState.columns, _a = newState.pivotBy, pivotBy = _a === void 0 ? [] : _a, data = newState.data, pivotIDKey = newState.pivotIDKey, pivotValKey = newState.pivotValKey, subRowsKey = newState.subRowsKey, aggregatedKey = newState.aggregatedKey, nestingLevelKey = newState.nestingLevelKey, originalKey = newState.originalKey, indexKey = newState.indexKey, groupedByPivotKey = newState.groupedByPivotKey, SubComponent = newState.SubComponent;
        // Determine Header Groups
        var hasHeaderGroups = false;
        columns.forEach(function (column) {
            if (column.columns) {
                hasHeaderGroups = true;
            }
        });
        var columnsWithExpander = __spreadArrays(columns);
        var expanderColumn = columns.find(function (col) { return col.expander
            || (col.columns && col.columns.some(function (col2) { return col2.expander; })); });
        // The actual expander might be in the columns field of a group column
        if (expanderColumn && !expanderColumn.expander) {
            expanderColumn = expanderColumn.columns.find(function (col) { return col.expander; });
        }
        // If we have SubComponent's we need to make sure we have an expander column
        if (SubComponent && !expanderColumn) {
            expanderColumn = { expander: true };
            columnsWithExpander = __spreadArrays([expanderColumn], columnsWithExpander);
        }
        var makeDecoratedColumn = function (column, parentColumn) {
            var dcol;
            if (column.expander) {
                dcol = __assign(__assign(__assign({}, props.column), props.expanderDefaults), column);
            }
            else {
                dcol = __assign(__assign({}, props.column), column);
            }
            // Ensure minWidth is not greater than maxWidth if set
            if (dcol.maxWidth < dcol.minWidth) {
                dcol.minWidth = dcol.maxWidth;
            }
            if (parentColumn) {
                dcol.parentColumn = parentColumn;
            }
            // First check for string accessor
            if (typeof dcol.accessor === 'string') {
                dcol.id = dcol.id || dcol.accessor;
                var accessorString_1 = dcol.accessor;
                dcol.accessor = function (row) { return _.get(row, accessorString_1); };
                return dcol;
            }
            // Fall back to functional accessor (but require an ID)
            if (dcol.accessor && !dcol.id) {
                console.warn(dcol);
                throw new Error('A column id is required if using a non-string accessor for column above.');
            }
            // Fall back to an undefined accessor
            if (!dcol.accessor) {
                dcol.accessor = function () { return undefined; };
            }
            return dcol;
        };
        var allDecoratedColumns = [];
        // Decorate the columns
        var decorateAndAddToAll = function (column, parentColumn) {
            var decoratedColumn = makeDecoratedColumn(column, parentColumn);
            allDecoratedColumns.push(decoratedColumn);
            return decoratedColumn;
        };
        var decoratedColumns = columnsWithExpander.map(function (column) {
            if (column.columns) {
                return __assign(__assign({}, column), { columns: column.columns.map(function (d) { return decorateAndAddToAll(d, column); }) });
            }
            return decorateAndAddToAll(column);
        });
        // Build the visible columns, headers and flat column list
        var visibleColumns = decoratedColumns.slice();
        var allVisibleColumns = [];
        visibleColumns = visibleColumns.map(function (column) {
            if (column.columns) {
                var visibleSubColumns = column.columns.filter(function (d) { return (pivotBy.indexOf(d.id) > -1
                    ? false
                    : _.getFirstDefined(d.show, true)); });
                return __assign(__assign({}, column), { columns: visibleSubColumns });
            }
            return column;
        });
        visibleColumns = visibleColumns.filter(function (column) { return (column.columns
            ? column.columns.length
            : pivotBy.indexOf(column.id) > -1
                ? false
                : _.getFirstDefined(column.show, true)); });
        // Find any custom pivot location
        var pivotIndex = visibleColumns.findIndex(function (col) { return col.pivot; });
        // Handle Pivot Columns
        if (pivotBy.length) {
            // Retrieve the pivot columns in the correct pivot order
            var pivotColumns_1 = [];
            pivotBy.forEach(function (pivotID) {
                var found = allDecoratedColumns.find(function (d) { return d.id === pivotID; });
                if (found) {
                    pivotColumns_1.push(found);
                }
            });
            var PivotParentColumn = pivotColumns_1.reduce(function (prev, current) { return prev && prev === current.parentColumn && current.parentColumn; }, pivotColumns_1[0].parentColumn);
            var PivotGroupHeader = hasHeaderGroups && (PivotParentColumn ? PivotParentColumn.Header
                : (pivotColumns_1[0].PivotHeader || pivotColumns_1[0].Header));
            var pivotColumnGroup = {
                Header: PivotGroupHeader,
                columns: pivotColumns_1.map(function (col) { return (__assign(__assign(__assign({}, props.pivotDefaults), col), { pivoted: true })); }),
            };
            // Place the pivotColumns back into the visibleColumns
            if (pivotIndex >= 0) {
                pivotColumnGroup = __assign(__assign({}, visibleColumns[pivotIndex]), pivotColumnGroup);
                visibleColumns.splice(pivotIndex, 1, pivotColumnGroup);
            }
            else {
                visibleColumns.unshift(pivotColumnGroup);
            }
        }
        // Build Header Groups
        var headerGroups = [];
        var currentSpan = [];
        // A convenience function to add a header and reset the currentSpan
        var addHeader = function (columns, column) {
            headerGroups.push(__assign(__assign(__assign({}, props.column), column), { columns: columns }));
            currentSpan = [];
        };
        // Build flast list of allVisibleColumns and HeaderGroups
        visibleColumns.forEach(function (column) {
            if (column.columns) {
                allVisibleColumns = allVisibleColumns.concat(column.columns);
                if (currentSpan.length > 0) {
                    addHeader(currentSpan);
                }
                addHeader(column.columns, column);
                return;
            }
            allVisibleColumns.push(column);
            currentSpan.push(column);
        });
        if (hasHeaderGroups && currentSpan.length > 0) {
            addHeader(currentSpan);
        }
        // Access the data
        var accessRow = function (d, i, level) {
            var _a;
            if (level === void 0) { level = 0; }
            var row = (_a = {},
                _a[originalKey] = d,
                _a[indexKey] = i,
                _a[subRowsKey] = d[subRowsKey],
                _a[nestingLevelKey] = level,
                _a);
            allDecoratedColumns.forEach(function (column) {
                if (column.expander)
                    return;
                row[column.id] = column.accessor(d);
            });
            if (row[subRowsKey]) {
                row[subRowsKey] = row[subRowsKey].map(function (d, i) { return accessRow(d, i, level + 1); });
            }
            return row;
        };
        var resolvedData = data.map(function (d, i) { return accessRow(d, i); });
        var aggregatingColumns = allVisibleColumns.filter(function (d) { return !d.expander && d.aggregate; });
        // If pivoting, recursively group the data
        var aggregate = function (rows) {
            var aggregationValues = {};
            aggregatingColumns.forEach(function (column) {
                var values = rows.map(function (d) { return d[column.id]; });
                aggregationValues[column.id] = column.aggregate(values, rows);
            });
            return aggregationValues;
        };
        if (pivotBy.length) {
            var groupRecursively_1 = function (rows, keys, i) {
                if (i === void 0) { i = 0; }
                // This is the last level, just return the rows
                if (i === keys.length) {
                    return rows;
                }
                // Group the rows together for this level
                var groupedRows = Object.entries(_.groupBy(rows, keys[i])).map(function (_a) {
                    var _b;
                    var key = _a[0], value = _a[1];
                    return (_b = {},
                        _b[pivotIDKey] = keys[i],
                        _b[pivotValKey] = key,
                        _b[keys[i]] = key,
                        _b[subRowsKey] = value,
                        _b[nestingLevelKey] = i,
                        _b[groupedByPivotKey] = true,
                        _b);
                });
                // Recurse into the subRows
                groupedRows = groupedRows.map(function (rowGroup) {
                    var _a;
                    var subRows = groupRecursively_1(rowGroup[subRowsKey], keys, i + 1);
                    return __assign(__assign(__assign({}, rowGroup), (_a = {}, _a[subRowsKey] = subRows, _a[aggregatedKey] = true, _a)), aggregate(subRows));
                });
                return groupedRows;
            };
            resolvedData = groupRecursively_1(resolvedData, pivotBy);
        }
        return __assign(__assign({}, newState), { resolvedData: resolvedData,
            allVisibleColumns: allVisibleColumns,
            headerGroups: headerGroups,
            allDecoratedColumns: allDecoratedColumns,
            hasHeaderGroups: hasHeaderGroups });
    };
    ReactTable.getSortedData = function (resolvedState, props) {
        var manual = resolvedState.manual, sorted = resolvedState.sorted, filtered = resolvedState.filtered, defaultFilterMethod = resolvedState.defaultFilterMethod, resolvedData = resolvedState.resolvedData, allVisibleColumns = resolvedState.allVisibleColumns, allDecoratedColumns = resolvedState.allDecoratedColumns;
        var sortMethodsByColumnID = {};
        allDecoratedColumns.filter(function (col) { return col.sortMethod; }).forEach(function (col) {
            sortMethodsByColumnID[col.id] = col.sortMethod;
        });
        // Resolve the data from either manual data or sorted data
        return {
            sortedData: manual
                ? resolvedData
                : ReactTable.sortData(ReactTable.filterData(resolvedData, filtered, defaultFilterMethod, allVisibleColumns, props), sorted, sortMethodsByColumnID, props),
        };
    };
    ReactTable.filterData = function (data, filtered, defaultFilterMethod, allVisibleColumns, props) {
        var filteredData = data;
        if (filtered.length) {
            filteredData = filtered.reduce(function (filteredSoFar, nextFilter) {
                var column = allVisibleColumns.find(function (x) { return x.id === nextFilter.id; });
                // Don't filter hidden columns or columns that have had their filters disabled
                if (!column || column.filterable === false) {
                    return filteredSoFar;
                }
                var filterMethod = column.filterMethod || defaultFilterMethod;
                // If 'filterAll' is set to true, pass the entire dataset to the filter method
                if (column.filterAll) {
                    return filterMethod(nextFilter, filteredSoFar, column);
                }
                return filteredSoFar.filter(function (row) { return (filterMethod(nextFilter, row, column)); });
            }, filteredData);
            // Apply the filter to the subrows if we are pivoting, and then
            // filter any rows without subcolumns because it would be strange to show
            filteredData = filteredData
                .map(function (row) {
                var _a;
                if (!row[props.subRowsKey]) {
                    return row;
                }
                return __assign(__assign({}, row), (_a = {}, _a[props.subRowsKey] = ReactTable.filterData(row[props.subRowsKey], filtered, defaultFilterMethod, allVisibleColumns, props), _a));
            })
                .filter(function (row) {
                if (!row[props.subRowsKey]) {
                    return true;
                }
                return row[props.subRowsKey].length > 0;
            });
        }
        return filteredData;
    };
    ReactTable.sortData = function (data, sorted, sortMethodsByColumnID, props) {
        if (sortMethodsByColumnID === void 0) { sortMethodsByColumnID = {}; }
        if (!sorted.length) {
            return data;
        }
        var sortedData = _.orderBy(data, sorted.map(function (sort) {
            // Support custom sorting methods for each column
            if (sortMethodsByColumnID[sort.id]) {
                return function (a, b) { return (sortMethodsByColumnID[sort.id](a[sort.id], b[sort.id], sort.desc)); };
            }
            return function (a, b) { return (props.defaultSortMethod(a[sort.id], b[sort.id], sort.desc)); };
        }), sorted.map(function (d) { return !d.desc; }), props.indexKey);
        sortedData.forEach(function (row) {
            if (!row[props.subRowsKey]) {
                return;
            }
            row[props.subRowsKey] = ReactTable.sortData(row[props.subRowsKey], sorted, sortMethodsByColumnID, props);
        });
        return sortedData;
    };
    return ReactTable;
}(Component));

var StyledPagingTable = styled(ReactTable)(templateObject_1$b || (templateObject_1$b = __makeTemplateObject(["\n  max-width: 100%;\n  width: 100%;\n  overflow: hidden;\n"], ["\n  max-width: 100%;\n  width: 100%;\n  overflow: hidden;\n"])));
var templateObject_1$b;

var responsiveColumns = function (size, columns) { return (Array.isArray(columns)
    ? columns.map(function (column) {
        if (size === undefined) {
            return column;
        }
        var show = column.show;
        if (column.responsiveShow) {
            var sizes = Array.isArray(column.responsiveShow)
                ? column.responsiveShow : [column.responsiveShow];
            if (sizes.indexOf(size) !== -1) {
                show = true;
            }
        }
        if (column.responsiveHide) {
            var sizes = Array.isArray(column.responsiveHide)
                ? column.responsiveHide : [column.responsiveHide];
            if (sizes.indexOf(size) !== -1) {
                show = false;
            }
        }
        if (show === undefined) {
            return column;
        }
        return __assign(__assign({}, column), { show: show });
    }) : columns); };
/**
 * Table component with pagination, filtering, footer, child rows and grouping<br/>
 * Derived from https://github.com/react-tools/react-table<br/>
 * `import { PagingTable } from 'grommet-controls';`<br/>
 * `<PagingTable columns={...} data={...} />`<br/>
 */
var PagingTable = function (_a) {
    var data = _a.data, columns = _a.columns, rest = __rest(_a, ["data", "columns"]);
    var defaults = {
        showPagination: (rest.onFetchData !== undefined)
            || (data && data.length > (rest.defaultPageSize || 20)),
        minRows: data && data.length < (rest.defaultPageSize || 20) ? 0 : undefined,
    };
    var newProps = __assign(__assign({}, defaults), rest);
    return (React.createElement(ResponsiveContext.Consumer, null, function (size) { return (React.createElement(ThemeContext.Consumer, null, function (theme) { return (React.createElement(StyledPagingTable, __assign({ data: data || [], columns: responsiveColumns(size, columns), theme: theme }, newProps))); })); }));
};
PagingTable.defaultProps = {
    defaultPageSize: 20,
    filterable: false,
    loading: false,
    manual: false,
    resizable: true,
    showPagination: true,
    sortable: true,
};

/**
 * A Select field with form validation<br/>
 */
var SelectField = function (props) { return (React.createElement(WithFormField, __assign({}, props), function (_a) {
    var options = _a.options, rest = __rest(_a, ["options"]);
    return (React.createElement(Select, __assign({ options: options }, rest)));
})); };

/** Collapsible side bar component
 * ```$ npm install grommet-controls
 * import { Sidebar } from 'grommet-controls';
 * <Sidebar title='My title'>
       ...
 * </Sidebar>
 * ```
 */
var Sidebar = function (_a) {
    var title = _a.title, width = _a.width, children = _a.children, collapsible = _a.collapsible, rest = __rest(_a, ["title", "width", "children", "collapsible"]);
    var _b = React.useState(undefined), collapsed = _b[0], setCollapsed = _b[1];
    var BtnToggle = function (_a) {
        var view = _a.view;
        return (collapsible ? React.createElement(Button, { icon: React.createElement(Menu, null), onClick: function () { return setCollapsed(view !== 'collapsed'); } }) : null);
    };
    return (React.createElement(ResponsiveContext.Consumer, null, function (size) { return ((collapsible && size === 'small' && collapsed === undefined) || collapsed === true ? (React.createElement(Box, { align: 'start' },
        React.createElement(BtnToggle, { view: 'collapsed' }))) : (React.createElement(Box, __assign({ width: width }, rest),
        React.createElement(Box, { pad: { bottom: 'small' }, gap: 'small', direction: 'row', align: 'center' },
            React.createElement(BtnToggle, { view: 'expanded' }),
            title && (React.createElement(Box, { flex: false, tag: 'header' }, typeof title === 'string'
                ? (React.createElement(Heading, { margin: 'none', level: 3 }, title))
                : title))),
        children))); }));
};
Sidebar.defaultProps = {
    title: undefined,
    width: 'medium',
    collapsible: true,
};

var disabledStyle = "\n  opacity: 0.4;\n  cursor: default;\n";
var StyledIcon = styled.span(templateObject_1$c || (templateObject_1$c = __makeTemplateObject(["\n  display: inline-block;\n  > * {\n    vertical-align: bottom;\n  }\n  ", "\n"], ["\n  display: inline-block;\n  > * {\n    vertical-align: bottom;\n  }\n  ", "\n"])), function (props) { return !props.disabled && 'cursor: pointer;'; });
var StyledTag = styled(Box)(templateObject_2$5 || (templateObject_2$5 = __makeTemplateObject(["\n  ", "\n  ", "\n  user-select: none;\n  ", "\n"], ["\n  ", "\n  ", "\n  user-select: none;\n  ", "\n"])), function (props) { return backgroundStyle(props.background || 'brand', props.theme); }, function (props) { return props.onClick && 'cursor: pointer;'; }, function (props) { return props.disabled && disabledStyle; });
var templateObject_1$c, templateObject_2$5;

/**
 * A tag control with a label and icon<br/>
 * `import { Tag } from 'grommet-controls';`<br/>
 * `<Tag label={...} icon={...} />`<br/>
 */
var Tag = React.forwardRef(function (_a, ref) {
    var disabled = _a.disabled, label = _a.label, a11yTitle = _a.a11yTitle, reverse = _a.reverse, background = _a.background, onClick = _a.onClick, onChange = _a.onChange, icon = _a.icon, color = _a.color, focusable = _a.focusable, round = _a.round, size = _a.size, truncate = _a.truncate, rest = __rest(_a, ["disabled", "label", "a11yTitle", "reverse", "background", "onClick", "onChange", "icon", "color", "focusable", "round", "size", "truncate"]);
    var clickTag = function (e) {
        if (!disabled && onClick) {
            onClick(e);
        }
        e.preventDefault();
        e.stopPropagation();
    };
    var toggleTag = function (e) {
        if (!disabled && onChange) {
            e.preventDefault();
            e.stopPropagation();
            onChange(e);
        }
    };
    var tagRound = round;
    var canFocus = focusable && !disabled && !!(onClick || onChange);
    return (React.createElement(Keyboard, { onEnter: clickTag, onSpace: toggleTag },
        React.createElement(ThemeContext.Consumer, null, function (theme) {
            var closeIcon;
            if (icon || onChange) {
                closeIcon = (React.createElement(StyledIcon, { theme: theme, disabled: disabled, onClick: onChange }, icon || React.createElement(FormClose, { theme: theme })));
            }
            return (React.createElement(StyledTag, __assign({ ref: ref, direction: reverse ? 'row-reverse' : 'row', justify: 'between', align: 'center', a11yTitle: a11yTitle, round: tagRound, onClick: onClick && clickTag, role: 'checkbox', "aria-checked": true, tabIndex: canFocus ? 0 : undefined, background: background, disabled: disabled, theme: theme }, rest),
                reverse && closeIcon,
                React.isValidElement(label) ? label : (React.createElement(Text, { color: color, size: size, truncate: truncate }, label && label.toString())),
                !reverse && closeIcon));
        })));
});
Tag.defaultProps = {
    label: 'Text',
    pad: { horizontal: 'xsmall' },
    focusable: true,
};

var TagsSelect = function (props) {
    var _a = props || { tagProps: {} }, tagProps = _a.tagProps, rest = __rest(_a, ["tagProps"]);
    return function (_a) {
        var placeholder = _a.placeholder, value = _a.value, onChange = _a.onChange;
        return (React.createElement(Tags, __assign({ focusable: false, placeholder: placeholder, value: value, onChange: onChange, tagProps: __assign(__assign({}, tagProps), { onClick: function (e) { return e.stopPropagation(); } }) }, rest)));
    };
};
/**
 * A list of tags that can be removed<b/>
 * `import { Tags } from 'grommet-controls';`<b/>
 * `<Tags />`<b/>
 */
var Tags = /** @class */ (function (_super) {
    __extends(Tags, _super);
    function Tags() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            selectedTagIndex: -1,
        };
        _this.tagRefs = [];
        _this.elementRef = React.createRef();
        _this.selectTag = function (selected) {
            var _a = _this.props, onChange = _a.onChange, value = _a.value;
            if (onChange) {
                var tags = selected;
                if (Array.isArray(value)) {
                    var index = value.indexOf(tags);
                    if (index !== -1) {
                        tags = value.filter(function (item) { return item !== selected; });
                    }
                    else {
                        tags = __spreadArrays(value, [tags]);
                    }
                }
                else {
                    tags = [tags];
                }
                onChange({ target: findDOMNode(_this.elementRef.current), option: selected, value: tags });
            }
        };
        _this.onNextTag = function (event) {
            var value = _this.props.value;
            var selectedTagIndex = _this.state.selectedTagIndex;
            event.preventDefault();
            var index = selectedTagIndex + 1;
            if (index >= value.length) {
                index = 0;
            }
            _this.focusTag(index);
        };
        _this.onPreviousTag = function (event) {
            var selectedTagIndex = _this.state.selectedTagIndex;
            var value = _this.props.value;
            event.preventDefault();
            var index = selectedTagIndex - 1;
            if (index < 0) {
                index = value.length - 1;
            }
            _this.focusTag(index);
        };
        _this.onSelectTag = function (event) {
            var value = _this.props.value;
            var selectedTagIndex = _this.state.selectedTagIndex;
            if (selectedTagIndex >= 0 && selectedTagIndex < value.length) {
                event.preventDefault(); // prevent submitting forms
                event.stopPropagation();
                _this.selectTag(value[selectedTagIndex]);
            }
        };
        _this.onCloseClick = function (e, tag) {
            e.stopPropagation();
            _this.selectTag(tag);
        };
        return _this;
    }
    Tags.prototype.focusTag = function (index) {
        if (index >= 0 && index < this.tagRefs.length) {
            var tagElement = findDOMNode(this.tagRefs[index].current);
            if (tagElement && typeof tagElement.focus === 'function') {
                tagElement.focus();
            }
            this.setState({ selectedTagIndex: index });
        }
    };
    Tags.prototype.render = function () {
        var _this = this;
        var _a = this.props, placeholder = _a.placeholder, children = _a.children, value = _a.value, onChange = _a.onChange, focusable = _a.focusable, onClick = _a.onClick, direction = _a.direction, icon = _a.icon, tagProps = _a.tagProps, rest = __rest(_a, ["placeholder", "children", "value", "onChange", "focusable", "onClick", "direction", "icon", "tagProps"]);
        var noValues;
        if ((!value || (Array.isArray(value) && value.length === 0))) {
            noValues = React.isValidElement(placeholder) ? placeholder : (
            // placeholder. minimum height of icon to keep size
            React.createElement(Text, { color: 'placeholder', style: { minHeight: '24px' } }, placeholder || 'No selection'));
        }
        var values;
        if (Array.isArray(value)) {
            values = value;
        }
        else {
            values = value ? [value] : [];
        }
        return (React.createElement(Keyboard, { onEnter: this.onSelectTag, onSpace: this.onSelectTag, onLeft: this.onPreviousTag, onRight: this.onNextTag },
            React.createElement(Box, __assign({ tabIndex: focusable ? 0 : undefined, ref: this.elementRef, direction: direction, overflow: 'auto', style: { minWidth: 'auto' } }, rest), noValues || values.map(function (tag, index) {
                if (children) {
                    return children(tag, index, value);
                }
                if (!_this.tagRefs[index]) {
                    _this.tagRefs[index] = React.createRef();
                }
                return (React.createElement(Tag, __assign({ key: "tag_" + tag + "_" + index, ariaChecked: true, a11yTitle: "Remove " + tag.toString(), label: typeof tag !== 'object' ? tag.toString() : undefined, ref: _this.tagRefs[index], onClick: onClick ? function (e) { return onClick(e, tag); } : undefined, onChange: onChange ? function (e) { return _this.onCloseClick(e, tag); } : undefined, icon: icon }, (typeof tag === 'object' ? __assign(__assign({}, tagProps), tag) : tagProps))));
            }))));
    };
    Tags.defaultProps = {
        pad: 'small',
        focusable: true,
        margin: { horizontal: 'xsmall', vertical: 'small' },
        value: [],
        gap: 'xsmall',
        direction: 'row-responsive',
        icon: React.createElement(FormClose, null),
    };
    return Tags;
}(Component));

/**
 * A TextArea field with form validation<br/>
 */
var TextAreaField = function (props) { return (React.createElement(WithFormField, __assign({}, props), function (childProps) { return React.createElement(TextArea, __assign({}, childProps)); })); };

/**
 * A TextInput field with form validation<br/>
 */
var TextInputField = function (props) { return (React.createElement(WithFormField, __assign({}, props), function (childProps) { return React.createElement(TextInput, __assign({}, childProps)); })); };

var aqua$1 = '#00ffff';
var azure = '#f0ffff';
var beige = '#f5f5dc';
var black$1 = '#000000';
var blue$2 = '#0000ff';
var brown$1 = '#a52a2a';
var cyan$1 = '#00ffff';
var darkblue = '#00008b';
var darkcyan = '#008b8b';
var darkgrey = '#a9a9a9';
var darkgreen = '#006400';
var darkkhaki = '#bdb76b';
var darkmagenta = '#8b008b';
var darkolivegreen = '#556b2f';
var darkorange = '#ff8c00';
var darkorchid = '#9932cc';
var darkred = '#8b0000';
var darksalmon = '#e9967a';
var darkviolet = '#9400d3';
var fuchsia$1 = '#ff00ff';
var gold = '#ffd700';
var green$2 = '#008000';
var indigo$1 = '#4b0082';
var khaki = '#f0e68c';
var lightblue = '#add8e6';
var lightcyan = '#e0ffff';
var lightgreen = '#90ee90';
var lightgrey = '#d3d3d3';
var lightpink = '#ffb6c1';
var lightyellow = '#ffffe0';
var lime$2 = '#00ff00';
var magenta = '#ff00ff';
var maroon$1 = '#800000';
var navy$1 = '#000080';
var olive$1 = '#808000';
var orange$1 = '#ffa500';
var pink$1 = '#ffc0cb';
var purple$2 = '#800080';
var violet = '#800080';
var red$1 = '#ff0000';
var silver$1 = '#c0c0c0';
var white$1 = '#ffffff';
var yellow$2 = '#ffff00';
var uiColors = {
    aqua: aqua$1,
    azure: azure,
    beige: beige,
    black: black$1,
    blue: blue$2,
    brown: brown$1,
    cyan: cyan$1,
    darkblue: darkblue,
    darkcyan: darkcyan,
    darkgrey: darkgrey,
    darkgreen: darkgreen,
    darkkhaki: darkkhaki,
    darkmagenta: darkmagenta,
    darkolivegreen: darkolivegreen,
    darkorange: darkorange,
    darkorchid: darkorchid,
    darkred: darkred,
    darksalmon: darksalmon,
    darkviolet: darkviolet,
    fuchsia: fuchsia$1,
    gold: gold,
    green: green$2,
    indigo: indigo$1,
    khaki: khaki,
    lightblue: lightblue,
    lightcyan: lightcyan,
    lightgreen: lightgreen,
    lightgrey: lightgrey,
    lightpink: lightpink,
    lightyellow: lightyellow,
    lime: lime$2,
    magenta: magenta,
    maroon: maroon$1,
    navy: navy$1,
    olive: olive$1,
    orange: orange$1,
    pink: pink$1,
    purple: purple$2,
    violet: violet,
    red: red$1,
    silver: silver$1,
    white: white$1,
    yellow: yellow$2,
};

var isExisty = function (value) { return (value !== null && value !== undefined); };
var isEmpty = function (value) { return (value === ''); };
var isDefaultRequiredValue = function (_values, value) { return (value === undefined || value === ''); };
var required = function (_values, value) { return (isExisty(value) && !isEmpty(value)); };
var matchRegexp = function (_values, value, regexp) { return (!isExisty(value) || isEmpty(value) || regexp.test(value)); };
var notEmptyString = function (_values, value) { return (!isEmpty(value)); };
var isEmail = function (values, value) { return (matchRegexp(values, value, /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i)); };
var isUrl = function (values, value) { return (matchRegexp(values, value, /^(https?|s?ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!&',;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!&',;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!&',;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!&',;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!&',;=]|:|@)|\/|\?)*)?$/i)); };
var isTrue = function (_values, value) { return (value === true); };
var isFalse = function (_values, value) { return (value === false); };
var isNumeric = function (values, value) { return (typeof value === 'number' ? true : matchRegexp(values, value, /^[-+]?(?:\d*[.])?\d+$/)); };
var isAlpha = function (values, value) { return (matchRegexp(values, value, /^[A-Z]+$/i)); };
var isAlphanumeric = function (values, value) { return (matchRegexp(values, value, /^[0-9A-Z]+$/i)); };
var isInt = function (values, value) { return (matchRegexp(values, value, /^(?:[-+]?(?:0|[1-9]\d*))$/)); };
var isFloat = function (values, value) { return (matchRegexp(values, value, /^(?:[-+]?(?:\d+))?(?:\.\d*)?(?:[eE]?(?:\d+))?$/)); };
var isWords = function (values, value) { return (matchRegexp(values, value, /^[A-Z\s]+$/i)); };
var startsWith = function (str) { return function (_values, value) { return (!isEmpty(value) && value.startsWith(str)); }; };
var isLength = function (length) { return (function (_values, value) { return !isExisty(value) || isEmpty(value) || value.length === length; }); };
var equals = function (eql) { return (function (_values, value) { return !isExisty(value) || isEmpty(value) || value === eql; }); };
var equalsField = function (field) { return (function (values, value) { return value === values[field]; }); };
var maxLength = function (length) { return (function (_values, value) { return !isExisty(value) || value.length <= length; }); };
var minLength = function (length) { return (function (_values, value) { return !isExisty(value) || isEmpty(value) || value.length >= length; }); };
var isBigger = function (number) { return (function (_values, value) { return !isExisty(value) || value > number; }); };
var isSmaller = function (number) { return (function (_values, value) { return !isExisty(value) || value < number; }); };
var isBiggerOrEqual = function (number) { return (function (_values, value) { return !isExisty(value) || value >= number; }); };
var isSmallerOrEqual = function (number) { return (function (_values, value) { return !isExisty(value) || value <= number; }); };
var invalidFieldMessage = function (label) { return (label + " is not valid"); };
var requiredFieldMessage = function (label) { return (label + " is required"); };
var canNotBeEmptyFieldMessage = function (label) { return (label + " can not be empty"); };
var ruleWrapper = function (rule, customMessage, defaultMessage) { return function (dataRow, value, index) {
    if (rule(dataRow, value, index)) {
        return undefined;
    }
    return customMessage || defaultMessage;
}; };
var validators = {
    required: function (message) { return ruleWrapper(required, message, requiredFieldMessage); },
    email: function (message) { return ruleWrapper(isEmail, message, invalidFieldMessage); },
    url: function (message) { return ruleWrapper(isUrl, message, invalidFieldMessage); },
    defaultRequired: function (message) { return (ruleWrapper(isDefaultRequiredValue, message, requiredFieldMessage)); },
    notEmptyString: function (message) { return (ruleWrapper(notEmptyString, message, canNotBeEmptyFieldMessage)); },
    numeric: function (message) { return (ruleWrapper(isNumeric, message, function (label) { return label + " must be a numeric value"; })); },
    alpha: function (message) { return (ruleWrapper(isAlpha, message, function (label) { return label + " must be alphabetic"; })); },
    alphaNumeric: function (message) { return (ruleWrapper(isAlphanumeric, message, function (label) { return label + " must be alphanumeric"; })); },
    int: function (message) { return (ruleWrapper(isInt, message, function (label) { return label + " must be an integer"; })); },
    float: function (message) { return (ruleWrapper(isFloat, message, function (label) { return label + " must be a number"; })); },
    words: function (message) { return (ruleWrapper(isWords, message, function (label) { return label + " must be a collection of words"; })); },
    length: function (length, message) { return (ruleWrapper(isLength(length), message, function (label) { return label + " must be " + length + " characters long"; })); },
    minLength: function (length, message) { return (ruleWrapper(minLength(length), message, function (label) { return label + " must be at least " + length + " characters long"; })); },
    maxLength: function (length, message) { return (ruleWrapper(maxLength(length), message, function (label) { return label + " must be up to " + length + " characters long"; })); },
    equals: function (value, message) { return (ruleWrapper(equals(value), message, function (label) { return label + " must be equal to " + value; })); },
    equalsField: function (field, fieldLabel, message) { return (ruleWrapper(equalsField(field), message, function (label) { return label + " does not match " + (fieldLabel || field); })); },
    True: function (message) { return (ruleWrapper(isTrue, message, function (label) { return label + " must be True"; })); },
    False: function (message) { return (ruleWrapper(isFalse, message, function (label) { return label + " must be False"; })); },
    bigger: function (value, message) { return (ruleWrapper(isBigger(value), message, function (label) { return label + " must be bigger than " + value; })); },
    biggerOrEqual: function (value, message) { return (ruleWrapper(isBiggerOrEqual(value), message, function (label) { return label + " must be bigger or eqial to " + value; })); },
    smaller: function (value, message) { return (ruleWrapper(isSmaller(value), message, function (label) { return label + " must be smaller than " + value; })); },
    smallerOrEqual: function (value, message) { return (ruleWrapper(isSmallerOrEqual(value), message, function (label) { return label + " must be smaller or equal to " + value; })); },
    startsWith: function (value, message) { return (ruleWrapper(startsWith(value), message, function (label) { return label + " must start with " + value; })); },
};

var LABEL_SIZE_MAP = {
    xsmall: 'xsmall',
    small: 'xsmall',
    medium: 'xsmall',
    large: 'small',
    xlarge: 'medium',
    xxlarge: 'large',
};
/**
 * A single value visualization with a label<br/>
 * `import { Value } from 'grommet-controls';`<br/>
 * `<Value value={...} label={...} />`<br/>
 */
var Value = function (_a) {
    var label = _a.label, value = _a.value, size = _a.size, weight = _a.weight, gap = _a.gap, units = _a.units, color = _a.color;
    return (React.createElement(Box, { gap: gap },
        React.isValidElement(value) ? value : (React.createElement(Text, { size: size, weight: weight, color: color }, "" + (value !== undefined ? value : '-') + (units ? " " + units : ''))),
        React.createElement(Box, { alignSelf: 'end' },
            React.createElement(Text, { size: LABEL_SIZE_MAP[size], color: color }, label))));
};
Value.defaultProps = {
    label: undefined,
    value: undefined,
    weight: 'bold',
    gap: 'small',
    size: 'large',
    color: undefined,
};

var isActive = function (active, item) { return (item.id === active.id || item.label === active.label); };
var hasActiveChidlren = function (active, item) {
    if (isActive(active, item)) {
        if (item.items && item.items.find(function (t) { return hasActiveChidlren(active, t); })) {
            return true;
        }
    }
    return false;
};
var getExpandedItems = function (children, active) { return children
    .reduce(function (expandedItems, item) {
    var items = item.items, expanded = item.expanded, id = item.id, label = item.label;
    if (expanded || (active && hasActiveChidlren(active, item))) {
        expandedItems.push(id || label);
    }
    var childrenExpandedItems = [];
    if (items) {
        childrenExpandedItems = getExpandedItems(items, active);
    }
    return expandedItems.concat(childrenExpandedItems);
}, []); };
var getCollapsibleItems = function (children) { return children
    .reduce(function (collapsibleItems, _a) {
    var items = _a.items, id = _a.id, label = _a.label;
    var childrenCollapsibleItems = [];
    if (items) {
        collapsibleItems.push(id || label);
        childrenCollapsibleItems = getCollapsibleItems(items);
    }
    return collapsibleItems.concat(childrenCollapsibleItems);
}, []); };
var getFlatChildrenIds = function (children) { return children
    .reduce(function (flatChildren, item) {
    flatChildren.push(item.id || item.label);
    if (item.items) {
        // eslint-disable-next-line no-param-reassign
        flatChildren = flatChildren.concat(getFlatChildrenIds(item.items));
    }
    return flatChildren;
}, []); };
var getChildrenById = function (children, id) {
    var items;
    children.some(function (item) {
        if (item.id === id || item.label === id) {
            (items = item.items);
            return true;
        }
        if (item.items) {
            items = getChildrenById(item.items, id);
            if (items) {
                return true;
            }
        }
        return false;
    });
    return items;
};
var filterItems = function (items, search) {
    if (search && search.length) {
        var searchLC_1 = search.toLowerCase();
        return items.map(function (item) { return Object.assign({}, item); }).filter(function (item) {
            var children = item.items, label = item.label;
            if (typeof label === 'string' && label.toLowerCase().indexOf(searchLC_1) >= 0) {
                return true;
            }
            if (children) {
                var childItems = filterItems(children, search);
                // eslint-disable-next-line no-param-reassign
                item.items = childItems;
                if (childItems.length) {
                    return true;
                }
            }
            return false;
        });
    }
    return items;
};
var compareItems = function (items, nextItems) {
    if (!items && !nextItems) {
        return true;
    }
    if (!items && nextItems || items && !nextItems) {
        return false;
    }
    if (items.length !== nextItems.length) {
        return false;
    }
    for (var i = 0; i < items.length; i += 1) {
        if (items[i].expanded !== nextItems[i].expanded
            || items[i].href !== nextItems[i].href
            || items[i].icon !== nextItems[i].icon
            || items[i].label !== nextItems[i].label
            || items[i].onClick !== nextItems[i].onClick
            || items[i].widget !== nextItems[i].widget
            || !compareItems(items[i].items, nextItems[i].items)) {
            return false;
        }
    }
    return true;
};
/** Hierarchical collapsible menu
* ```$ npm install grommet-controls\n
* import { VerticalMenu } from 'grommet-controls';\n
* <VerticalMenu items={...} onSelect={...} />
*```
*/
var VerticalMenu = /** @class */ (function (_super) {
    __extends(VerticalMenu, _super);
    function VerticalMenu() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = { expandedItems: [] };
        _this.onMenuChange = function (id, expanded) {
            var _a = _this.state, expandedItems = _a.expandedItems, filteredItems = _a.filteredItems;
            var newExpandedItems = __spreadArrays(expandedItems);
            if (expanded) {
                var toBeCollapsed_1 = __spreadArrays([
                    id
                ], getFlatChildrenIds(getChildrenById(filteredItems, id)));
                newExpandedItems = newExpandedItems.filter(function (item) { return toBeCollapsed_1.indexOf(item) < 0; });
            }
            else {
                newExpandedItems.push(id);
            }
            _this.setState({
                expandedItems: newExpandedItems,
            });
        };
        _this.renderItem = function (item, level) {
            if (level === void 0) { level = 1; }
            var _a = _this.props, activeItem = _a.activeItem, onSelect = _a.onSelect, buttonClass = _a.buttonClass;
            var expandedItems = _this.state.expandedItems;
            var items = item.items, id = item.id, label = item.label, widget = item.widget, icon = item.icon, rest = __rest(item, ["items", "id", "label", "widget", "icon"]);
            var itemId = id || label;
            var isExpanded = expandedItems.includes(itemId);
            var ButtonClass = (items ? Button : buttonClass) || Button;
            var itemKey = "item_" + itemId + "_" + level;
            var background;
            if (activeItem && activeItem.id === id) {
                background = {
                    color: 'active',
                    opacity: 'strong',
                };
            }
            var content = (React.createElement(Box, { background: background },
                React.createElement(ButtonClass, __assign({ onClick: (!rest.route && !rest.path) ? function () { return (items ? _this.onMenuChange(itemId, isExpanded) : (onSelect && onSelect(item))); } : undefined, hoverIndicator: { color: 'active' } }, rest),
                    React.createElement(Box, { direction: 'row', align: 'center', pad: 'small', style: {
                            marginLeft: items ? 12 * level + "px" : 16 * level + "px",
                        } },
                        items
                            && (isExpanded ? React.createElement(FormDown, null) : React.createElement(FormNext, null)),
                        React.createElement(Box, { direction: 'row', justify: 'between', fill: 'horizontal', align: 'center' },
                            React.createElement(Box, { direction: 'row', align: 'center', gap: 'small' },
                                icon,
                                typeof label === 'string' ? (React.createElement(Text, null, items ? React.createElement("strong", null, label) : label)) : label),
                            widget)))));
            return (React.createElement(Box, { key: itemKey },
                items ? (React.createElement(Keyboard, { onDown: function () { return _this.onMenuChange(itemId, false); }, onRight: function () { return _this.onMenuChange(itemId, false); }, onUp: function () { return _this.onMenuChange(itemId, true); }, onLeft: function () { return _this.onMenuChange(itemId, true); } }, content)) : (content),
                items
                    && (isExpanded && items.map(function (child) { return _this.renderItem(child, level + 1); }))));
        };
        return _this;
    }
    VerticalMenu.getDerivedStateFromProps = function (nextProps, prevState) {
        if (prevState === void 0) { prevState = {}; }
        var items = nextProps.items, expandAll = nextProps.expandAll, activeItem = nextProps.activeItem, search = nextProps.search;
        var originalExpandAll = prevState.originalExpandAll, stateSearch = prevState.search, _a = prevState.items, stateItems = _a === void 0 ? [] : _a;
        if (items !== stateItems // when instance are not the same we do not need to do a full compare.
            || !compareItems(items, stateItems)
            || expandAll !== originalExpandAll
            || search !== stateSearch) {
            var filteredItems = filterItems(items, search);
            var collapsibleItems = getCollapsibleItems(filteredItems);
            var expandedItems = void 0;
            if (expandAll || (search && search.length)) {
                expandedItems = collapsibleItems;
            }
            else {
                expandedItems = getExpandedItems(filteredItems, activeItem);
            }
            var allExpanded = typeof expandAll !== 'undefined'
                ? expandAll
                : collapsibleItems.length === expandedItems.length;
            return {
                expandedItems: expandedItems,
                items: items,
                filteredItems: filteredItems,
                search: search,
                collapsibleItems: collapsibleItems,
                allExpanded: allExpanded,
                expandAll: expandAll,
                originalExpandAll: expandAll,
            };
        }
        return null;
    };
    VerticalMenu.prototype.render = function () {
        var _this = this;
        var filteredItems = this.state.filteredItems;
        return (React.createElement(React.Fragment, null, filteredItems && filteredItems.map(function (item) { return _this.renderItem(item, 1); })));
    };
    return VerticalMenu;
}(Component));

var colorFromIndex = function (index) {
    var idx = ((index) % 9) + 1;
    return idx <= 4 ? "accent-" + idx : "neutral-" + (idx - 4);
};
var colorForName = function (name, theme) { return theme.global.colors[name] || name; };

var base = {
    box: {
        responsiveBreakpoint: 'small',
    },
    heading: {
        responsiveBreakpoint: 'small',
    },
    layer: {
        responsiveBreakpoint: 'small',
    },
};

/* eslint-disable no-param-reassign */
var colorsFromArray = (function (colors, array, prefix) { return array.forEach(function (color, index) {
    colors[prefix + "-" + (index + 1)] = color;
}); });

var brandColor = '#000000';
var accentColors = ['#FF4081', '#4eadeb', '#56cf98', '#765bba'];
var neutralColors = ['#a4c400', '#006766', '#f3741c', '#8F6C53', '#e82121'];
var backgroundColor = '#5e5e5e';
var colors = {
    'active': {
        light: '#3a82b1',
        dark: '#52b7f9',
    },
    'background': '#444444',
    'brand': brandColor,
    'focus': accentColors[0],
    'control': {
        'dark': '#f8f8f8',
        'light': '#444444',
    },
};
colorsFromArray(colors, accentColors, 'accent');
colorsFromArray(colors, neutralColors, 'neutral');
var black$2 = deepFreeze(deepMerge$1(base, {
    global: {
        colors: colors,
        drop: {
            background: '#444444',
        },
        font: {
            family: "'Inconsolata', monospace",
            size: '16px',
        },
        hover: {
            background: {
                light: '#dddddd',
                dark: '#222222',
            },
            color: {
                light: '#333333',
                dark: '#ffffff',
            },
        },
        control: {
            border: {
                radius: '0px',
            },
        },
    },
    icon: {
        colors: colors,
    },
    anchor: {
        color: {
            light: '#0a466e',
            dark: '#4eadeb',
        },
    },
    button: {
        border: {
            radius: '0px',
        },
        primary: {
            color: {
                light: '#0a466e',
                dark: '#4eadeb',
            },
        },
    },
    checkBox: {
        check: {
            radius: '0px',
        },
        toggle: {
            radius: '0px',
        },
    },
    layer: {
        background: backgroundColor,
    },
    rangeInput: {
        track: {
            color: {
                'dark': '#3a82b1',
                'light': '#52b7f9',
            },
        },
    },
}));

var colors$1 = {
    'background': '#ffffff',
    'brand': '#ffffff',
    'active': {
        light: '#57b457',
        dark: '#52b7f9',
    },
    'control': {
        dark: '#52b7f9',
        light: '#4a984a',
    },
    'focus': '#5ec660',
    'accent-1': '#367bd5',
    'accent-2': '#5ec660',
    'accent-3': '#d4293d',
    'accent-4': '#9C27B0',
    'neutral-1': '#795548',
    'neutral-2': '#CDDC39',
    'neutral-3': '#607D8B',
    'neutral-4': '#9cb6d7',
    'neutral-5': '#FF9800',
};
var baseSpacing = 16;
var light = deepFreeze(deepMerge$1(base, {
    global: {
        breakpoints: {
            small: {
                size: {
                    none: '0',
                    hair: '1px',
                    xxsmall: '2px',
                    xsmall: baseSpacing / 8 + "px",
                    small: baseSpacing / 4 + "px",
                    medium: baseSpacing / 2 + "px",
                    large: baseSpacing + "px",
                    xlarge: baseSpacing * 2 + "px",
                },
            },
        },
        colors: colors$1,
        font: {
            family: "'Montserrat', sans-serif;",
            size: '14px',
        },
        edgeSize: {
            none: '0',
            hair: '1px',
            xxsmall: baseSpacing / 8 + "px",
            xsmall: baseSpacing / 4 + "px",
            small: baseSpacing / 2 + "px",
            medium: baseSpacing + "px",
            large: baseSpacing * 2 + "px",
            xlarge: baseSpacing * 4 + "px",
        },
        hover: {
            background: {
                light: '#c8c8c8',
                dark: '#333333',
            },
            color: {
                light: '#333333',
                dark: '#f8f8f8',
            },
        },
        selected: {
            background: '#635d60',
            color: '#f8f8f8',
        },
    },
    text: {
        xsmall: { size: '10px', height: 1.5 },
        small: { size: '12px', height: 1.43 },
        medium: { size: '14px', height: 1.375 },
        large: { size: '20px', height: 1.167 },
        xlarge: { size: '28px', height: 1.1875 },
        xxlarge: { size: '26px', height: 1.125 },
    },
    heading: {
        font: false,
        weight: 500,
    },
    icon: {
        size: {
            xsmall: '14px',
        },
    },
    button: {
        border: {
            radius: '1px',
            color: {
                dark: '#fbf9ff',
                light: '#28599e',
            },
        },
        // color: { dark: undefined, light: undefined }
        primary: {
            color: {
                dark: '#0093ff',
                light: '#316cbe',
            },
        },
    },
    anchor: {
        textDecoration: 'none',
        fontWeight: 600,
        color: {
            dark: '#f7efff',
            light: '#275596',
        },
    },
    checkBox: {
        border: {
            width: '2px',
        },
        check: {
            radius: '4px',
            thickness: '4px',
        },
    },
    rangeInput: {
        track: {
            color: {
                'dark': '#3a82b1',
                'light': '#52b7f9',
            },
        },
    },
}));

/* eslint-disable no-param-reassign */
var colorsFromObject = (function (colors, obj, prefix) {
    return Object.keys(obj).forEach(function (color) {
        colors[prefix + "-" + color] = obj[color];
    });
});

var brandColor$1 = '#00ABD4';
var accentColors$1 = ['#2AD2C9', '#FFC107', '#9C27B0', '#673AB7'];
var neutralColors$1 = ['#795548', '#009688', '#8BC34A', '#CDDC39', '#FF9800'];
var statusColors = {
    critical: '#FF4081',
    error: '#F44336',
    warning: '#FFEB3B',
    ok: '#4CAF50',
    unknown: '#9E9E9E',
    disabled: '#9E9E9E',
};
var focusColor = accentColors$1[0];
var colors$2 = {
    active: {
        light: '#f50057',
        dark: '#ff4081',
    },
    background: '#ffffff',
    brand: brandColor$1,
    focus: focusColor,
    control: {
        dark: '#ffffff',
        light: '#00ABD4',
    },
};
colorsFromArray(colors$2, accentColors$1, 'accent');
colorsFromArray(colors$2, neutralColors$1, 'neutral');
colorsFromObject(colors$2, statusColors, 'status');
var materiallight = deepFreeze(deepMerge$1(base, {
    global: {
        colors: colors$2,
        drop: {
            background: '#f8f8f8',
            border: {
                width: '0px',
                radius: '0px',
            },
        },
        hover: {
            background: {
                light: '#d5f3ff',
                dark: '#5a5a5a',
            },
            text: {
                light: '#000000',
                dark: '#f8f8f8',
            },
        },
        focus: {
            border: {
                color: '#f50057',
            },
        },
        font: {
            family: '"Roboto", "Helvetica", "Arial", sans-serif',
        },
        control: {
            border: {
                radius: '0px',
            },
        },
    },
    button: {
        border: {
            radius: '0px',
        },
        primary: {
            color: {
                light: '#3f51b5',
                dark: '#7986cb',
            },
        },
    },
    checkBox: {
        check: {
            radius: '0px',
        },
        color: {
            light: brandColor$1,
            dark: '#a7ecff',
        },
        toggle: {
            color: {
                dark: '#bdbdbd',
                light: brandColor$1,
            },
        },
    },
    radioButton: {
        border: {
            color: {
                light: 'rgba(0, 98, 186, 0.5)',
                dark: 'rgba(255, 255, 255, 0.5)',
            },
        },
    },
    anchor: {
        color: {
            light: '#3f51b5',
            dark: '#7986cb',
        },
    },
}));

var brandColor$2 = '#000000';
var backgroundColor$1 = '#444444';
var accentColors$2 = ['#2AD2C9', '#FFC107', '#9C27B0', '#673AB7'];
var neutralColors$2 = ['#795548', '#009688', '#8BC34A', '#CDDC39', '#FF9800'];
var statusColors$1 = {
    critical: '#FF4081',
    error: '#F44336',
    warning: '#FFEB3B',
    ok: '#4CAF50',
    unknown: '#9E9E9E',
    disabled: '#9E9E9E',
};
var focusColor$1 = accentColors$2[0];
var colors$3 = {
    active: {
        light: '#f50057',
        dark: '#ff4081',
    },
    brand: brandColor$2,
    background: backgroundColor$1,
    focus: focusColor$1,
    control: {
        'dark': '#f8f8f8',
        'light': '#444444',
    },
};
colorsFromArray(colors$3, accentColors$2, 'accent');
colorsFromArray(colors$3, neutralColors$2, 'neutral');
colorsFromObject(colors$3, statusColors$1, 'status');
var materialdark = deepFreeze(deepMerge$1(base, {
    global: {
        colors: colors$3,
        drop: {
            background: '#2a2a2a',
        },
        hover: {
            background: {
                light: '#dddddd',
                dark: '#222222',
            },
            text: {
                light: '#000000',
                dark: '#f8f8f8',
            },
        },
        focus: {
            border: {
                color: '#f50057',
            },
        },
        font: {
            family: '"Roboto", "Helvetica", "Arial", sans-serif',
        },
        control: {
            border: {
                radius: '0px',
            },
        },
    },
    button: {
        border: {
            radius: '0px',
        },
        primary: {
            color: {
                light: '#f50057',
                dark: '#ff4081',
            },
        },
    },
    checkBox: {
        check: {
            radius: '0px',
        },
    },
    layer: {
        background: backgroundColor$1,
    },
    anchor: {
        color: {
            light: '#f50057',
            dark: '#ff4081',
        },
    },
}));

var brandColor$3 = '#0072c6';
var accentColors$3 = ['#fa6800', '#128023', '#0050ef', '#d80073'];
var neutralColors$3 = ['#a4c400', '#00aba9', '#BF5A15', '#8F6C53', '#9A1616'];
var colors$4 = {
    'background': '#ffffff',
    'brand': brandColor$3,
    'control': {
        'dark': '#f8f8f8',
        'light': '#444444',
    },
};
colorsFromArray(colors$4, accentColors$3, 'accent');
colorsFromArray(colors$4, neutralColors$3, 'neutral');
var metro = deepFreeze(deepMerge$1(base, {
    global: {
        colors: colors$4,
        drop: {
            background: '#005696',
            border: {
                width: '0px',
                radius: '0px',
            },
        },
        hover: {
            background: {
                light: '#a5cdff',
                dark: '#405063',
            },
            color: {
                light: '#333333',
                dark: '#cccccc',
            },
        },
        focus: {
            border: {
                color: {
                    light: brandColor$3,
                    dark: '#003967',
                },
            },
        },
        font: {
            family: '-apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", "Roboto", "Ubuntu", "Helvetica Neue", sans-serif',
        },
        control: {
            border: {
                radius: '0px',
            },
        },
    },
    button: {
        border: {
            radius: '0px',
        },
        primary: {
            color: {
                light: brandColor$3,
                dark: 'accent-1',
            },
        },
    },
    anchor: {
        color: {
            light: '#0078D4',
            dark: '#ffffff',
        },
    },
    checkBox: {
        border: {
            color: {
                light: 'rgba(0, 98, 186, 0.5)',
                dark: 'rgba(255, 255, 255, 0.5)',
            },
        },
        check: {
            radius: '0px',
        },
        color: {
            light: brandColor$3,
            dark: '#a6cfff',
        },
        toggle: {
            color: {
                dark: '#bdbdbd',
                light: brandColor$3,
            },
            radius: '0px',
        },
    },
    layer: {
        backgroundColor: '#eef3fc',
        border: {
            radius: '0px',
        },
    },
    radioButton: {
        border: {
            color: {
                light: 'rgba(0, 98, 186, 0.5)',
                dark: 'rgba(255, 255, 255, 0.5)',
            },
        },
    },
}));

export { Avatar, Card, CardActions, CardContent, CardTitle, CheckBoxField, ColorInput, ColorInputField, Colors, DateInput, DateInputField, DropInput, EmailInput, EmailInputField, Form, Header, IconButton, ImageStamp, MaskedInput, MaskedInputField, Notification, NumberInput, NumberInputField, PagingTable, PasswordInput, PasswordInputField, SelectField, Sidebar, Spinning, Tag, Tags, TagsSelect, TextAreaField, TextInputField, Value, VerticalMenu, WithFormField, base, basicColors, black$2 as black, colorForName, colorFromIndex, colorsFromArray, colorsFromObject, light, longDate, materialColors, materialdark, materiallight, metro, shortDate, smallDate, uiColors, validators };
