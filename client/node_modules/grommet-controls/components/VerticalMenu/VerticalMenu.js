var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import React, { Component } from 'react';
import { Box, Button, Keyboard, Text, } from 'grommet';
import { FormDown } from 'grommet-icons/icons/FormDown';
import { FormNext } from 'grommet-icons/icons/FormNext';
var isActive = function (active, item) { return (item.id === active.id || item.label === active.label); };
var hasActiveChidlren = function (active, item) {
    if (isActive(active, item)) {
        if (item.items && item.items.find(function (t) { return hasActiveChidlren(active, t); })) {
            return true;
        }
    }
    return false;
};
var getExpandedItems = function (children, active) { return children
    .reduce(function (expandedItems, item) {
    var items = item.items, expanded = item.expanded, id = item.id, label = item.label;
    if (expanded || (active && hasActiveChidlren(active, item))) {
        expandedItems.push(id || label);
    }
    var childrenExpandedItems = [];
    if (items) {
        childrenExpandedItems = getExpandedItems(items, active);
    }
    return expandedItems.concat(childrenExpandedItems);
}, []); };
var getCollapsibleItems = function (children) { return children
    .reduce(function (collapsibleItems, _a) {
    var items = _a.items, id = _a.id, label = _a.label;
    var childrenCollapsibleItems = [];
    if (items) {
        collapsibleItems.push(id || label);
        childrenCollapsibleItems = getCollapsibleItems(items);
    }
    return collapsibleItems.concat(childrenCollapsibleItems);
}, []); };
var getFlatChildrenIds = function (children) { return children
    .reduce(function (flatChildren, item) {
    flatChildren.push(item.id || item.label);
    if (item.items) {
        // eslint-disable-next-line no-param-reassign
        flatChildren = flatChildren.concat(getFlatChildrenIds(item.items));
    }
    return flatChildren;
}, []); };
var getChildrenById = function (children, id) {
    var items;
    children.some(function (item) {
        if (item.id === id || item.label === id) {
            (items = item.items);
            return true;
        }
        if (item.items) {
            items = getChildrenById(item.items, id);
            if (items) {
                return true;
            }
        }
        return false;
    });
    return items;
};
var filterItems = function (items, search) {
    if (search && search.length) {
        var searchLC_1 = search.toLowerCase();
        return items.map(function (item) { return Object.assign({}, item); }).filter(function (item) {
            var children = item.items, label = item.label;
            if (typeof label === 'string' && label.toLowerCase().indexOf(searchLC_1) >= 0) {
                return true;
            }
            if (children) {
                var childItems = filterItems(children, search);
                // eslint-disable-next-line no-param-reassign
                item.items = childItems;
                if (childItems.length) {
                    return true;
                }
            }
            return false;
        });
    }
    return items;
};
var compareItems = function (items, nextItems) {
    if (!items && !nextItems) {
        return true;
    }
    if (!items && nextItems || items && !nextItems) {
        return false;
    }
    if (items.length !== nextItems.length) {
        return false;
    }
    for (var i = 0; i < items.length; i += 1) {
        if (items[i].expanded !== nextItems[i].expanded
            || items[i].href !== nextItems[i].href
            || items[i].icon !== nextItems[i].icon
            || items[i].label !== nextItems[i].label
            || items[i].onClick !== nextItems[i].onClick
            || items[i].widget !== nextItems[i].widget
            || !compareItems(items[i].items, nextItems[i].items)) {
            return false;
        }
    }
    return true;
};
/** Hierarchical collapsible menu
* ```$ npm install grommet-controls\n
* import { VerticalMenu } from 'grommet-controls';\n
* <VerticalMenu items={...} onSelect={...} />
*```
*/
var VerticalMenu = /** @class */ (function (_super) {
    __extends(VerticalMenu, _super);
    function VerticalMenu() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = { expandedItems: [] };
        _this.onMenuChange = function (id, expanded) {
            var _a = _this.state, expandedItems = _a.expandedItems, filteredItems = _a.filteredItems;
            var newExpandedItems = __spreadArrays(expandedItems);
            if (expanded) {
                var toBeCollapsed_1 = __spreadArrays([
                    id
                ], getFlatChildrenIds(getChildrenById(filteredItems, id)));
                newExpandedItems = newExpandedItems.filter(function (item) { return toBeCollapsed_1.indexOf(item) < 0; });
            }
            else {
                newExpandedItems.push(id);
            }
            _this.setState({
                expandedItems: newExpandedItems,
            });
        };
        _this.renderItem = function (item, level) {
            if (level === void 0) { level = 1; }
            var _a = _this.props, activeItem = _a.activeItem, onSelect = _a.onSelect, buttonClass = _a.buttonClass;
            var expandedItems = _this.state.expandedItems;
            var items = item.items, id = item.id, label = item.label, widget = item.widget, icon = item.icon, rest = __rest(item, ["items", "id", "label", "widget", "icon"]);
            var itemId = id || label;
            var isExpanded = expandedItems.includes(itemId);
            var ButtonClass = (items ? Button : buttonClass) || Button;
            var itemKey = "item_" + itemId + "_" + level;
            var background;
            if (activeItem && activeItem.id === id) {
                background = {
                    color: 'active',
                    opacity: 'strong',
                };
            }
            var content = (React.createElement(Box, { background: background },
                React.createElement(ButtonClass, __assign({ onClick: (!rest.route && !rest.path) ? function () { return (items ? _this.onMenuChange(itemId, isExpanded) : (onSelect && onSelect(item))); } : undefined, hoverIndicator: { color: 'active' } }, rest),
                    React.createElement(Box, { direction: 'row', align: 'center', pad: 'small', style: {
                            marginLeft: items ? 12 * level + "px" : 16 * level + "px",
                        } },
                        items
                            && (isExpanded ? React.createElement(FormDown, null) : React.createElement(FormNext, null)),
                        React.createElement(Box, { direction: 'row', justify: 'between', fill: 'horizontal', align: 'center' },
                            React.createElement(Box, { direction: 'row', align: 'center', gap: 'small' },
                                icon,
                                typeof label === 'string' ? (React.createElement(Text, null, items ? React.createElement("strong", null, label) : label)) : label),
                            widget)))));
            return (React.createElement(Box, { key: itemKey },
                items ? (React.createElement(Keyboard, { onDown: function () { return _this.onMenuChange(itemId, false); }, onRight: function () { return _this.onMenuChange(itemId, false); }, onUp: function () { return _this.onMenuChange(itemId, true); }, onLeft: function () { return _this.onMenuChange(itemId, true); } }, content)) : (content),
                items
                    && (isExpanded && items.map(function (child) { return _this.renderItem(child, level + 1); }))));
        };
        return _this;
    }
    VerticalMenu.getDerivedStateFromProps = function (nextProps, prevState) {
        if (prevState === void 0) { prevState = {}; }
        var items = nextProps.items, expandAll = nextProps.expandAll, activeItem = nextProps.activeItem, search = nextProps.search;
        var originalExpandAll = prevState.originalExpandAll, stateSearch = prevState.search, _a = prevState.items, stateItems = _a === void 0 ? [] : _a;
        if (items !== stateItems // when instance are not the same we do not need to do a full compare.
            || !compareItems(items, stateItems)
            || expandAll !== originalExpandAll
            || search !== stateSearch) {
            var filteredItems = filterItems(items, search);
            var collapsibleItems = getCollapsibleItems(filteredItems);
            var expandedItems = void 0;
            if (expandAll || (search && search.length)) {
                expandedItems = collapsibleItems;
            }
            else {
                expandedItems = getExpandedItems(filteredItems, activeItem);
            }
            var allExpanded = typeof expandAll !== 'undefined'
                ? expandAll
                : collapsibleItems.length === expandedItems.length;
            return {
                expandedItems: expandedItems,
                items: items,
                filteredItems: filteredItems,
                search: search,
                collapsibleItems: collapsibleItems,
                allExpanded: allExpanded,
                expandAll: expandAll,
                originalExpandAll: expandAll,
            };
        }
        return null;
    };
    VerticalMenu.prototype.render = function () {
        var _this = this;
        var filteredItems = this.state.filteredItems;
        return (React.createElement(React.Fragment, null, filteredItems && filteredItems.map(function (item) { return _this.renderItem(item, 1); })));
    };
    return VerticalMenu;
}(Component));
export { VerticalMenu };
