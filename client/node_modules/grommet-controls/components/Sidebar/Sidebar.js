var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { Box, Button, Heading, ResponsiveContext, } from 'grommet';
import { Menu } from 'grommet-icons/icons/Menu';
/** Collapsible side bar component
 * ```$ npm install grommet-controls
 * import { Sidebar } from 'grommet-controls';
 * <Sidebar title='My title'>
       ...
 * </Sidebar>
 * ```
 */
var Sidebar = function (_a) {
    var title = _a.title, width = _a.width, children = _a.children, collapsible = _a.collapsible, rest = __rest(_a, ["title", "width", "children", "collapsible"]);
    var _b = React.useState(undefined), collapsed = _b[0], setCollapsed = _b[1];
    var BtnToggle = function (_a) {
        var view = _a.view;
        return (collapsible ? React.createElement(Button, { icon: React.createElement(Menu, null), onClick: function () { return setCollapsed(view !== 'collapsed'); } }) : null);
    };
    return (React.createElement(ResponsiveContext.Consumer, null, function (size) { return ((collapsible && size === 'small' && collapsed === undefined) || collapsed === true ? (React.createElement(Box, { align: 'start' },
        React.createElement(BtnToggle, { view: 'collapsed' }))) : (React.createElement(Box, __assign({ width: width }, rest),
        React.createElement(Box, { pad: { bottom: 'small' }, gap: 'small', direction: 'row', align: 'center' },
            React.createElement(BtnToggle, { view: 'expanded' }),
            title && (React.createElement(Box, { flex: false, tag: 'header' }, typeof title === 'string'
                ? (React.createElement(Heading, { margin: 'none', level: 3 }, title))
                : title))),
        children))); }));
};
Sidebar.defaultProps = {
    title: undefined,
    width: 'medium',
    collapsible: true,
};
export { Sidebar };
