var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { Component } from 'react';
import { Box, Calendar } from 'grommet';
import { Calendar as CalendarIcon } from 'grommet-icons/icons/Calendar';
import { MaskedInput } from '../MaskedInput';
import { smallDate } from '../../utils/moment';
/**
* A masked date entry field with a drop down calendar<br/>
* All properties of MaskedInput apply<br/>
* `import { DateInput } from 'grommet-controls';`<br/>
* `<DateInput value={...} />`<br/>
*/
var DateInput = /** @class */ (function (_super) {
    __extends(DateInput, _super);
    function DateInput() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.upDateValue = null;
        _this.onSelect = function (isoDate) {
            var date = new Date(isoDate);
            _this.upDateValue(smallDate(date));
        };
        return _this;
    }
    DateInput.prototype.render = function () {
        var _this = this;
        var _a = this.props, value = _a.value, bounds = _a.bounds, dates = _a.dates, disabledDates = _a.disabledDates, autocorrect = _a.autocorrect, firstDayOfWeek = _a.firstDayOfWeek, locale = _a.locale, size = _a.size, userMask = _a.mask, maskFormat = _a.maskFormat, rest = __rest(_a, ["value", "bounds", "dates", "disabledDates", "autocorrect", "firstDayOfWeek", "locale", "size", "mask", "maskFormat"]);
        var mask;
        if (userMask) {
            mask = { mask: userMask };
        }
        else if (autocorrect) {
            mask = {
                mask: [/\d/, /\d/, '/', /\d/, /\d/, '/', /\d/, /\d/, /\d/, /\d/],
                pipe: MaskedInput.createAutoCorrectedDatePipe(maskFormat),
                keepCharPositions: true,
            };
        }
        else {
            mask = { mask: [/\d/, /\d/, '/', /\d/, /\d/, '/', /\d/, /\d/, /\d/, /\d/] };
        }
        var controlledValue = value === undefined ? '' : value;
        return (React.createElement(MaskedInput, __assign({ update: function (update) { _this.upDateValue = update; }, value: controlledValue, dropContent: (React.createElement(Box, { pad: 'small' },
                React.createElement(Calendar, { date: controlledValue.toString(), onSelect: this.onSelect, bounds: bounds, dates: dates, disabled: disabledDates, firstDayOfWeek: firstDayOfWeek, locale: locale, size: size }))) }, __assign(__assign({}, rest), mask))));
    };
    DateInput.defaultProps = {
        dropIcon: React.createElement(CalendarIcon, null),
        size: 'small',
        a11yDropTitle: 'Open calendar',
    };
    return DateInput;
}(Component));
export { DateInput };
