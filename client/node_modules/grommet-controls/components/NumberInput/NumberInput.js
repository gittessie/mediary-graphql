var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { Component } from 'react';
import { Add } from 'grommet-icons/icons/Add';
import { Subtract } from 'grommet-icons/icons/Subtract';
import { MaskedInput } from '../MaskedInput';
var precision = function (n) {
    // eslint-disable-next-line no-restricted-globals
    if (!isFinite(n))
        return 0;
    var e = 1;
    var p = 0;
    while (Math.round(n * e) / e !== n) {
        e *= 10;
        p += 1;
    }
    return p;
};
var minMax = function (_a) {
    var value = _a.value, min = _a.min, max = _a.max;
    var val = value;
    if (min !== undefined) {
        val = Math.max(val, min);
    }
    if (max !== undefined) {
        val = Math.min(val, max);
    }
    return val;
};
/** A masked number input, with widgets to increment/decrement the value<br/>
*  Additionally, all properties of MaskedInput apply<br/>
*  `import { NumberInput } from 'grommet-controls';`<br/>
*  `<NumberInput value={...} />`<br/>
*/
var NumberInput = /** @class */ (function (_super) {
    __extends(NumberInput, _super);
    function NumberInput() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.upDateValue = null;
        _this.value = undefined;
        _this.valueToNumber = function (value) {
            var _a = _this.props, prefix = _a.prefix, suffix = _a.suffix, thousandsSeparatorSymbol = _a.thousandsSeparatorSymbol, decimalSymbol = _a.decimalSymbol;
            return MaskedInput.maskedNumberValue({
                value: value, prefix: prefix, suffix: suffix, thousandsSeparatorSymbol: thousandsSeparatorSymbol, decimalSymbol: decimalSymbol,
            });
        };
        _this.isFloat = function (val) {
            var floatRegex = /^-?\d+(?:[.,]\d*?)?$/;
            if (!floatRegex.test(val.toString())) {
                return false;
            }
            // eslint-disable-next-line no-restricted-globals
            if (isNaN(parseFloat(val.toString()))) {
                return false;
            }
            return true;
        };
        _this.addStep = function () {
            var _a = _this.props, max = _a.max, min = _a.min, step = _a.step, value = _a.value;
            var val = _this.isFloat(value)
                ? (_this.valueToNumber(value) + step).toFixed(precision(step)) : (min || 0);
            if (typeof val === 'number' && Number.isNaN(val)) {
                if (min !== undefined) {
                    val = min;
                }
                else {
                    val = undefined;
                }
            }
            else {
                val = minMax({ value: val, min: min, max: max });
            }
            _this.upDateValue(val.toString());
        };
        _this.subtractStep = function () {
            var _a = _this.props, max = _a.max, min = _a.min, step = _a.step, value = _a.value;
            var val = _this.isFloat(value)
                ? (_this.valueToNumber(value) - step).toFixed(precision(step)) : (max || 0);
            if (typeof val === 'number' && Number.isNaN(val)) {
                if (max !== undefined) {
                    val = max;
                }
                else {
                    val = undefined;
                }
            }
            else {
                val = minMax({ value: val, min: min, max: max });
            }
            _this.upDateValue(val.toString());
        };
        _this.onChange = function (e) {
            var _a = _this.props, onChange = _a.onChange, emptyValue = _a.emptyValue;
            if (onChange) {
                var value = e.target.value;
                if (_this.value !== value) {
                    if (value === undefined) {
                        value = emptyValue;
                    }
                    _this.value = value;
                    onChange(__assign(__assign({}, e), { target: __assign(__assign({}, e.target), { value: value }) }));
                }
            }
        };
        return _this;
    }
    NumberInput.prototype.render = function () {
        var _this = this;
        var _a = this.props, 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        onChange = _a.onChange, min = _a.min, max = _a.max, step = _a.step, userPipe = _a.pipe, prefix = _a.prefix, suffix = _a.suffix, thousandsSeparatorSymbol = _a.thousandsSeparatorSymbol, decimalSymbol = _a.decimalSymbol, decimals = _a.decimals, integers = _a.integers, a11yIncrement = _a.a11yIncrement, a11yDecrement = _a.a11yDecrement, userMask = _a.mask, addIcon = _a.addIcon, subtractIcon = _a.subtractIcon, disabled = _a.disabled, rest = __rest(_a, ["onChange", "min", "max", "step", "pipe", "prefix", "suffix", "thousandsSeparatorSymbol", "decimalSymbol", "decimals", "integers", "a11yIncrement", "a11yDecrement", "mask", "addIcon", "subtractIcon", "disabled"]);
        var allowNegative = typeof min !== 'number' || min < 0;
        var includeThousandsSeparator = !!thousandsSeparatorSymbol;
        var allowDecimal = (decimals === null) || (typeof decimals === 'number' && decimals > 0);
        var mask = userMask || MaskedInput.createNumberMask({
            prefix: prefix,
            suffix: suffix,
            includeThousandsSeparator: includeThousandsSeparator,
            thousandsSeparatorSymbol: thousandsSeparatorSymbol,
            allowDecimal: allowDecimal,
            decimalSymbol: decimalSymbol,
            decimalLimit: decimals,
            integerLimit: integers,
            allowNegative: allowNegative,
        });
        var pipe = userPipe || MaskedInput.createMinMaxInputPipe(__assign({ mask: mask, prefix: prefix, suffix: suffix, thousandsSeparatorSymbol: thousandsSeparatorSymbol, decimalSymbol: decimalSymbol, min: min, max: max }, rest));
        return (React.createElement(MaskedInput, __assign({ update: function (update) { _this.upDateValue = update; }, pattern: '[0-9]*', inputMode: 'numeric', onKeyDown: this.subtractStep, onKeyUp: this.addStep, disabled: disabled, onChange: this.onChange, pipe: pipe, mask: mask, widgets: [
                {
                    'icon': addIcon,
                    'onClick': disabled ? undefined : this.addStep,
                    'aria-label': a11yIncrement + " " + step,
                },
                {
                    'icon': subtractIcon,
                    'onClick': disabled ? undefined : this.subtractStep,
                    'aria-label': a11yDecrement + " " + step,
                },
            ] }, rest)));
    };
    NumberInput.defaultProps = {
        emptyValue: '',
        step: 1,
        addIcon: React.createElement(Add, null),
        subtractIcon: React.createElement(Subtract, null),
        prefix: '',
        suffix: '',
        thousandsSeparatorSymbol: '',
        decimalSymbol: '.',
        decimals: null,
        integers: null,
        a11yIncrement: 'Increment by',
        a11yDecrement: 'Decrement by',
    };
    return NumberInput;
}(Component));
export { NumberInput };
