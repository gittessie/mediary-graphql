import React, { Component, RefObject } from 'react';
import { BoxProps } from 'grommet';
import { ITagsProps } from './TagsProps';
export declare const TagsSelect: (props: ITagsProps) => ({ placeholder, value, onChange }: {
    placeholder: any;
    value: any;
    onChange: any;
}) => JSX.Element;
interface ITagsState {
    selectedTagIndex: number;
}
/**
 * A list of tags that can be removed<b/>
 * `import { Tags } from 'grommet-controls';`<b/>
 * `<Tags />`<b/>
 */
declare class Tags extends Component<ITagsProps & BoxProps, ITagsState> {
    static defaultProps: {
        pad: string;
        focusable: boolean;
        margin: {
            horizontal: string;
            vertical: string;
        };
        value: any[];
        gap: string;
        direction: string;
        icon: JSX.Element;
    };
    state: ITagsState;
    tagRefs: RefObject<HTMLDivElement>[];
    elementRef: React.RefObject<HTMLDivElement>;
    selectTag: (selected: any) => void;
    focusTag(index: any): void;
    onNextTag: (event: any) => void;
    onPreviousTag: (event: any) => void;
    onSelectTag: (event: any) => void;
    onCloseClick: (e: any, tag: any) => void;
    render(): JSX.Element;
}
export { Tags };
