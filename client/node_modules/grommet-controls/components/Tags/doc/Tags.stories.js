var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React from 'react';
import { Box, Button } from 'grommet';
import { FormSubtract, Trash } from 'grommet-icons';
import { action } from '@storybook/addon-actions';
import { Tags } from '../Tags';
export default {
    title: 'CONTROLS/input/Tags',
    component: Tags,
};
var stringOptions = ['small', 'medium', 'large', 'xlarge', 'huge'];
var defaultTags = [stringOptions[0], stringOptions[2]];
var TagsInput = function (props) {
    var _a = React.useState(defaultTags), tags = _a[0], setTags = _a[1];
    var onChangeTags = function (_a) {
        var option = _a.option;
        return setTags(option);
    };
    var resetTags = function () { return setTags(defaultTags); };
    return (React.createElement(Box, { gap: 'large' },
        React.createElement(Box, { direction: 'row' },
            React.createElement(Tags, __assign({ value: tags, border: 'all', basis: 'medium', placeholder: 'No selection', onChange: onChangeTags }, props))),
        React.createElement(Box, { direction: 'row', justify: 'start' },
            React.createElement(Button, { primary: true, label: 'Reset tags', onClick: resetTags }))));
};
export var main = function () { return React.createElement(TagsInput, null); };
export var a11yTitle = function () { return React.createElement(TagsInput, { a11yTitle: 'Grommet tags' }); };
export var children = function () {
    var _a = React.useState(defaultTags), tags = _a[0], setTags = _a[1];
    var onChangeTags = function (_a) {
        var option = _a.option;
        return setTags(option);
    };
    var removeTag = function (tagIndex) { return setTags(tags.filter(function (_, index) { return index !== tagIndex; })); };
    return (React.createElement(Tags, { value: tags, focusable: false, onChange: onChangeTags }, function (tag, index) { return (React.createElement(Box, { key: "remove_" + index, pad: {
            horizontal: 'xsmall',
        } },
        React.createElement(Button, { label: tag, icon: React.createElement(Trash, null), onClick: function () { return removeTag(index); } }))); }));
};
export var icon = function () { return React.createElement(TagsInput, { icon: React.createElement(FormSubtract, null) }); };
export var direction = function () { return React.createElement(TagsInput, { direction: 'column' }); };
export var tagProps = function () { return (React.createElement(TagsInput, { tagProps: {
        background: 'status-critical',
        size: 'large',
        border: {
            color: 'brand', size: 'medium',
        },
    } })); };
export var onClick = function () { return React.createElement(TagsInput, { onClick: action('onClick') }); };
export var focusable = function () { return React.createElement(TagsInput, { focusable: false }); };
export var placeholder = function () { return React.createElement(TagsInput, { placeholder: 'No selection' }); };
export var value = function () { return React.createElement(TagsInput, { value: 'tag' }); };
