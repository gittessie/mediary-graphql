var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { Box, Button, Heading, Meter, Text, } from 'grommet';
import { Close } from 'grommet-icons/icons/Close';
import { StatusGood } from 'grommet-icons/icons/StatusGood';
import { StatusWarning } from 'grommet-icons/icons/StatusWarning';
import { StatusCritical } from 'grommet-icons/icons/StatusCritical';
import { StatusUnknown } from 'grommet-icons/icons/StatusUnknown';
import { StatusInfo } from 'grommet-icons/icons/StatusInfo';
import { StatusDisabled } from 'grommet-icons/icons/StatusDisabled';
import { longDate } from '../../utils/moment';
var StatusIcons = {
    ok: StatusGood,
    warning: StatusWarning,
    error: StatusCritical,
    unknown: StatusUnknown,
    disabled: StatusDisabled,
    info: StatusInfo,
};
var SIZE_LEVELS = {
    small: {
        level: 4,
        size: 'xsmall',
        meterSize: 'xsmall',
    },
    medium: {
        level: 3,
        size: 'small',
        meterSize: 'small',
    },
    large: {
        level: 1,
        size: 'medium',
        meterSize: 'large',
    },
};
/**
 * A Box to display notification messages<br/>
 * `import { Notification } from 'grommet-controls';`<br/>
 * `<Notification message={...} onClose={...} />`<br/>
 */
var Notification = function (_a) {
    var status = _a.status, message = _a.message, locale = _a.locale, closer = _a.closer, margin = _a.margin, reverse = _a.reverse, a11yTitle = _a.a11yTitle, background = _a.background, border = _a.border, timestamp = _a.timestamp, icon = _a.icon, strong = _a.strong, round = _a.round, pad = _a.pad, size = _a.size, state = _a.state, onClose = _a.onClose, percentComplete = _a.percentComplete, rest = __rest(_a, ["status", "message", "locale", "closer", "margin", "reverse", "a11yTitle", "background", "border", "timestamp", "icon", "strong", "round", "pad", "size", "state", "onClose", "percentComplete"]);
    var sizeLevel = SIZE_LEVELS[size];
    var closeBtn;
    if (onClose) {
        var closeIcon = closer || React.createElement(Close, { size: sizeLevel.size });
        closeBtn = (React.createElement(Box, { pad: pad },
            React.createElement(Button, { a11yTitle: a11yTitle, onClick: onClose }, closeIcon)));
    }
    var heading = message;
    if (strong) {
        heading = React.createElement("strong", null, heading);
    }
    var statusIcon;
    if (icon) {
        var StatusIcon = StatusIcons[status];
        statusIcon = (React.isValidElement(icon) ? icon : React.createElement(StatusIcon, { size: sizeLevel.size }));
    }
    var progress;
    if (percentComplete || percentComplete === 0) {
        progress = (React.createElement(Box, { direction: 'row', align: 'center', gap: 'medium', style: { whiteSpace: 'nowrap' } },
            React.createElement(Meter, { size: sizeLevel.meterSize, thickness: 'small', values: [{
                        label: percentComplete.toFixed(0),
                        value: percentComplete,
                        color: 'accent-1',
                    }] }),
            React.createElement(Text, { size: 'small' }, " " + percentComplete + " %")));
    }
    var timeStamp;
    if (timestamp) {
        timeStamp = longDate(timestamp, locale);
    }
    var first;
    var second;
    if (reverse) {
        first = heading;
        second = statusIcon;
    }
    else {
        first = statusIcon;
        second = heading;
    }
    var content = (React.createElement(Box, { flex: 'grow', pad: pad },
        React.createElement(Heading, { level: sizeLevel.level, margin: margin, style: { maxWidth: '100%' } },
            React.createElement(Box, { direction: 'row', align: 'center', gap: 'small' },
                first,
                second)),
        React.createElement(Text, { size: sizeLevel.size }, state),
        React.createElement(Text, { size: sizeLevel.size }, timeStamp),
        progress));
    if (reverse) {
        first = closeBtn;
        second = content;
    }
    else {
        first = content;
        second = closeBtn;
    }
    return (React.createElement(Box, __assign({ direction: reverse ? 'row-reverse' : 'row', fill: 'horizontal', border: border, round: round, role: 'checkbox', "aria-checked": true, background: background || "status-" + status }, rest),
        first,
        second));
};
Notification.defaultProps = {
    status: 'info',
    size: 'medium',
    message: 'Notification...',
    icon: true,
    animation: 'fadeIn',
    closer: undefined,
    pad: 'small',
    margin: 'small',
    locale: 'en-us',
};
export { Notification };
