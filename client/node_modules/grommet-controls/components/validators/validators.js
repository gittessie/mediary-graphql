var isExisty = function (value) { return (value !== null && value !== undefined); };
var isEmpty = function (value) { return (value === ''); };
var isDefaultRequiredValue = function (_values, value) { return (value === undefined || value === ''); };
var required = function (_values, value) { return (isExisty(value) && !isEmpty(value)); };
var matchRegexp = function (_values, value, regexp) { return (!isExisty(value) || isEmpty(value) || regexp.test(value)); };
var notEmptyString = function (_values, value) { return (!isEmpty(value)); };
var isEmail = function (values, value) { return (matchRegexp(values, value, /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i)); };
var isUrl = function (values, value) { return (matchRegexp(values, value, /^(https?|s?ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!&',;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!&',;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!&',;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!&',;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!&',;=]|:|@)|\/|\?)*)?$/i)); };
var isTrue = function (_values, value) { return (value === true); };
var isFalse = function (_values, value) { return (value === false); };
var isNumeric = function (values, value) { return (typeof value === 'number' ? true : matchRegexp(values, value, /^[-+]?(?:\d*[.])?\d+$/)); };
var isAlpha = function (values, value) { return (matchRegexp(values, value, /^[A-Z]+$/i)); };
var isAlphanumeric = function (values, value) { return (matchRegexp(values, value, /^[0-9A-Z]+$/i)); };
var isInt = function (values, value) { return (matchRegexp(values, value, /^(?:[-+]?(?:0|[1-9]\d*))$/)); };
var isFloat = function (values, value) { return (matchRegexp(values, value, /^(?:[-+]?(?:\d+))?(?:\.\d*)?(?:[eE]?(?:\d+))?$/)); };
var isWords = function (values, value) { return (matchRegexp(values, value, /^[A-Z\s]+$/i)); };
var startsWith = function (str) { return function (_values, value) { return (!isEmpty(value) && value.startsWith(str)); }; };
var isLength = function (length) { return (function (_values, value) { return !isExisty(value) || isEmpty(value) || value.length === length; }); };
var equals = function (eql) { return (function (_values, value) { return !isExisty(value) || isEmpty(value) || value === eql; }); };
var equalsField = function (field) { return (function (values, value) { return value === values[field]; }); };
var maxLength = function (length) { return (function (_values, value) { return !isExisty(value) || value.length <= length; }); };
var minLength = function (length) { return (function (_values, value) { return !isExisty(value) || isEmpty(value) || value.length >= length; }); };
var isBigger = function (number) { return (function (_values, value) { return !isExisty(value) || value > number; }); };
var isSmaller = function (number) { return (function (_values, value) { return !isExisty(value) || value < number; }); };
var isBiggerOrEqual = function (number) { return (function (_values, value) { return !isExisty(value) || value >= number; }); };
var isSmallerOrEqual = function (number) { return (function (_values, value) { return !isExisty(value) || value <= number; }); };
var invalidFieldMessage = function (label) { return (label + " is not valid"); };
var requiredFieldMessage = function (label) { return (label + " is required"); };
var canNotBeEmptyFieldMessage = function (label) { return (label + " can not be empty"); };
var ruleWrapper = function (rule, customMessage, defaultMessage) { return function (dataRow, value, index) {
    if (rule(dataRow, value, index)) {
        return undefined;
    }
    return customMessage || defaultMessage;
}; };
export var validators = {
    required: function (message) { return ruleWrapper(required, message, requiredFieldMessage); },
    email: function (message) { return ruleWrapper(isEmail, message, invalidFieldMessage); },
    url: function (message) { return ruleWrapper(isUrl, message, invalidFieldMessage); },
    defaultRequired: function (message) { return (ruleWrapper(isDefaultRequiredValue, message, requiredFieldMessage)); },
    notEmptyString: function (message) { return (ruleWrapper(notEmptyString, message, canNotBeEmptyFieldMessage)); },
    numeric: function (message) { return (ruleWrapper(isNumeric, message, function (label) { return label + " must be a numeric value"; })); },
    alpha: function (message) { return (ruleWrapper(isAlpha, message, function (label) { return label + " must be alphabetic"; })); },
    alphaNumeric: function (message) { return (ruleWrapper(isAlphanumeric, message, function (label) { return label + " must be alphanumeric"; })); },
    int: function (message) { return (ruleWrapper(isInt, message, function (label) { return label + " must be an integer"; })); },
    float: function (message) { return (ruleWrapper(isFloat, message, function (label) { return label + " must be a number"; })); },
    words: function (message) { return (ruleWrapper(isWords, message, function (label) { return label + " must be a collection of words"; })); },
    length: function (length, message) { return (ruleWrapper(isLength(length), message, function (label) { return label + " must be " + length + " characters long"; })); },
    minLength: function (length, message) { return (ruleWrapper(minLength(length), message, function (label) { return label + " must be at least " + length + " characters long"; })); },
    maxLength: function (length, message) { return (ruleWrapper(maxLength(length), message, function (label) { return label + " must be up to " + length + " characters long"; })); },
    equals: function (value, message) { return (ruleWrapper(equals(value), message, function (label) { return label + " must be equal to " + value; })); },
    equalsField: function (field, fieldLabel, message) { return (ruleWrapper(equalsField(field), message, function (label) { return label + " does not match " + (fieldLabel || field); })); },
    True: function (message) { return (ruleWrapper(isTrue, message, function (label) { return label + " must be True"; })); },
    False: function (message) { return (ruleWrapper(isFalse, message, function (label) { return label + " must be False"; })); },
    bigger: function (value, message) { return (ruleWrapper(isBigger(value), message, function (label) { return label + " must be bigger than " + value; })); },
    biggerOrEqual: function (value, message) { return (ruleWrapper(isBiggerOrEqual(value), message, function (label) { return label + " must be bigger or eqial to " + value; })); },
    smaller: function (value, message) { return (ruleWrapper(isSmaller(value), message, function (label) { return label + " must be smaller than " + value; })); },
    smallerOrEqual: function (value, message) { return (ruleWrapper(isSmallerOrEqual(value), message, function (label) { return label + " must be smaller or equal to " + value; })); },
    startsWith: function (value, message) { return (ruleWrapper(startsWith(value), message, function (label) { return label + " must start with " + value; })); },
};
