import React, { Component } from 'react';
import { BoxProps } from 'grommet';
import { IFormProps, IFormContext, IFormErrors, IFieldProps } from './FormProps';
export declare const FormContext: React.Context<IFormContext>;
interface IFormState {
    data: object;
    errors: IFormErrors;
    submitted: boolean;
}
/** A Form with built-in validation<br/>
*`import { Form } from 'grommet-controls';`<br/>
*`<Form onSubmit={...} />`<br/>
*/
declare class Form extends Component<IFormProps & BoxProps, IFormState> {
    fields: {
        [x: string]: IFieldProps;
    };
    static defaultProps: {
        focusFirstChild: boolean;
        onChange: any;
        onSubmit: any;
        onSubmitError: any;
        onInvalidForm: any;
        onValidForm: any;
        object: {};
        tag: string;
        basis: string;
    };
    containerRef: React.RefObject<HTMLDivElement>;
    constructor(props: any);
    validate: (data: object) => IFormErrors;
    static getDerivedStateFromProps(nextProps: any, prevState: any): {
        data: any;
    };
    componentDidMount(): void;
    onSubmit: (event: any) => void;
    updateObject: (name: any, value: any, e: any) => void;
    attachToForm: (name: any, props: any) => void;
    detachFromForm: (name: any) => void;
    getFieldValue: (name: any) => any;
    getFieldErrors: (name: any) => string[];
    render(): JSX.Element;
}
export { Form };
