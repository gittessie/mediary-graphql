var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { Component } from 'react';
import { Box } from 'grommet';
import { filterByFocusable } from 'grommet/utils/DOM';
import { deepMerge } from 'grommet/utils/object';
import { StyledForm } from './StyledForm';
export var FormContext = React.createContext({
    attachToForm: null,
    detachFromForm: null,
    getFieldValue: null,
    getFieldErrors: null,
    onFieldChange: null,
});
var styledComponents = {
    form: StyledForm,
};
/** A Form with built-in validation<br/>
*`import { Form } from 'grommet-controls';`<br/>
*`<Form onSubmit={...} />`<br/>
*/
var Form = /** @class */ (function (_super) {
    __extends(Form, _super);
    function Form(props) {
        var _this = _super.call(this, props) || this;
        _this.fields = {};
        _this.containerRef = React.createRef();
        _this.validate = function (data) {
            var errors = {};
            var addError = function (key, field, message) {
                if (!errors[key]) {
                    errors[key] = [];
                }
                var msg;
                if (typeof message === 'function') {
                    msg = message(field.description || field.label || key);
                }
                else {
                    msg = message;
                }
                errors[key].push(msg);
            };
            Object.keys(_this.fields).forEach(function (key) {
                var field = _this.fields[key];
                var rules = field.validation;
                if (rules) {
                    if (!Array.isArray(rules)) {
                        rules = [rules];
                    }
                    var _loop_1 = function (i) {
                        var rule = rules[i];
                        if (typeof rule === 'function') {
                            var value = data[key];
                            if (Array.isArray(value)) {
                                var arrayErrors_1 = [];
                                value.forEach(function (_v, index) {
                                    var message = rule(data, data[key], index);
                                    if (message) {
                                        arrayErrors_1[index] = message;
                                    }
                                });
                                if (arrayErrors_1.length) {
                                    addError(key, field, arrayErrors_1);
                                }
                            }
                            else {
                                var message = rule(data, data[key]);
                                if (message) {
                                    addError(key, field, message);
                                }
                            }
                        }
                        else if (rule !== null && typeof rule === 'object') {
                            if (rule.rule && typeof rule.rule === 'function') {
                                var isValid = rule.rule(data, data[key]);
                                if (!isValid) {
                                    if (typeof rule.message === 'function') {
                                        addError(key, field, rule.message(typeof field.label === 'string' ? field.label : key));
                                    }
                                    else {
                                        addError(key, field, rule.message);
                                    }
                                }
                            }
                        }
                    };
                    for (var i = 0; i < rules.length; i += 1) {
                        _loop_1(i);
                    }
                }
            });
            if (Object.keys(errors).length === 0) {
                return undefined;
            }
            return errors;
        };
        _this.onSubmit = function (event) {
            var _a = _this.props, onSubmit = _a.onSubmit, onSubmitError = _a.onSubmitError;
            var data = _this.state.data;
            event.preventDefault();
            var errors = _this.validate(data);
            if (!errors) {
                if (onSubmit) {
                    onSubmit(data);
                }
            }
            else {
                if (onSubmitError) {
                    onSubmitError(errors);
                }
                _this.setState({ errors: errors, submitted: true });
            }
        };
        _this.updateObject = function (name, value, e) {
            _this.setState(function (prevState) {
                var _a;
                var data = __assign(__assign({}, prevState.data), (_a = {}, _a[name] = value, _a));
                var submitted = _this.state.submitted;
                var errors = _this.validate(data);
                if (_this.props.onChange) {
                    _this.props.onChange(name, value, e);
                }
                if (errors) {
                    if (_this.props.onInvalidForm) {
                        _this.props.onInvalidForm(data);
                    }
                }
                else if (_this.props.onValidForm) {
                    _this.props.onValidForm(data);
                }
                return { data: data, errors: submitted ? errors : prevState.errors };
            });
        };
        _this.attachToForm = function (name, props) {
            var _a;
            _this.fields = __assign(__assign({}, _this.fields), (_a = {}, _a[name] = props, _a));
        };
        _this.detachFromForm = function (name) {
            delete _this.fields[name];
        };
        _this.getFieldValue = function (name) { return (_this.state.data[name]); };
        _this.getFieldErrors = function (name) { return (_this.state.errors ? _this.state.errors[name] : null); };
        _this.state = {
            errors: undefined, submitted: false, data: __assign({}, props.object),
        };
        return _this;
    }
    Form.getDerivedStateFromProps = function (nextProps, prevState) {
        if (JSON.stringify(nextProps.object) !== JSON.stringify(prevState.data)) {
            return {
                data: deepMerge(prevState.data, nextProps.object),
            };
        }
        return null;
    };
    Form.prototype.componentDidMount = function () {
        var focusFirstChild = this.props.focusFirstChild;
        if (focusFirstChild) {
            var items_1 = this.containerRef.current.getElementsByTagName('*');
            items_1 = filterByFocusable(items_1);
            if (items_1.length > 0) {
                setTimeout(function () {
                    // @ts-ignore
                    items_1[0].focus();
                }, 0);
            }
        }
    };
    Form.prototype.render = function () {
        var _a = this.props, 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        onSubmitError = _a.onSubmitError, onValidForm = _a.onValidForm, onInvalidForm = _a.onInvalidForm, onSubmit = _a.onSubmit, onChange = _a.onChange, className = _a.className, children = _a.children, a11yTitle = _a.a11yTitle, tag = _a.tag, rest = __rest(_a, ["onSubmitError", "onValidForm", "onInvalidForm", "onSubmit", "onChange", "className", "children", "a11yTitle", "tag"]);
        var StyledComponent = styledComponents[tag];
        if (!StyledComponent) {
            StyledComponent = StyledForm.withComponent(tag);
            styledComponents[tag] = StyledComponent;
        }
        return (React.createElement(StyledComponent, { className: className, onSubmit: this.onSubmit, "aria-label": a11yTitle },
            React.createElement(Box, { direction: 'row' },
                React.createElement(Box, __assign({}, rest),
                    React.createElement("div", { ref: this.containerRef },
                        React.createElement(FormContext.Provider, { value: {
                                attachToForm: this.attachToForm,
                                detachFromForm: this.detachFromForm,
                                getFieldValue: this.getFieldValue,
                                getFieldErrors: this.getFieldErrors,
                                onFieldChange: this.updateObject,
                            } }, children))))));
    };
    Form.defaultProps = {
        focusFirstChild: true,
        onChange: undefined,
        onSubmit: undefined,
        onSubmitError: undefined,
        onInvalidForm: undefined,
        onValidForm: undefined,
        object: {},
        tag: 'form',
        basis: 'medium',
    };
    return Form;
}(Component));
export { Form };
