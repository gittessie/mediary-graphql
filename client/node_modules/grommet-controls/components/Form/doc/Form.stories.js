import React from 'react';
import { Box, Button, Text } from 'grommet';
import { action } from '@storybook/addon-actions';
import { Form } from '../Form';
import { TextInputField, PasswordInputField, SelectField, CheckBoxField, NumberInputField, validators, } from '../../../index';
export default {
    title: 'CONTROLS/validation/Form',
    component: Form,
};
export var main = function () { return (React.createElement(Form, { onSubmit: action('onSubmit'), pad: {
        horizontal: 'small',
    } },
    React.createElement(PasswordInputField, { label: 'Password', name: 'password', validation: [validators.required(), validators.minLength(8), validators.alphaNumeric()] }),
    React.createElement(PasswordInputField, { label: 'Confirm Password', name: 'password1', validation: [validators.equalsField('password', 'the above password')] }),
    React.createElement(TextInputField, { label: 'URL', name: 'url', validation: [validators.required(), validators.url()] }),
    React.createElement(SelectField, { name: 'gender', options: ['male', 'female'], validation: [validators.required()] }),
    React.createElement(CheckBoxField, { name: 'tos', label: 'Terms of service', validation: [validators.required(), validators.True('Please accept the TOS')] }),
    React.createElement(NumberInputField, { min: 6, max: 22, name: 'age', label: 'Age', validation: [validators.required(), validators.numeric(), validators.bigger(10), validators.smallerOrEqual(18)] }),
    React.createElement(Box, { pad: 'small' },
        React.createElement(Button, { type: 'submit', label: 'Submit' })))); };
export var onSubmit = function () { return (React.createElement(Form, { focusFirstChild: false, onSubmit: action('onSubmit'), basis: 'small' },
    React.createElement(TextInputField, { label: 'Text', name: 'fieldname' }))); };
export var onChange = function () {
    var _a = React.useState(''), changedValue = _a[0], setChangedValue = _a[1];
    return (React.createElement(Box, { pad: 'small' },
        React.createElement(Form, { focusFirstChild: false, onChange: function (name, value) {
                console.log(name, value);
                setChangedValue(value);
            }, basis: 'small' },
            React.createElement(TextInputField, { label: 'Text', name: 'mytextinput' })),
        React.createElement(Text, { size: 'small' }, changedValue)));
};
export var onSubmitError = function () { return (React.createElement(Box, { pad: 'small' },
    React.createElement(Form, { focusFirstChild: false, onSubmit: action('onSubmit'), onSubmitError: action('onSubmitError'), basis: 'small' },
        React.createElement(TextInputField, { label: 'Text', name: 'errofield', validation: [validators.required(), validators.minLength(8)] })))); };
export var onInvalidForm = function () {
    var _a = React.useState(undefined), invalid = _a[0], setInvalid = _a[1];
    return (React.createElement(Box, { pad: 'small' },
        React.createElement(Form, { focusFirstChild: false, onSubmit: action('onSubmit'), onInvalidForm: function (error) { return setInvalid(error); }, onValidForm: function () { return setInvalid(undefined); }, basis: 'small' },
            React.createElement(TextInputField, { label: 'Text', name: 'invalidfield', validation: [validators.required(), validators.minLength(8)] })),
        React.createElement(Text, { size: 'small' }, invalid ? 'invalid' : 'valid')));
};
