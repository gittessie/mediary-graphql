var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { ThemeContext } from 'styled-components';
import { Keyboard, Text } from 'grommet';
import { FormClose } from 'grommet-icons/icons/FormClose';
import { StyledTag, StyledIcon } from './StyledTag';
/**
 * A tag control with a label and icon<br/>
 * `import { Tag } from 'grommet-controls';`<br/>
 * `<Tag label={...} icon={...} />`<br/>
 */
var Tag = React.forwardRef(function (_a, ref) {
    var disabled = _a.disabled, label = _a.label, a11yTitle = _a.a11yTitle, reverse = _a.reverse, background = _a.background, onClick = _a.onClick, onChange = _a.onChange, icon = _a.icon, color = _a.color, focusable = _a.focusable, round = _a.round, size = _a.size, truncate = _a.truncate, rest = __rest(_a, ["disabled", "label", "a11yTitle", "reverse", "background", "onClick", "onChange", "icon", "color", "focusable", "round", "size", "truncate"]);
    var clickTag = function (e) {
        if (!disabled && onClick) {
            onClick(e);
        }
        e.preventDefault();
        e.stopPropagation();
    };
    var toggleTag = function (e) {
        if (!disabled && onChange) {
            e.preventDefault();
            e.stopPropagation();
            onChange(e);
        }
    };
    var tagRound = round;
    var canFocus = focusable && !disabled && !!(onClick || onChange);
    return (React.createElement(Keyboard, { onEnter: clickTag, onSpace: toggleTag },
        React.createElement(ThemeContext.Consumer, null, function (theme) {
            var closeIcon;
            if (icon || onChange) {
                closeIcon = (React.createElement(StyledIcon, { theme: theme, disabled: disabled, onClick: onChange }, icon || React.createElement(FormClose, { theme: theme })));
            }
            return (React.createElement(StyledTag, __assign({ ref: ref, direction: reverse ? 'row-reverse' : 'row', justify: 'between', align: 'center', a11yTitle: a11yTitle, round: tagRound, onClick: onClick && clickTag, role: 'checkbox', "aria-checked": true, tabIndex: canFocus ? 0 : undefined, background: background, disabled: disabled, theme: theme }, rest),
                reverse && closeIcon,
                React.isValidElement(label) ? label : (React.createElement(Text, { color: color, size: size, truncate: truncate }, label && label.toString())),
                !reverse && closeIcon));
        })));
});
Tag.defaultProps = {
    label: 'Text',
    pad: { horizontal: 'xsmall' },
    focusable: true,
};
export { Tag };
