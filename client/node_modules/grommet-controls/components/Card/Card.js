var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { ThemeContext } from 'styled-components';
import { Box, Heading, } from 'grommet';
import { StyledCard } from './StyledCard';
/**
* A Card-type container, all props of Box apply<br/>
* `import { Card } from 'grommet-controls';`<br/>
* `<Card>`<br/>
* &nbsp;&nbsp;`<Card.CardTitle>`<br/>
* &nbsp;&nbsp;&nbsp;&nbsp;`Title`<br/>
* &nbsp;&nbsp;`</Card.CardTitle>`<br/>
* &nbsp;&nbsp;`<Card.CardContent>`<br/>
* &nbsp;&nbsp;&nbsp;&nbsp;`card content goes here`<br/>
* &nbsp;&nbsp;`</Card.CardContent>`<br/>
* `</Card>`<br/>
*/
export var Card = function (_a) {
    var children = _a.children, rest = __rest(_a, ["children"]);
    return (React.createElement(ThemeContext.Consumer, null, function (theme) { return (React.createElement(StyledCard, __assign({ theme: theme, overflow: 'hidden' }, rest), children)); }));
};
Card.displayName = 'Card';
Card.defaultProps = {
    align: 'center',
    border: 'all',
    elevation: 'small',
    round: 'xsmall',
    flex: false,
    gap: 'small',
    fill: 'horizontal',
    background: 'white',
};
/**
*  Card Actions to be placed at the bottom of the Card
*/
export var CardActions = function (_a) {
    var children = _a.children, _b = _a.pad, pad = _b === void 0 ? 'small' : _b, rest = __rest(_a, ["children", "pad"]);
    return (React.createElement(Box, __assign({ align: 'center', pad: pad, gap: 'small', border: 'top', flex: false, fill: 'horizontal', direction: 'row' }, rest), children));
};
CardActions.displayName = 'CardActions';
Card.CardActions = CardActions;
/**
*  Card Title display the card title
*/
export var CardTitle = function (_a) {
    var children = _a.children, color = _a.color, textAlign = _a.textAlign, truncate = _a.truncate, _b = _a.level, level = _b === void 0 ? 4 : _b, _c = _a.strong, strong = _c === void 0 ? false : _c, responsive = _a.responsive, rest = __rest(_a, ["children", "color", "textAlign", "truncate", "level", "strong", "responsive"]);
    return (React.createElement(Box, __assign({ direction: 'row', fill: 'horizontal', border: 'bottom', gap: 'small', flex: false }, rest), typeof children !== 'string' ? children : (React.createElement(Heading, { level: level, margin: 'none', color: color, textAlign: textAlign, truncate: truncate, responsive: responsive }, strong ? React.createElement("strong", null, children) : children))));
};
CardTitle.displayName = 'CardTitle';
Card.CardTitle = CardTitle;
/**
*  Card Content
*/
export var CardContent = function (_a) {
    var children = _a.children, _b = _a.pad, pad = _b === void 0 ? 'small' : _b, rest = __rest(_a, ["children", "pad"]);
    return (React.createElement(Box, __assign({ pad: pad, fill: true, flex: true }, rest), children));
};
CardContent.displayName = 'CardContent';
Card.CardContent = CardContent;
