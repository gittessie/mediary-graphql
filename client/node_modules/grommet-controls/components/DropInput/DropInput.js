var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { Component } from 'react';
import { findDOMNode } from 'react-dom';
import { ThemeContext } from 'styled-components';
import { FormDown } from 'grommet-icons/icons/FormDown';
import { DropButton, Keyboard, Button, } from 'grommet';
import { StyledDropInput, StyledDropInputContainer, StyledWidgetsContainer } from './StyledDropInput';
/**
*  An Input control with an optional drop button with the specified 'dropContent' or widgets<br/>
*`import { DropInput } from 'grommet-controls';`<br/>
*`<DropInput`<br/>
*&nbsp;&nbsp;`dropContent={(`<br/>
*&nbsp;&nbsp;&nbsp;&nbsp;`...`<br/>
*&nbsp;&nbsp;`]}`<br/>
*`/>`<br/>
*/
var DropInput = /** @class */ (function (_super) {
    __extends(DropInput, _super);
    function DropInput() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = { open: false };
        _this.inputRef = React.createRef();
        _this.onUpdateValue = function (value) {
            var onChange = _this.props.onChange;
            var input = findDOMNode(_this.inputRef.current);
            input.value = value;
            _this.setState({ open: false, value: value });
            if (onChange) {
                onChange({ target: input });
            }
        };
        _this.onOpen = function (e) {
            var _a = _this.props, onOpen = _a.onOpen, disabled = _a.disabled;
            _this.setState({ open: true });
            if (onOpen && !disabled) {
                onOpen(e);
            }
        };
        _this.onClose = function (e) {
            var _a = _this.props, onClose = _a.onClose, disabled = _a.disabled;
            _this.setState({ open: false });
            if (onClose && !disabled) {
                onClose(e);
            }
        };
        _this.onKeyDown = function (e) {
            var onKeyDown = _this.props.onKeyDown;
            _this.setState({ open: true });
            if (onKeyDown) {
                onKeyDown(e);
            }
        };
        _this.onKeyUp = function (e) {
            var onKeyUp = _this.props.onKeyUp;
            _this.setState({ open: false });
            if (onKeyUp) {
                onKeyUp(e);
            }
        };
        return _this;
    }
    DropInput.getDerivedStateFromProps = function (newProps, oldState) {
        if (newProps.value !== oldState.value || newProps.defaultValue !== oldState.defaultValue) {
            return {
                value: newProps.value,
                defaultValue: newProps.defaultValue,
                open: false,
            };
        }
        return null;
    };
    DropInput.prototype.render = function () {
        var _this = this;
        var _a = this.props, a11yTitle = _a.a11yTitle, a11yDropTitle = _a.a11yDropTitle, dropAlign = _a.dropAlign, dropTarget = _a.dropTarget, update = _a.update, widgets = _a.widgets, 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        onOpen = _a.onOpen, onClose = _a.onClose, onKeyDown = _a.onKeyDown, onKeyUp = _a.onKeyUp, defaultValue = _a.defaultValue, dropContent = _a.dropContent, dropIcon = _a.dropIcon, disabled = _a.disabled, rest = __rest(_a, ["a11yTitle", "a11yDropTitle", "dropAlign", "dropTarget", "update", "widgets", "onOpen", "onClose", "onKeyDown", "onKeyUp", "defaultValue", "dropContent", "dropIcon", "disabled"]);
        var open = this.state.open;
        if (typeof update === 'function') {
            update(this.onUpdateValue);
        }
        var numWidgets = (dropContent ? 1 : 0) + (widgets ? widgets.length : 0);
        var decorations;
        if (numWidgets > 0) {
            var drop = void 0;
            if (dropContent) {
                drop = (React.createElement(DropButton, { a11yTitle: a11yDropTitle, disabled: disabled, dropAlign: dropAlign, dropTarget: dropTarget, open: open, tabIndex: -1, focusIndicator: false, onOpen: this.onOpen, onClose: this.onClose, dropContent: dropContent, icon: dropIcon }));
            }
            decorations = (React.createElement(StyledWidgetsContainer, { align: 'center', direction: 'row' },
                widgets.map(function (widget, index) { return (React.createElement(Button, __assign({ disabled: disabled, tabIndex: -1, key: "widget_" + index }, widget))); }),
                drop));
        }
        return (React.createElement(Keyboard, { onDown: this.onKeyDown, onUp: this.onKeyUp },
            React.createElement(StyledDropInputContainer, null,
                React.createElement(ThemeContext.Consumer, null, function (theme) { return (React.createElement(StyledDropInput, __assign({ ref: _this.inputRef, theme: theme, disabled: disabled, numWidgets: numWidgets, "aria-label": a11yTitle, defaultValue: defaultValue ? defaultValue.toString() : undefined }, rest))); }),
                decorations)));
    };
    DropInput.defaultProps = {
        dropAlign: { top: 'bottom', right: 'left' },
        dropIcon: (React.createElement(FormDown, null)),
        type: 'text',
        widgets: [],
    };
    return DropInput;
}(Component));
export { DropInput };
