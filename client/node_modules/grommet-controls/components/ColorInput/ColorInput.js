var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { Component } from 'react';
import styled, { ThemeContext } from 'styled-components';
import { StopFill } from 'grommet-icons/icons/StopFill';
import { MaskedInput } from '../MaskedInput';
import { Colors } from '../Colors';
var StyledColorButton = styled.span(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  display:  inline-flex;\n  svg {\n    border: ", ";\n    fill: ", ";\n    stroke: ", ";\n    transition: none;\n  }\n"], ["\n  display:  inline-flex;\n  svg {\n    border: ", ";\n    fill: ", ";\n    stroke: ", ";\n    transition: none;\n  }\n"])), function (props) { return props.theme.button.border.width + " solid " + props.theme.global.colors.border; }, function (props) { return props.selectedColor; }, function (props) { return props.selectedColor; });
/** A masked color entry field, with a drop button to select a color<br/>
* All properties of MaskedInput apply<br/>
* `import { ColorInput } from 'grommet-controls';`<br/>
* `<ColorInput colors={...} value={...} />`<br/>
*/
var ColorInput = /** @class */ (function (_super) {
    __extends(ColorInput, _super);
    function ColorInput(props) {
        var _this = _super.call(this, props) || this;
        _this.upDateValue = null;
        _this.onChange = function (e) {
            var onChange = _this.props.onChange;
            _this.setState({ selectedColor: e.target.value });
            if (onChange) {
                onChange(e);
            }
        };
        _this.onSelect = function (_a) {
            var color = _a.color;
            _this.setState({ selectedColor: color });
            _this.upDateValue(color);
        };
        _this.state = { selectedColor: props.value || props.defaultValue };
        return _this;
    }
    ColorInput.getDerivedStateFromProps = function (nextProps) {
        return {
            selectedColor: nextProps.value,
        };
    };
    ColorInput.prototype.render = function () {
        var _this = this;
        var _a = this.props, columns = _a.columns, wrap = _a.wrap, colors = _a.colors, size = _a.size, rest = __rest(_a, ["columns", "wrap", "colors", "size"]);
        var selectedColor = this.state.selectedColor;
        return (React.createElement(ThemeContext.Consumer, null, function (theme) { return (React.createElement(MaskedInput, __assign({ update: function (update) { _this.upDateValue = update; }, dropIcon: (React.createElement(StyledColorButton, { theme: theme, selectedColor: selectedColor },
                React.createElement(StopFill, null))), dropContent: (React.createElement(Colors, { color: selectedColor, colors: colors, onSelect: _this.onSelect, columns: columns, wrap: wrap, size: size })), onChange: _this.onChange }, rest))); }));
    };
    ColorInput.defaultProps = {
        size: 'small',
        mask: ['#', /[0-9a-fA-F]/, /[0-9a-fA-F]/, /[0-9a-fA-F]/, /[0-9a-fA-F]/, /[0-9a-fA-F]/, /[0-9a-fA-F]/],
    };
    return ColorInput;
}(Component));
export { ColorInput };
var templateObject_1;
