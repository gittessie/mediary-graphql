var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { Box } from 'grommet';
import { ColorInput } from '../ColorInput';
import { materialColors, uiColors } from '../../../index';
export default {
    title: 'CONTROLS/input/ColorInput',
    component: ColorInput,
};
var ColorTestBed = function (_a) {
    var color = _a.color, rest = __rest(_a, ["color"]);
    var _b = React.useState(color), stateColor = _b[0], setColor = _b[1];
    return (React.createElement(Box, { direction: 'row' },
        React.createElement(Box, { basis: 'medium' },
            React.createElement(ColorInput, __assign({ value: stateColor, onChange: function (_a) {
                    var value = _a.target.value;
                    return setColor(value);
                } }, rest)))));
};
export var main = function () { return React.createElement(ColorTestBed, { colors: materialColors, color: '#000000' }); };
export var colors = function () { return (React.createElement(ColorTestBed, { color: '#ff0000', columns: 9, wrap: true, colors: uiColors })); };
