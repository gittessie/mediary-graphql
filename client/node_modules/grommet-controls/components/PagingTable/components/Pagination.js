var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { Component } from 'react';
import styled from 'styled-components';
import { Box, Button, Select, Text, } from 'grommet';
import { Previous } from 'grommet-icons/icons/Previous';
import { Next } from 'grommet-icons/icons/Next';
import { NumberInput } from '../../NumberInput';
var defaultButton = function (_a) {
    var disabled = _a.disabled, Icon = _a.Icon, onClick = _a.onClick, label = _a.label, other = __rest(_a, ["disabled", "Icon", "onClick", "label"]);
    return (React.createElement(Button, __assign({ icon: React.createElement(Icon, null), disabled: disabled, onClick: onClick, label: label, plain: true }, other)));
};
var StyledButton = styled(defaultButton)(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  width: 150px;\n  padding: 10px 0;\n"], ["\n  width: 150px;\n  padding: 10px 0;\n"])));
var StyledPageInput = styled(NumberInput)(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  max-width: 180px;\n"], ["\n  max-width: 180px;\n"])));
var StyledSelect = styled(Select)(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n  max-width: 150px;\n"], ["\n  max-width: 150px;\n"])));
var ReactTablePagination = /** @class */ (function (_super) {
    __extends(ReactTablePagination, _super);
    function ReactTablePagination(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.getSafePage = function (page) {
            var pg = Number.isNaN(page) ? _this.props.page : page;
            return Math.min(Math.max(pg, 0), _this.props.pages - 1);
        };
        _this.changePage = function (page) {
            var pg = _this.getSafePage(page);
            _this.setState({ page: pg });
            if (_this.props.page !== pg) {
                _this.props.onPageChange(pg);
            }
        };
        _this.applyPage = function (e) {
            if (e) {
                e.preventDefault();
            }
            var page = _this.state.page;
            _this.changePage(page === '' ? _this.props.page : page);
        };
        _this.state = { page: props.page };
        return _this;
    }
    ReactTablePagination.getDerivedStateFromProps = function (nextProps) {
        return {
            page: nextProps.page,
        };
    };
    ReactTablePagination.prototype.renderPaging = function () {
        var _this = this;
        var _a = this.props, page = _a.page, showPageJump = _a.showPageJump, pageText = _a.pageText, ofText = _a.ofText, pages = _a.pages;
        var pageJump;
        if (showPageJump) {
            pageJump = (
            //@ts-ignore
            React.createElement(StyledPageInput, { "aria-label": 'Select page to jump to', onChange: function (e) {
                    var val = e.target.value;
                    if (val === '') {
                        return _this.setState({ page: val });
                    }
                    var pg = parseInt(val, 10) - 1;
                    _this.setState({ page: _this.getSafePage(pg) });
                    return false;
                }, value: typeof this.state.page === 'string' ? '' : this.state.page + 1, onBlur: this.applyPage, onKeyPress: function (e) {
                    if (e.which === 13 || e.keyCode === 13) {
                        _this.applyPage(null);
                    }
                } }));
        }
        else {
            pageJump = React.createElement(Text, null, page + 1);
        }
        return (React.createElement(Box, { direction: 'row', align: 'center', gap: 'small' },
            React.createElement(Text, null, pageText + " "),
            pageJump,
            React.createElement("span", { style: { whiteSpace: 'nowrap' } }, ofText + " " + (pages || 1))));
    };
    ReactTablePagination.prototype.renderPageSize = function () {
        var _this = this;
        var _a = this.props, showPageSizeOptions = _a.showPageSizeOptions, onPageSizeChange = _a.onPageSizeChange, pageSizeOptions = _a.pageSizeOptions, pageSize = _a.pageSize;
        if (showPageSizeOptions) {
            return (React.createElement(Box, { direction: 'row' },
                React.createElement(StyledSelect, { "aria-label": 'Select rows per page', onChange: function (e) { return onPageSizeChange(Number(e.option.split(' ')[0])); }, value: pageSize + " " + this.props.rowsText, options: pageSizeOptions.map(function (option) { return (option + " " + _this.props.rowsText); }) })));
        }
        return null;
    };
    ReactTablePagination.prototype.renderPrevious = function () {
        var _this = this;
        var _a = this.props, _b = _a.PreviousComponent, PreviousComponent = _b === void 0 ? StyledButton : _b, canPrevious = _a.canPrevious, page = _a.page;
        return (React.createElement(Box, { direction: 'row' },
            React.createElement(PreviousComponent, { "aria-label": 'Move to previous page', Icon: Previous, label: this.props.previousText, onClick: canPrevious ? function () { return _this.changePage(page - 1); } : null, disabled: !canPrevious })));
    };
    ReactTablePagination.prototype.renderNext = function () {
        var _this = this;
        var _a = this.props, page = _a.page, canNext = _a.canNext, _b = _a.NextComponent, NextComponent = _b === void 0 ? StyledButton : _b;
        return (React.createElement(Box, { direction: 'row' },
            React.createElement(NextComponent, { "aria-label": 'Move to next page', reverse: true, Icon: Next, label: this.props.nextText, onClick: canNext ? function () { return _this.changePage(page + 1); } : null, disabled: !canNext })));
    };
    ReactTablePagination.prototype.render = function () {
        var props = this.props.getPaginationProps(this.props);
        return (React.createElement(Box, __assign({}, __assign({
            direction: 'row', align: 'center', justify: 'between', fill: 'horizontal',
        }, props)),
            this.renderPrevious(),
            this.renderPaging(),
            this.renderPageSize(),
            this.renderNext()));
    };
    return ReactTablePagination;
}(Component));
export default ReactTablePagination;
var templateObject_1, templateObject_2, templateObject_3;
