var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { TextInput } from 'grommet';
export default (function (_a) {
    var filter = _a.filter, onChange = _a.onChange, column = _a.column, rest = __rest(_a, ["filter", "onChange", "column"]);
    var props = __assign({ size: 'medium' }, rest);
    return (React.createElement(TextInput, __assign({ "aria-label": "Filter data by " + (typeof column.Header === 'string' ? column.Header : column.id), value: filter ? filter.value : '', onChange: function (event) { return onChange(event.target.value); } }, props)));
});
