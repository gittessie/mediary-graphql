var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { Box, Button } from 'grommet';
import { Blank } from 'grommet-icons/icons/Blank';
import { LinkDown } from 'grommet-icons/icons/LinkDown';
import { LinkUp } from 'grommet-icons/icons/LinkUp';
import { StyledThComponent } from '../StyledTableComponents';
export default (function (_a) {
    var toggleSort = _a.toggleSort, sort = _a.sort, resizable = _a.resizable, children = _a.children, pivot = _a.pivot, hidden = _a.hidden, sortable = _a.sortable, expander = _a.expander, CellTextComponent = _a.CellTextComponent, props = __rest(_a, ["toggleSort", "sort", "resizable", "children", "pivot", "hidden", "sortable", "expander", "CellTextComponent"]);
    if (!expander && Array.isArray(children) && children.length > 1 && !children[0] && !children[1]) {
        return null;
    }
    var style = props.style, rest = __rest(props, ["style"]);
    var childRendered = React.createElement(CellTextComponent, __assign({}, rest, { value: children }));
    var content;
    if (sortable) {
        var sortAsc = sort === '-sort-asc';
        var sortDesc = sort === '-sort-desc';
        var SortIcon = Blank;
        if (sortAsc || sortDesc) {
            SortIcon = sortAsc ? LinkUp : LinkDown;
        }
        content = (React.createElement(Box, { direction: 'row', gap: 'xsmall', align: 'center' },
            childRendered,
            React.createElement(Button, { onClick: function (e) { return (toggleSort && toggleSort(e)); } },
                React.createElement(SortIcon, null))));
    }
    else {
        content = childRendered;
    }
    var boxProps = __assign({ pad: 'xsmall' }, rest);
    return (
    // eslint-disable-next-line jsx-a11y/interactive-supports-focus
    React.createElement(StyledThComponent, { role: 'columnheader', onClick: function (e) { return (toggleSort && toggleSort(e)); }, direction: 'row', pivot: pivot, hidden: hidden, sortable: sortable, style: style, resizable: resizable },
        React.createElement(Box, __assign({}, boxProps, { fill: true }), content)));
});
