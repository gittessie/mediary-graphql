var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/* eslint-disable no-param-reassign,no-nested-ternary */
import React from 'react';
//
// ########################################################################
// Non-exported Helpers
// ########################################################################
function isArray(a) {
    return Array.isArray(a);
}
function flattenDeep(arr, newArr) {
    if (newArr === void 0) { newArr = []; }
    if (!isArray(arr)) {
        newArr.push(arr);
    }
    else {
        for (var i = 0; i < arr.length; i += 1) {
            flattenDeep(arr[i], newArr);
        }
    }
    return newArr;
}
function makePathArray(obj) {
    return flattenDeep(obj)
        .join('.')
        .replace(/\[/g, '.')
        .replace(/]/g, '')
        .split('.');
}
function get(obj, path, def) {
    if (!path) {
        return obj;
    }
    var pathObj = makePathArray(path);
    var val;
    try {
        val = pathObj.reduce(function (current, pathPart) { return current[pathPart]; }, obj);
    }
    catch (e) {
        // continue regardless of error
    }
    return typeof val !== 'undefined' ? val : def;
}
function set(obj, path, value) {
    if (obj === void 0) { obj = {}; }
    var keys = makePathArray(path);
    var keyPart;
    var cursor = obj;
    // eslint-disable-next-line no-cond-assign
    while ((keyPart = keys.shift()) && keys.length) {
        if (!cursor[keyPart]) {
            cursor[keyPart] = {};
        }
        cursor = cursor[keyPart];
    }
    cursor[keyPart] = value;
    return obj;
}
function range(n) {
    var arr = [];
    for (var i = 0; i < n; i += 1) {
        arr.push(n);
    }
    return arr;
}
function orderBy(arr, funcs, dirs, indexKey) {
    return arr.sort(function (rowA, rowB) {
        for (var i = 0; i < funcs.length; i += 1) {
            var comp = funcs[i];
            var desc = dirs[i] === false || dirs[i] === 'desc';
            var sortInt = comp(rowA, rowB);
            if (sortInt) {
                return desc ? -sortInt : sortInt;
            }
        }
        // Use the row index for tie breakers
        return dirs[0]
            ? rowA[indexKey] - rowB[indexKey]
            : rowB[indexKey] - rowA[indexKey];
    });
}
function remove(a, b) {
    return a.filter(function (o, i) {
        var r = b(o);
        if (r) {
            a.splice(i, 1);
            return true;
        }
        return false;
    });
}
function clone(a) {
    try {
        return JSON.parse(JSON.stringify(a, function (_, value) {
            if (typeof value === 'function') {
                return value.toString();
            }
            return value;
        }));
    }
    catch (e) {
        return a;
    }
}
function getFirstDefined() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    for (var i = 0; i < args.length; i += 1) {
        if (typeof args[i] !== 'undefined') {
            return args[i];
        }
    }
    return undefined;
}
function sum(arr) {
    return arr.reduce(function (a, b) { return (a + b); }, 0);
}
function groupBy(xs, key) {
    return xs.reduce(function (rv, x, i) {
        var resKey = typeof key === 'function' ? key(x, i) : x[key];
        rv[resKey] = isArray(rv[resKey]) ? rv[resKey] : [];
        rv[resKey].push(x);
        return rv;
    }, {});
}
function asPx(value) {
    value = Number(value);
    return Number.isNaN(value) ? null : value + "px";
}
function compactObject(obj) {
    var newObj = {};
    if (obj) {
        Object.keys(obj).map(function (key) {
            if (Object.prototype.hasOwnProperty.call(obj, key)
                && obj[key] !== undefined
                && typeof obj[key] !== 'undefined') {
                newObj[key] = obj[key];
            }
            return true;
        });
    }
    return newObj;
}
function isSortingDesc(d) {
    return !!(d.sort === 'desc' || d.desc === true || d.asc === false);
}
function normalizeComponent(Comp, params, fallback) {
    if (params === void 0) { params = {}; }
    if (fallback === void 0) { fallback = Comp; }
    return typeof Comp === 'function'
        ? Object.getPrototypeOf(Comp).isReactComponent
            ? React.createElement(Comp, __assign({}, params))
            : Comp(params)
        : fallback;
}
export default {
    get: get,
    set: set,
    orderBy: orderBy,
    range: range,
    remove: remove,
    clone: clone,
    getFirstDefined: getFirstDefined,
    sum: sum,
    groupBy: groupBy,
    isArray: isArray,
    compactObject: compactObject,
    isSortingDesc: isSortingDesc,
    normalizeComponent: normalizeComponent,
    asPx: asPx,
};
