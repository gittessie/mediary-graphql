var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import React from 'react';
import { Box, Text, Image, CheckBox, Select, } from 'grommet';
import { Add, Subtract } from 'grommet-icons';
import { PagingTable } from '../index';
export default {
    title: 'CONTROLS/controls/PagingTable',
    component: PagingTable,
};
var getAllColumns = function (columns) {
    var allColumns = [];
    columns.forEach(function (column) {
        if (column.columns) {
            allColumns = __spreadArrays(allColumns, getAllColumns(column.columns));
        }
        else {
            allColumns.push(column);
        }
    });
    return allColumns;
};
var updateColumnShow = function (allColumns, visible) { return (allColumns.map(function (column) { return (column.columns ? __assign(__assign({}, column), { columns: updateColumnShow(column.columns, visible) }) : __assign(__assign({}, column), { show: visible.indexOf(column.Header) !== -1 })); })); };
var TableExample = /** @class */ (function (_super) {
    __extends(TableExample, _super);
    function TableExample() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            grouping: false,
            filterable: true,
            sortable: true,
            paging: false,
            data: [
                {
                    item: 'Fork', qty: 4, price: 5.50, image: 'http://lorempixel.com/output/food-q-c-264-260-2.jpg',
                },
                {
                    item: 'Fork', qty: 1, price: 5.20, image: 'http://lorempixel.com/output/nightlife-q-c-264-260-4.jpg',
                },
                {
                    item: 'Knife', qty: 3, price: 2.50, image: 'http://lorempixel.com/output/nature-q-c-264-260-7.jpg',
                },
                {
                    item: 'Spoon', qty: 2, price: 6.50, image: 'http://lorempixel.com/output/sports-q-c-264-260-1.jpg',
                },
                {
                    item: 'Plate', qty: 1, price: 12.49, image: 'http://lorempixel.com/output/people-q-c-264-260-2.jpg',
                },
                {
                    item: 'Glass', qty: 2, price: 8.25, image: 'http://lorempixel.com/output/abstract-q-c-264-260-7.jpg',
                },
            ],
            columns: [
                {
                    Header: 'Item',
                    decorations: {
                        header: {
                            align: 'start',
                        },
                    },
                    accessor: 'item',
                },
                {
                    Header: 'Inventory',
                    columns: [
                        {
                            Header: 'Qty',
                            accessor: 'qty',
                            decorations: {
                                cell: {
                                    align: 'end',
                                },
                            },
                        }, {
                            Header: 'Price',
                            accessor: 'price',
                            decorations: {
                                cell: {
                                    align: 'end',
                                },
                            },
                        }, {
                            Header: 'Total',
                            id: 'total',
                            decorations: {
                                cell: {
                                    background: {
                                        color: 'light-1',
                                    },
                                    align: 'end',
                                    color: 'brand',
                                    size: 'large',
                                },
                            },
                            Cell: function (props) { return (props.original ? props.original.price * props.original.qty : 0); },
                            Footer: function (cell) { return (React.createElement(Text, { size: 'xlarge', color: 'brand' }, "Sum " + cell.data.reduce(function (a, b) { return (a + b.price); }, 0).toFixed(2))); },
                        },
                    ],
                },
            ],
        };
        _this.onChangeFields = function (_a) {
            var value = _a.value;
            var columns = _this.state.columns;
            _this.setState({
                columns: updateColumnShow(columns, value),
            });
        };
        return _this;
    }
    TableExample.prototype.render = function () {
        var _this = this;
        var _a = this.state, data = _a.data, grouping = _a.grouping, sortable = _a.sortable, filterable = _a.filterable, paging = _a.paging, columns = _a.columns;
        var allColumns = getAllColumns(columns);
        var visibleColumns = allColumns.filter(function (column) { return !(column.show === false); });
        return (React.createElement(Box, { gap: 'small', fill: 'horizontal' },
            React.createElement(Box, { direction: 'row', justify: 'between' },
                React.createElement(CheckBox, { checked: grouping, label: 'Group rows', onChange: function () { return _this.setState({
                        grouping: !grouping,
                    }); } }),
                React.createElement(CheckBox, { checked: sortable, label: 'Sortable', onChange: function () { return _this.setState({
                        sortable: !sortable,
                    }); } }),
                React.createElement(CheckBox, { checked: filterable, label: 'Filter', onChange: function () { return _this.setState({
                        filterable: !filterable,
                    }); } }),
                React.createElement(CheckBox, { checked: paging, label: 'Paging', onChange: function () { return _this.setState({
                        paging: !paging,
                    }); } }),
                React.createElement(Box, { basis: 'small' },
                    React.createElement(Select, { options: allColumns.map(function (column) { return column.Header; }), multiple: true, selected: visibleColumns.map(function (c) { return allColumns
                            .findIndex(function (column) { return column.Header === c.Header; }); }), value: visibleColumns.map(function (column) { return column.Header; }), onChange: this.onChangeFields }))),
            React.createElement(PagingTable, { pivotBy: grouping ? ['item'] : undefined, defaultPageSize: 4, filterable: filterable, sortable: sortable, showPagination: paging, pageSizeOptions: [2, 4, 6], decorations: {
                    table: {
                        elevation: 'large', border: 'all',
                    },
                    headerGroup: {
                        background: 'brand', border: 'horizontal', align: 'center',
                    },
                    header: {
                        border: 'all', align: 'center',
                    },
                    filter: {
                        background: 'light-2', border: 'all',
                    },
                    filterInput: {
                        size: 'small', placeholder: 'Filter...',
                    },
                    body: {
                        animation: {
                            type: 'fadeIn', duration: 2000, size: 'large',
                        },
                    },
                    rowOdd: {
                        background: {
                            color: 'light-1', opacity: 'medium',
                        },
                    },
                    footer: {
                        background: 'accent-2',
                    },
                    pagination: {
                        pad: {
                            vertical: 'medium',
                        },
                    },
                    expander: {
                        CloseIcon: React.createElement(Subtract, { color: 'brand' }), OpenIcon: React.createElement(Add, { color: 'brand' }),
                    },
                }, SubComponent: function (row) { return (React.createElement(Box, { direction: 'row', pad: 'small', gap: 'medium', round: 'medium', border: {
                        color: 'brand', size: 'large',
                    }, background: 'light-1' },
                    React.createElement(Image, { src: row.original.image }),
                    React.createElement(Box, null,
                        React.createElement("div", null,
                            React.createElement("strong", null, "Item: "),
                            row.original.item),
                        React.createElement("div", null,
                            React.createElement("strong", null, "Qty: "),
                            row.original.qty),
                        React.createElement("div", null,
                            React.createElement("strong", null, "Price: "),
                            row.original.price)))); }, columns: columns, data: data })));
    };
    return TableExample;
}(React.Component));
export var main = function () { return React.createElement(TableExample, null); };
export var simple = function () { return (React.createElement(PagingTable, { columns: [
        {
            Header: 'Item',
            accessor: 'item',
        }, {
            Header: 'Qty',
            accessor: 'qty',
        }, {
            Header: 'Price',
            accessor: 'price',
        }, {
            Header: 'Total',
            Cell: function (props) { return (props.original.price * props.original.qty); },
        },
    ], data: [
        {
            item: 'Fork', qty: 4, price: 5.50,
        },
        {
            item: 'Knife', qty: 3, price: 2.50,
        },
        {
            item: 'Spoon', qty: 2, price: 6.50,
        },
    ] })); };
