var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { ThemeContext } from 'styled-components';
import { ResponsiveContext } from 'grommet';
import { StyledPagingTable } from './StyledPagingTable';
var responsiveColumns = function (size, columns) { return (Array.isArray(columns)
    ? columns.map(function (column) {
        if (size === undefined) {
            return column;
        }
        var show = column.show;
        if (column.responsiveShow) {
            var sizes = Array.isArray(column.responsiveShow)
                ? column.responsiveShow : [column.responsiveShow];
            if (sizes.indexOf(size) !== -1) {
                show = true;
            }
        }
        if (column.responsiveHide) {
            var sizes = Array.isArray(column.responsiveHide)
                ? column.responsiveHide : [column.responsiveHide];
            if (sizes.indexOf(size) !== -1) {
                show = false;
            }
        }
        if (show === undefined) {
            return column;
        }
        return __assign(__assign({}, column), { show: show });
    }) : columns); };
/**
 * Table component with pagination, filtering, footer, child rows and grouping<br/>
 * Derived from https://github.com/react-tools/react-table<br/>
 * `import { PagingTable } from 'grommet-controls';`<br/>
 * `<PagingTable columns={...} data={...} />`<br/>
 */
var PagingTable = function (_a) {
    var data = _a.data, columns = _a.columns, rest = __rest(_a, ["data", "columns"]);
    var defaults = {
        showPagination: (rest.onFetchData !== undefined)
            || (data && data.length > (rest.defaultPageSize || 20)),
        minRows: data && data.length < (rest.defaultPageSize || 20) ? 0 : undefined,
    };
    var newProps = __assign(__assign({}, defaults), rest);
    return (React.createElement(ResponsiveContext.Consumer, null, function (size) { return (React.createElement(ThemeContext.Consumer, null, function (theme) { return (React.createElement(StyledPagingTable, __assign({ data: data || [], columns: responsiveColumns(size, columns), theme: theme }, newProps))); })); }));
};
PagingTable.defaultProps = {
    defaultPageSize: 20,
    filterable: false,
    loading: false,
    manual: false,
    resizable: true,
    showPagination: true,
    sortable: true,
};
export { PagingTable };
