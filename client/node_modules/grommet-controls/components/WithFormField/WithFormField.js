var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { useEffect, useContext } from 'react';
import { FormField } from 'grommet';
import { FormContext } from '../Form/Form';
export var WithFormField = function (_a) {
    var validation = _a.validation, label = _a.label, description = _a.description, name = _a.name, controlLabel = _a.controlLabel, inField = _a.inField, children = _a.children, other = __rest(_a, ["validation", "label", "description", "name", "controlLabel", "inField", "children"]);
    var form = useContext(FormContext);
    var onFieldChange = form.onFieldChange, getFieldValue = form.getFieldValue, getFieldErrors = form.getFieldErrors;
    useEffect(function () {
        form.attachToForm(name, { label: label, description: description, validation: validation });
        return function () {
            form.detachFromForm(name);
        };
    });
    var onChange = function (e) {
        var value = e.value, target = e.target;
        var targetValue = target ? target.value : undefined;
        onFieldChange(name, value || targetValue, e);
    };
    var getValue = function () {
        var value = getFieldValue(name);
        return value === undefined ? '' : value;
    };
    var errors = getFieldErrors(name);
    var error = Array.isArray(errors) ? errors[0] : errors;
    if (typeof error === 'function') {
        error = error(typeof label === 'string' ? label : name);
    }
    var field = children(__assign({ id: name, name: name, label: inField ? controlLabel : label, value: getValue(), onChange: onChange }, other));
    if (!inField) {
        return field;
    }
    return (React.createElement(FormField, { htmlFor: name, label: label || (controlLabel === true && name), error: error }, field));
};
WithFormField.defaultProps = {
    validation: undefined,
    inField: true,
    controlLabel: undefined,
    label: undefined,
    description: undefined,
    Control: React.Component,
};
