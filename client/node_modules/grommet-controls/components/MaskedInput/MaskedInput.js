var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { Component } from 'react';
import { findDOMNode } from 'react-dom';
import { createTextMaskInputElement } from 'text-mask-core';
import { createAutoCorrectedDatePipe, emailMask, createNumberMask } from 'text-mask-addons';
import { DropInput } from '../DropInput';
import { transformMaskedValue } from './utils';
import { createMinMaxInputPipe, maskedNumberValue } from './minMaxNumberPipe';
/** A masked Input control with an optional drop button with the specified dropContent<br/>
* `import { MakedInput } from 'grommet-controls';`<br/>
* `<MakedInput mask={...} />`<br/>
*/
var MaskedInput = /** @class */ (function (_super) {
    __extends(MaskedInput, _super);
    function MaskedInput() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.textMaskInputElement = null;
        _this.inputControlRef = React.createRef();
        _this.onInput = function (event) {
            var onInput = _this.props.onInput;
            if (_this.textMaskInputElement) {
                _this.textMaskInputElement.update(event.target.value);
            }
            if (onInput) {
                onInput(event);
            }
        };
        return _this;
    }
    MaskedInput.prototype.initTextMask = function () {
        var _a = this, props = _a.props, value = _a.props.value;
        if (props.mask && this.inputControlRef) {
            this.textMaskInputElement = createTextMaskInputElement(__assign({ inputElement: findDOMNode(this.inputControlRef.current).getElementsByTagName('input')[0] }, props));
            this.textMaskInputElement.update(value);
        }
    };
    MaskedInput.prototype.componentDidMount = function () {
        this.initTextMask();
    };
    MaskedInput.prototype.componentDidUpdate = function () {
        this.initTextMask();
    };
    MaskedInput.prototype.maskedValue = function (value) {
        if (value === undefined) {
            return undefined;
        }
        var mask = this.props.mask;
        if (value) {
            var conformed = transformMaskedValue(value, mask, this.props);
            return conformed;
        }
        return value;
    };
    MaskedInput.prototype.render = function () {
        var _a = this.props, defaultValue = _a.defaultValue, 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        value = _a.value, mask = _a.mask, guide = _a.guide, showMask = _a.showMask, pipe = _a.pipe, placeholderChar = _a.placeholderChar, keepCharPositions = _a.keepCharPositions, rest = __rest(_a, ["defaultValue", "value", "mask", "guide", "showMask", "pipe", "placeholderChar", "keepCharPositions"]);
        return (React.createElement(DropInput, __assign({ ref: this.inputControlRef, value: this.maskedValue(value), defaultValue: this.maskedValue(defaultValue), onInput: this.onInput }, rest)));
    };
    MaskedInput.defaultProps = {
        type: 'text',
        guide: true,
        showMask: false,
        placeholderChar: '\u2000',
    };
    MaskedInput.alphabetic = /[A-Z]/i;
    MaskedInput.placeholderChars = {
        whitespace: '\u2000',
        underscore: '_',
    };
    MaskedInput.digit = /\d/;
    MaskedInput.createAutoCorrectedDatePipe = createAutoCorrectedDatePipe;
    MaskedInput.emailMask = emailMask;
    MaskedInput.createNumberMask = createNumberMask;
    MaskedInput.createMinMaxInputPipe = createMinMaxInputPipe;
    MaskedInput.maskedNumberValue = maskedNumberValue;
    return MaskedInput;
}(Component));
export { MaskedInput };
