var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { transformMaskedValue } from './utils';
export var maskedNumberValue = function (_a) {
    var value = _a.value, prefix = _a.prefix, suffix = _a.suffix, thousandsSeparatorSymbol = _a.thousandsSeparatorSymbol;
    var val;
    if (typeof value === 'string') {
        val = value.replace(new RegExp("[" + prefix + suffix + thousandsSeparatorSymbol + "]", 'g'), '');
        val = parseFloat(val);
        if (Number.isNaN(val)) {
            val = undefined;
        }
    }
    else {
        val = value;
    }
    return val;
};
export var createMinMaxInputPipe = function (_a) {
    var min = _a.min, max = _a.max, mask = _a.mask, props = __rest(_a, ["min", "max", "mask"]);
    return (function (conformedValue) {
        if (typeof min === 'number' || typeof max === 'number') {
            var value = maskedNumberValue(__assign(__assign({}, props), { value: conformedValue }));
            if (typeof value === 'number') {
                if (typeof min === 'number' && value < min) {
                    var resolved = transformMaskedValue(min, mask, props);
                    if (resolved === undefined) {
                        return undefined;
                    }
                    return { value: resolved };
                }
                if (typeof max === 'number' && value > max) {
                    var resolved = transformMaskedValue(max, mask, props);
                    if (resolved === undefined) {
                        return undefined;
                    }
                    return { value: resolved };
                }
            }
        }
        return { value: conformedValue.toString() };
    });
};
