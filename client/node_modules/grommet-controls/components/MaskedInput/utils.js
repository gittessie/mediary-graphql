var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { conformToMask } from 'text-mask-core';
var strCaretTrap = '[]';
var processCaretTraps = function (mask) {
    var indexes = [];
    var indexOfCaretTrap;
    while (indexOfCaretTrap = mask.indexOf(strCaretTrap), indexOfCaretTrap !== -1) { // eslint-disable-line
        indexes.push(indexOfCaretTrap);
        mask.splice(indexOfCaretTrap, 1);
    }
    return mask;
};
// eslint-disable-next-line import/prefer-default-export
export var transformMaskedValue = function (value, providedMask, props) {
    if (!providedMask) {
        return value.toString();
    }
    var pipe = props.pipe;
    var safeValue;
    if (value === undefined || value === null) {
        safeValue = '';
    }
    else {
        safeValue = value.toString();
    }
    var mask;
    if (typeof providedMask === 'object' && providedMask.pipe !== undefined && providedMask.mask !== undefined) {
        // eslint-disable-next-line no-param-reassign
        providedMask = providedMask.mask;
        (pipe = providedMask.pipe);
    }
    if (typeof providedMask === 'function') {
        mask = providedMask(safeValue, __assign(__assign({}, props), { pipe: pipe }));
        // disable masking if `mask` is `false`
        if (mask === false) {
            return safeValue;
        }
        // The processed mask is what we're interested in
        mask = processCaretTraps(mask);
        // If the `providedMask` is not a function, we just use it as-is.
    }
    else {
        mask = providedMask;
    }
    var conformedValue = safeValue;
    var guide = props.guide, placeholderChar = props.placeholderChar, placeholder = props.placeholder, currentCaretPosition = props.currentCaretPosition, showMask = props.showMask, keepCharPositions = props.keepCharPositions;
    var conformToMaskConfig = {
        previousPlaceholder: placeholder,
        guide: guide,
        placeholderChar: placeholderChar,
        pipe: pipe,
        currentCaretPosition: currentCaretPosition,
        keepCharPositions: keepCharPositions,
    };
    var conformed = conformToMask(safeValue, mask, conformToMaskConfig);
    if (conformed) {
        (conformedValue = conformed.conformedValue);
    }
    if (typeof pipe === 'function') {
        var pipeResults = pipe(conformedValue, __assign({ rawValue: safeValue }, conformToMaskConfig));
        if (typeof pipeResults === 'string') {
            conformedValue = pipeResults;
        }
    }
    if (conformedValue === placeholder) {
        conformedValue = showMask ? placeholder : '';
    }
    return conformedValue;
};
