var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { Component } from 'react';
import { FormView } from 'grommet-icons/icons/FormView';
import { Hide } from 'grommet-icons/icons/Hide';
import { DropInput } from '../DropInput';
/**
*A password field with show/hide password toggle<br/>
*All properties of DropInput apply<br/>
*`import { PasswordInput } from 'grommet-controls';`<br/>
*`<PasswordInput value={...} />`<br/>
*/
var PasswordInput = /** @class */ (function (_super) {
    __extends(PasswordInput, _super);
    function PasswordInput() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = { showPassword: false };
        _this.toggleView = function (e) {
            var showPassword = _this.state.showPassword;
            e.stopPropagation();
            _this.setState({ showPassword: !showPassword });
        };
        return _this;
    }
    PasswordInput.prototype.render = function () {
        var _a = this.props, viewIcon = _a.viewIcon, hideIcon = _a.hideIcon, a11yViewPassword = _a.a11yViewPassword, a11yHidePassword = _a.a11yHidePassword, rest = __rest(_a, ["viewIcon", "hideIcon", "a11yViewPassword", "a11yHidePassword"]);
        var showPassword = this.state.showPassword;
        return (React.createElement(DropInput, __assign({ type: showPassword ? 'text' : 'password', widgets: [
                {
                    'icon': showPassword ? hideIcon : viewIcon,
                    'aria-label': showPassword ? a11yHidePassword : a11yViewPassword,
                    'onClick': this.toggleView,
                },
            ] }, rest)));
    };
    PasswordInput.defaultProps = {
        viewIcon: React.createElement(FormView, null),
        hideIcon: React.createElement(Hide, null),
        a11yViewPassword: 'View password',
        a11yHidePassword: 'Hide password',
    };
    return PasswordInput;
}(Component));
export { PasswordInput };
