{"ast":null,"code":"var _jsxFileName = \"/Users/tessie/Documents/mediary-graphql/client/src/components/Authentication/Login.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Hide, View } from \"grommet-icons\";\nimport { Box, TextInput, Button } from \"grommet\";\n\nconst Login = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [reveal, setReveal] = React.useState(false);\n  const [isButtonDisabled, setButtonDisabled] = useState(true);\n  const [isLoading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  useEffect(() => {\n    if (email.trim() && password.trim()) {\n      setButtonDisabled(false);\n    } else {\n      setButtonDisabled(true);\n    }\n  }, [email, password]);\n\n  const handleLogin = async () => {\n    setLoading(true);\n    const response = {\n      code: 200\n    };\n\n    if (response.code === 200) {//login\n    } else {\n      setError(\"Invalid credentials.\");\n    }\n  };\n\n  const handleKeyPress = e => {\n    if (e.keyCode === 13 || e.which === 13) {\n      isButtonDisabled || handleLogin();\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, isLoading && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 23\n    }\n  }, \"Loading...\"), error && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }\n  }, error), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, \"Sign In\"), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"emailInput\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, \"Email\"), /*#__PURE__*/React.createElement(TextInput, {\n    id: \"emailInput\",\n    onChange: e => setEmail(e.target.value),\n    onKeyPress: e => handleKeyPress(e),\n    name: \"email\",\n    value: email,\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"passwordInput\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, \"Password\"), /*#__PURE__*/React.createElement(Box, {\n    width: \"medium\",\n    direction: \"row\",\n    margin: \"large\",\n    align: \"center\",\n    round: \"small\",\n    border: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TextInput, {\n    plain: true,\n    id: \"passwordInput\",\n    onChange: e => setPassword(e.target.value),\n    onKeyPress: e => handleKeyPress(e),\n    name: \"password\",\n    value: password,\n    type: reveal ? \"text\" : \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    icon: reveal ? /*#__PURE__*/React.createElement(View, {\n      size: \"medium\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 24\n      }\n    }) : /*#__PURE__*/React.createElement(Hide, {\n      size: \"medium\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 49\n      }\n    }),\n    onClick: () => setReveal(!reveal),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => handleLogin(),\n    disabled: isButtonDisabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, \"Sign In\"), /*#__PURE__*/React.createElement(Link, {\n    to: \"/auth/register\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, \"Create an Account\"));\n};\n\nexport default Login;","map":{"version":3,"sources":["/Users/tessie/Documents/mediary-graphql/client/src/components/Authentication/Login.tsx"],"names":["React","useEffect","useState","Link","Hide","View","Box","TextInput","Button","Login","email","setEmail","password","setPassword","reveal","setReveal","isButtonDisabled","setButtonDisabled","isLoading","setLoading","error","setError","trim","handleLogin","response","code","handleKeyPress","e","keyCode","which","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Hide, View } from \"grommet-icons\";\n\nimport { Box, TextInput, Button } from \"grommet\";\n\nconst Login: React.FC = () => {\n  const [email, setEmail] = useState<string>(\"\");\n  const [password, setPassword] = useState<string>(\"\");\n  const [reveal, setReveal] = React.useState(false);\n  const [isButtonDisabled, setButtonDisabled] = useState<boolean>(true);\n  const [isLoading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string>(\"\");\n\n  useEffect(() => {\n    if (email.trim() && password.trim()) {\n      setButtonDisabled(false);\n    } else {\n      setButtonDisabled(true);\n    }\n  }, [email, password]);\n\n  const handleLogin = async (): Promise<void> => {\n    setLoading(true);\n    const response = { code: 200 };\n    if (response.code === 200) {\n      //login\n    } else {\n      setError(\"Invalid credentials.\");\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>): void => {\n    if (e.keyCode === 13 || e.which === 13) {\n      isButtonDisabled || handleLogin();\n    }\n  };\n\n  return (\n    <div>\n        {isLoading && <div>Loading...</div>}\n      {error && <div>{error}</div>}\n      <h1>Sign In</h1>\n      <label htmlFor=\"emailInput\">Email</label>\n      <TextInput\n        id=\"emailInput\"\n        onChange={(e): void => setEmail(e.target.value)}\n        onKeyPress={(e): void => handleKeyPress(e)}\n        name=\"email\"\n        value={email}\n        type=\"text\"\n      />\n      <label htmlFor=\"passwordInput\">Password</label>\n      <Box\n      width=\"medium\"\n      direction=\"row\"\n      margin=\"large\"\n      align=\"center\"\n      round=\"small\"\n      border\n    >\n      <TextInput\n        plain\n        id=\"passwordInput\"\n        onChange={(e): void => setPassword(e.target.value)}\n        onKeyPress={(e): void => handleKeyPress(e)}\n        name=\"password\"\n        value={password}\n        type={reveal ? \"text\" : \"password\"}\n      />\n      \n      <Button\n        icon={reveal ? <View size=\"medium\" /> : <Hide size=\"medium\" />}\n        onClick={() => setReveal(!reveal)}\n      />\n      </Box>\n\n      <Button\n        onClick={(): Promise<void> => handleLogin()}\n        disabled={isButtonDisabled}\n      >\n        Sign In\n      </Button>\n\n      <Link to='/auth/register'>Create an Account</Link>\n    </div>\n  );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}